/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/jobs': {
    /** Get a list of all projects */
    get: operations['getJobs']
    /** Create a new project */
    post: operations['createJob']
  }
  '/jobs/open': {
    /**
     * Open existing project file
     * @description The file needs to be updated via form data.  The filename content disposition header excluding filename extension is used to define the project ID if present, otherwise the existing project ID in the project is used.
     */
    post: operations['openJob']
  }
  '/jobs/{jobid}': {
    /** Get project at current {projectid} */
    get: operations['getJob']
    /** Close the project with ID of {projectid} */
    delete: operations['deleteJob']
    /** Edit project */
    patch: operations['editProject']
  }
  '/jobs/{jobid}/export/report/json': {
    /** Export JSON Project Report of the given project */
    post: operations['exportJsonReport_1']
  }
  '/jobs/{jobid}/export/report/xml': {
    /** Export XML Project Report of the given project */
    post: operations['exportXmlReport_1']
  }
  '/jobs/{jobid}/export/cover-sheet': {
    /** Export layout cover sheet(s) of the given project */
    post: operations['exportCoverSheet']
  }
  '/jobs/{jobid}/export/report/csv': {
    /** Export CSV Report of the given project */
    post: operations['exportCsvReport']
  }
  '/jobs/{jobid}/export/die/cff2': {
    /** Export CFF2 Die Layout of current project */
    post: operations['exportCff2DieLayout']
  }
  '/jobs/{jobid}/export/die/dxf': {
    /** Export DXF Die Layout of current project */
    post: operations['exportDxfDieLayout']
  }
  '/jobs/{jobid}/export/die/mfg': {
    /** (Beta) Export MFG Die Layout of current project */
    post: operations['exportMfgDieLayout']
  }
  '/jobs/{jobid}/export/die/pdf': {
    /** Export PDF Die Layout of current project */
    post: operations['exportPdfDieLayout']
  }
  '/jobs/{jobid}/export/die/zcc': {
    /** Export Zund Cut Center Layout of current project */
    post: operations['exportZcc']
  }
  '/jobs/{jobid}/export/hp-jdf': {
    /** Export HP JDF of the given project */
    post: operations['exportHpJdf']
  }
  '/jobs/{jobid}/export/jdf': {
    /** Export Layout JDF of the given project */
    post: operations['exportImposedJdf']
  }
  '/jobs/{jobid}/export/jdf-cutting': {
    /** Export JDF Cutting Data of the given project */
    post: operations['exportCuttingJdf']
  }
  '/jobs/{jobid}/export/jdf-kongsberg': {
    /** Export Kongsberg JDF of the given project */
    post: operations['exportKongsbergJdf']
  }
  '/jobs/{jobid}/export/pdf': {
    /** Export Layout PDF of current project */
    post: operations['exportImposedPdf']
  }
  '/jobs/{jobid}/export/report/pdf': {
    /** Export PDF Project Report of the given project */
    post: operations['exportPdfReport']
  }
  '/jobs/{jobid}/export/pdf-vector': {
    /** Export Vector Separation of the given project */
    post: operations['exportVectorPdf']
  }
  '/jobs/{jobid}/export/tiling-report': {
    /** Export Tiling report of the given project */
    post: operations['exportTilingReport']
  }
  '/jobs/{jobid}/import/die-template': {
    /** Import die template */
    post: operations['importDieTemplate']
  }
  '/jobs/{jobid}/impose/{layoutindex}/result/{resultid}/apply': {
    /** Apply result from most recent Impose run */
    post: operations['applyImposeResult']
  }
  '/jobs/{jobid}/impose/{layoutindex}': {
    /** Run Impose tool to generate layouts */
    post: operations['impose']
  }
  '/jobs/{jobid}/impose/{layoutindex}/result/{resultid}': {
    /** A single Impose result by ID */
    get: operations['getImposeResult']
  }
  '/jobs/{jobid}/impose/{layoutindex}/results': {
    /** A list of most recent Impose results */
    get: operations['getImposeResults']
  }
  '/jobs/{jobid}/layouts': {
    /** Get list of all layouts in the project */
    get: operations['getLayouts_1']
    /** Create a new layout */
    post: operations['createLayout_1']
  }
  '/jobs/{jobid}/layouts/{layoutindex}/back': {
    /** Get back layout surface */
    get: operations['getLayoutBack']
    /** Edit surface */
    patch: operations['editSurface']
  }
  '/jobs/{jobid}/layouts/{layoutindex}': {
    /** Get project layout by index */
    get: operations['getLayout']
    /** Edit layout properties */
    put: operations['editLayout']
    /** Delete layout from the project by index */
    delete: operations['deleteLayout']
  }
  '/jobs/{jobid}/layouts/{layoutindex}/front': {
    /** Get front layout surface */
    get: operations['getLayoutFront']
    /** Edit surface */
    patch: operations['editSurface_1']
  }
  '/jobs/{jobid}/layouts/{layoutindex}/place/component': {
    /** Place component of product */
    post: operations['placeComponent']
  }
  '/jobs/{jobid}/layouts/{layoutindex}/place/die-template': {
    /** Place die template */
    post: operations['placeDieTemplate']
  }
  '/jobs/{jobid}/layouts/{layoutindex}/plate': {
    /** Get layout plate */
    get: operations['getLayoutPlate']
    /** Set layout plate */
    post: operations['setLayoutPlate']
  }
  '/jobs/{jobid}/layouts/{layoutindex}/press': {
    /**
     * Get layout press
     * @deprecated
     */
    get: operations['getLayoutPress']
    /**
     * Set layout press
     * @deprecated
     */
    post: operations['setLayoutPress']
  }
  '/jobs/{jobid}/layouts/{layoutindex}/sheet': {
    /** Get layout sheet */
    get: operations['getLayoutSheet']
    /** Resize layout sheet */
    put: operations['resizeLayoutSheet']
    /** Set layout sheet */
    post: operations['setLayoutSheet']
  }
  '/jobs/{jobid}/layouts/{layoutindex}/step-repeat': {
    /** Generate step and repeat group */
    post: operations['stepRepeat']
  }
  '/jobs/{jobid}/optimize/{layoutindex}/result/{resultid}/apply': {
    /** Apply result from most recent Optimize run */
    post: operations['applyOptimizeResult']
  }
  '/jobs/{jobid}/optimize/{layoutindex}': {
    /** Run Optimize tool to generate layouts */
    post: operations['optimize']
  }
  '/jobs/{jobid}/optimize/{layoutindex}/result/{resultid}': {
    /** A single Optimize result by ID */
    get: operations['getOptimizeResult']
  }
  '/jobs/{jobid}/optimize/{layoutindex}/results': {
    /** A list of most recent Optimize results */
    get: operations['getOptimizeResults']
  }
  '/jobs/{jobid}/files/output/{fileid}': {
    /** Get output project file by ID */
    get: operations['getOutputFile']
    /** Delete output project files from this project with specific file ID */
    delete: operations['deleteOutputFile']
  }
  '/jobs/{jobid}/files/output/{fileid}/{filepath}': {
    /** Download specific output file content */
    get: operations['downloadOutputFile']
  }
  '/jobs/{jobid}/files/output': {
    /** Get all output files currently saved to this project */
    get: operations['getOutputFiles']
  }
  '/jobs/{jobid}/plan/results/{resultid}/apply/{start}/{end}': {
    /** Apply result from most recent plan run */
    post: operations['applyPartialPlan']
  }
  '/jobs/{jobid}/plan/results/{resultid}/apply': {
    /** Apply result from most recent plan run */
    post: operations['applyPlanResult']
  }
  '/jobs/{jobid}/plan': {
    /** Run Plan tool to generate project plans */
    post: operations['plan']
  }
  '/jobs/{jobid}/plan/results/{resultid}': {
    /** A single plan result by ID */
    get: operations['getPlanResult']
  }
  '/jobs/{jobid}/plan/results': {
    /** A list of most recent Plan results */
    get: operations['getPlanResults']
  }
  '/jobs/{jobid}/plan/start': {
    /** Start running Plan tool asynchronously to generate project plans */
    post: operations['planStart']
  }
  '/jobs/{jobid}/plan/status': {
    /** Get current plan tool running status */
    get: operations['planStatus']
  }
  '/jobs/{jobid}/plan/stop': {
    /** Stop plan tool if it is currently running */
    post: operations['planStop']
  }
  '/jobs/{jobid}/populate/{layoutindex}/result/{resultid}/apply': {
    /** Apply result from most recent Populate run */
    post: operations['applyPopulateResult']
  }
  '/jobs/{jobid}/populate/{layoutindex}': {
    /** Run Populate tool to generate layouts */
    post: operations['populate']
  }
  '/jobs/{jobid}/populate/{layoutindex}/result/{resultid}': {
    /** A single Populate result by ID */
    get: operations['getPopulateResult']
  }
  '/jobs/{jobid}/populate/{layoutindex}/results': {
    /** A list of most recent Populate results */
    get: operations['getPopulateResults']
  }
  '/jobs/{jobid}/products': {
    /** Get all products of the current project */
    get: operations['getProducts_1']
    /** Create new product */
    post: operations['createProduct_1']
  }
  '/jobs/{jobid}/products/import/csv': {
    /** Import products from CSV file */
    post: operations['importProductCsv']
  }
  '/jobs/{jobid}/products/{productname}/image-tracing': {
    /** Apply image tracing to the product */
    post: operations['imageTracing']
  }
  '/jobs/{jobid}/products/{productname}/marks/apply': {
    /** Apply a smart product mark to this product */
    post: operations['applyProductMark']
  }
  '/jobs/{jobid}/products/{productname}': {
    /** Get product with name of {productname} */
    get: operations['getProduct']
    /** Delete product with name {productname} from the project */
    delete: operations['deleteProduct']
  }
  '/jobs/{jobid}/products/{productname}/snap': {
    /** Snap artwork to a given side of the product */
    post: operations['snapProduct']
  }
  '/jobs/{jobid}/products/{productname}/export/tiling-report': {
    /** Export Tiling report of the given product */
    post: operations['exportProductTilingReport']
  }
  '/jobs/{jobid}/save': {
    /** Save project */
    post: operations['saveJob']
  }
  '/jobs/{jobid}/save-template': {
    /** Save project template */
    post: operations['saveJobTemplate']
  }
  '/jobs/{jobid}/script': {
    /**
     * Run a script on the current project
     * @deprecated
     */
    post: operations['run']
  }
  '/jobs/{jobid}/snap': {
    /** Snap artwork to products or die numbers in project */
    post: operations['snap']
  }
  '/jobs/{jobid}/files/upload/{fileid}': {
    /** Get uploaded project file by ID */
    get: operations['getUploadedFile']
    /** Delete uploaded project file from this project */
    delete: operations['deleteUploadedFile']
  }
  '/jobs/{jobid}/files/upload/{fileid}/{filepath}': {
    /** Download specific uploaded file content */
    get: operations['downloadUploadedFile']
  }
  '/jobs/{jobid}/files/upload': {
    /** Get all files currently uploaded to this project */
    get: operations['getUploadedFiles']
    /**
     * Upload new file to project
     * @description The URI returned in the response entity can be used to download the file content directly or referred to when adding products.
     */
    post: operations['uploadFile']
  }
  '/projects': {
    /** Get a list of all projects */
    get: operations['getJobs_1']
    /** Create a new project */
    post: operations['createJob_1']
  }
  '/projects/open': {
    /**
     * Open existing project file
     * @description The file needs to be updated via form data.  The filename content disposition header excluding filename extension is used to define the project ID if present, otherwise the existing project ID in the project is used.
     */
    post: operations['openJob_1']
  }
  '/projects/{projectid}/repeat-templates': {
    /** List repeat templates in the project */
    get: operations['repeatTemplates']
    /** Add a repeat template to the project */
    post: operations['addRepeatTemplate']
  }
  '/projects/{projectid}/products/bound': {
    /** Create new bound product */
    post: operations['createBoundProduct']
  }
  '/projects/{projectid}/products/flat': {
    /** Create new flat product */
    post: operations['createFlatProduct']
  }
  '/projects/{projectid}/products/folded': {
    /** Create new folded product */
    post: operations['createFoldedProduct']
  }
  '/projects/{projectid}/products/tiled': {
    /** Create new tiled product */
    post: operations['createTiledProduct']
  }
  '/projects/{projectid}/products': {
    /** Get list of products */
    get: operations['getProductsV2']
  }
  '/projects/{projectid}/products/{productname}/bound-parts': {
    /** Get list of bound parts */
    get: operations['getBoundParts']
  }
  '/projects/{projectid}/products/{productname}/bound-parts/{partindex}': {
    /** Get bound part */
    get: operations['getBoundPart_1']
    /** Edit bound part */
    patch: operations['editBoundPart']
  }
  '/projects/{projectid}/products/{productname}/bound-parts/{partindex}/sections': {
    /** Get list of sections. Only applicable to bound parts */
    get: operations['getSections']
    /** Create new section */
    post: operations['createSection']
  }
  '/projects/{projectid}/products/{productname}/bound-parts/{partindex}/sections/{sectionindex}': {
    /** Get section */
    get: operations['getSection']
    /** Delete section */
    delete: operations['deleteSection']
    /** Edit section */
    patch: operations['editSection']
  }
  '/projects/{projectid}/products/{productname}/bound-parts/{partindex}/sections/{sectionindex}/signatures': {
    /** Get list of signatures */
    get: operations['getSignatures']
    /** Create new signature */
    post: operations['createSignature']
  }
  '/projects/{projectid}/products/{productname}/bound-parts/{partindex}/sections/{sectionindex}/signatures/{signatureindex}': {
    /** Get bound signature */
    get: operations['getBoundSignature_1']
    /** Delete signature */
    delete: operations['deleteSignature']
  }
  '/projects/{projectid}/products/{productname}': {
    /** Get product with name of {productname} */
    get: operations['getProductV2']
    /** Delete product */
    delete: operations['deleteProductV2']
    /** Edit product */
    patch: operations['editProduct']
  }
  '/projects/{projectid}/products/{productname}/flat-parts': {
    /** Get list of flat parts */
    get: operations['getFlatParts']
  }
  '/projects/{projectid}/products/{productname}/flat-parts/{partindex}/flats': {
    /** Get list of flats */
    get: operations['getFlats']
  }
  '/projects/{projectid}/products/{productname}/flat-parts/{partindex}/flats/{flatindex}': {
    /** Get flat */
    get: operations['getFlat_1']
    /** Edit flat */
    patch: operations['editFlat']
  }
  '/projects/{projectid}/products/{productname}/flat-parts/{partindex}': {
    /** Get flat part */
    get: operations['getFlatPart_1']
    /** Edit flat part */
    patch: operations['editFlatPart']
  }
  '/projects/{projectid}/products/{productname}/folded-parts': {
    /** Get list of folded parts */
    get: operations['getFoldedParts']
  }
  '/projects/{projectid}/products/{productname}/folded-parts/{partindex}': {
    /** Get folded part */
    get: operations['getFoldedPart_1']
    /** Edit folded part */
    patch: operations['editFoldedPart']
  }
  '/projects/{projectid}/products/{productname}/folded-parts/{partindex}/signatures': {
    /** Get list of signatures */
    get: operations['getFoldedSignatures']
  }
  '/projects/{projectid}/products/{productname}/folded-parts/{partindex}/signatures/{signatureindex}': {
    /** Get folded signature */
    get: operations['getFoldedSignature_1']
  }
  '/projects/{projectid}/products/{productname}/parts': {
    /** Get list of parts */
    get: operations['getParts']
  }
  '/projects/{projectid}/products/{productname}/parts/{partindex}/components': {
    /** Get list of components */
    get: operations['getComponents']
  }
  '/projects/{projectid}/products/{productname}/parts/{partindex}/components/{componentindex}': {
    /** Get component */
    get: operations['getComponent']
    /** Edit component */
    patch: operations['editComponent']
  }
  '/projects/{projectid}/products/{productname}/parts/{partindex}': {
    /** Get part */
    get: operations['getPart']
    /** Edit part */
    patch: operations['editPart']
  }
  '/projects/{projectid}/products/{productname}/parts/{partindex}/pages': {
    /** Get list of pages */
    get: operations['getPages']
    /** Create new pages */
    post: operations['createPages']
  }
  '/projects/{projectid}/products/{productname}/parts/{partindex}/pages/assign': {
    /** Assign artwork to pages */
    post: operations['assignArtwork']
  }
  '/projects/{projectid}/products/{productname}/parts/{partindex}/pages/{pageindex}/colors/{colorindex}': {
    /** Get page color by index */
    get: operations['getPageColor']
    /** Edit page color */
    put: operations['editPageColor']
  }
  '/projects/{projectid}/products/{productname}/parts/{partindex}/pages/{pageindex}/colors': {
    /** Get list of colors in the page */
    get: operations['getPageColors']
  }
  '/projects/{projectid}/products/{productname}/parts/{partindex}/pages/{pageindex}': {
    /** Get page */
    get: operations['getPage']
    /** Delete page */
    delete: operations['deletePage']
    /** Edit page */
    patch: operations['editPage']
  }
  '/projects/{projectid}/products/{productname}/parts/{partindex}/pages/{pageindex}/file': {
    /** Delete page file */
    delete: operations['deletePageFile']
    /** Edit page file */
    patch: operations['editPageFile']
  }
  '/projects/{projectid}/products/{productname}/parts/{partindex}/pages/{pageindex}/layers': {
    /** Get list of layers in the page */
    get: operations['getPageLayers']
  }
  '/projects/{projectid}/products/{productname}/parts/{partindex}/pages/{pageindex}/layers/{layerindex}': {
    /** Get page layer by index */
    get: operations['getPageLayer']
    /** Edit page layer */
    patch: operations['editPageLayer']
  }
  '/projects/{projectid}/products/{productname}/tiled-parts': {
    /** Get list of tiled parts */
    get: operations['getTiledParts']
  }
  '/projects/{projectid}/products/{productname}/tiled-parts/{partindex}': {
    /** Get tiled part */
    get: operations['getTiledPart_1']
    /** Edit tiled part */
    patch: operations['editTiledPart']
  }
  '/projects/{projectid}/products/{productname}/tiled-parts/{partindex}/tiles': {
    /** Get list of tiles */
    get: operations['getTiles']
  }
  '/projects/{projectid}/products/{productname}/tiled-parts/{partindex}/tiles/{tileindex}': {
    /** Get tile */
    get: operations['getTile_1']
    /** Edit tile */
    patch: operations['editTile']
  }
  '/projects/{projectid}/repeat-templates/{name}': {
    /** Update repeat template in the project with the nameprovided */
    put: operations['updateRepeatTemplate']
    /** Remove repeat template in the project with the nameprovided */
    delete: operations['removeRepeatTemplate']
  }
  '/projects/{projectid}/script': {
    /** Run a script on the current project */
    post: operations['run_1']
  }
  '/projects/script': {
    /** Run a script */
    post: operations['run_2']
  }
  '/libraries/diedesigns/{diedesignid}': {
    /** Get die design by ID */
    get: operations['getDieDesign_1']
    /** Delete die design */
    delete: operations['deleteDieDesign_1']
  }
  '/libraries/diedesigns': {
    /** Get list of all die designs */
    get: operations['getDieDesigns_1']
    /** Import new die design */
    post: operations['importDieDesign_1']
  }
  '/libraries/modes/{modeid}': {
    /** Get mode by ID */
    get: operations['getMode_1']
    /** Edit mode */
    put: operations['editMode_1']
    /** Delete mode */
    delete: operations['deleteMode_1']
  }
  '/libraries/modes': {
    /** Get list of all modes */
    get: operations['getModes_1']
    /** Add new mode */
    post: operations['addMode_1']
  }
  '/libraries/plates/{plateid}': {
    /** Get plate by ID */
    get: operations['getPlate_1']
    /** Edit plate */
    put: operations['editPlate_1']
    /** Delete plate */
    delete: operations['deletePlate_1']
  }
  '/libraries/plates': {
    /** Get list of all plates */
    get: operations['getPlates_1']
    /** Add new plate */
    post: operations['addPlate_1']
  }
  '/libraries/presses/{pressid}': {
    /** Get press by ID */
    get: operations['getPress_1']
    /** Edit press */
    put: operations['editPress_1']
    /** Delete press */
    delete: operations['deletePress_1']
  }
  '/libraries/presses': {
    /** Get list of all presses */
    get: operations['getPresses_1']
    /** Add new press */
    post: operations['addPress_1']
  }
  '/libraries/processtypes/{processtypeid}': {
    /** Get process type by ID */
    get: operations['getProcessType_1']
    /** Edit process type */
    put: operations['editProcessType_1']
    /** Delete process type */
    delete: operations['deleteProcessType_1']
  }
  '/libraries/processtypes': {
    /** Get list of all process types */
    get: operations['getProcessTypes_1']
    /** Add new process type */
    post: operations['addProcessType_1']
  }
  '/libraries/processes/{processid}': {
    /** Get process by ID */
    get: operations['getProcess_1']
    /** Edit process */
    put: operations['editProcess_1']
    /** Delete process */
    delete: operations['deleteProcess_1']
  }
  '/libraries/processes': {
    /** Get list of all processes */
    get: operations['getProcesses_1']
    /** Add new process */
    post: operations['addProcess_1']
  }
  '/libraries/stocktypes/{stocktypeid}': {
    /** Get stock type by ID */
    get: operations['getStockType_1']
    /** Edit stock type */
    put: operations['editStockType_1']
    /** Delete stock type */
    delete: operations['deleteStockType_1']
  }
  '/libraries/stocktypes': {
    /** Get list of all stock types */
    get: operations['getStockTypes_1']
    /** Add new stock type */
    post: operations['addStockType_1']
  }
  '/libraries/v2/stocks/{stockid}': {
    /** Get stock by ID */
    get: operations['getStock_1']
    /** Edit stock */
    put: operations['editStock_2']
    /** Delete stock */
    delete: operations['deleteStock_2']
  }
  '/libraries/v2/stocks': {
    /** Get list of all stocks */
    get: operations['getStocks_2']
    /** Add new stock */
    post: operations['addStock_2']
  }
  '/libraries/templates/{templateid}': {
    /** Get template by ID */
    get: operations['getTemplate_1']
    /** Delete template */
    delete: operations['deleteTemplate_1']
  }
  '/libraries/templates': {
    /** Get list of all templates */
    get: operations['getTemplates_1']
    /** Import new template */
    post: operations['importTemplate_1']
  }
  '/libraries/things/{thingid}': {
    /** Get thing by ID */
    get: operations['getThing_1']
    /** Edit thing */
    put: operations['editThing_1']
    /** Delete thing */
    delete: operations['deleteThing_1']
  }
  '/libraries/things': {
    /** Get list of all things */
    get: operations['getThings_1']
    /** Add new thing */
    post: operations['addThing_1']
  }
  '/libraries/folding': {
    /**
     * Get list of all folding patterns
     * @deprecated
     */
    get: operations['getFoldingPatterns']
  }
  '/libraries/v2/folding/{foldingpatternid}': {
    /** Get folding pattern by ID */
    get: operations['getFoldingPattern_1']
    /** Edit folding pattern */
    put: operations['editFoldingPattern']
    /** Delete folding pattern */
    delete: operations['deleteFoldingPattern']
  }
  '/libraries/v2/folding': {
    /** Get list of all folding patterns */
    get: operations['getFoldingPatterns_1']
    /** Add new folding pattern */
    post: operations['addFoldingPattern']
  }
  '/libraries/marksets': {
    /** Get list of all mark sets */
    get: operations['getMarkSets']
  }
  '/libraries/marks': {
    /** Get list of all marks */
    get: operations['getMarks']
  }
  '/libraries/v2/marks/{markid}': {
    /** Get mark by ID */
    get: operations['getMark_1']
    /** Edit mark */
    put: operations['editMark']
    /** Delete mark */
    delete: operations['deleteMark']
  }
  '/libraries/v2/marks': {
    /** Get list of all marks */
    get: operations['getMarks_1']
    /** Add new mark */
    post: operations['addMark']
  }
  '/libraries/scripts/{scriptid}': {
    /** Get script by ID */
    get: operations['getScript_1']
    /** Edit script */
    put: operations['editScript']
    /** Delete script */
    delete: operations['deleteScript']
  }
  '/libraries/scripts': {
    /** Get list of all scripts */
    get: operations['getScripts']
    /** Add new script */
    post: operations['addScript']
  }
  '/libraries/stocks/{stockid}': {
    /**
     * Get stock by ID
     * @deprecated
     */
    get: operations['getStock_2']
    /**
     * Edit stock
     * @deprecated
     */
    put: operations['editStock_1']
    /**
     * Delete stock
     * @deprecated
     */
    delete: operations['deleteStock_1']
  }
  '/libraries/stocks': {
    /**
     * Get list of all stocks
     * @deprecated
     */
    get: operations['getStocks_1']
    /**
     * Add new stock
     * @deprecated
     */
    post: operations['addStock_1']
  }
  '/libraries/stocks/{stockid}/grades/{gradeid}': {
    /**
     * Get grade by ID
     * @deprecated
     */
    get: operations['getGrade']
    /**
     * Edit grade
     * @deprecated
     */
    put: operations['editGrade']
    /**
     * Delete grade in stock
     * @deprecated
     */
    delete: operations['deleteGrade']
  }
  '/libraries/stocks/{stockid}/grades': {
    /**
     * Get list of all grades in the stock
     * @deprecated
     */
    get: operations['getGrades']
    /**
     * Add new grade to stock
     * @deprecated
     */
    post: operations['addGrade']
  }
  '/libraries/stocks/{stockid}/grades/{gradeid}/rolls/{rollid}': {
    /**
     * Get roll by ID
     * @deprecated
     */
    get: operations['getRoll']
    /**
     * Edit roll
     * @deprecated
     */
    put: operations['editRoll']
    /**
     * Delete roll in grade
     * @deprecated
     */
    delete: operations['deleteRoll']
  }
  '/libraries/stocks/{stockid}/grades/{gradeid}/rolls': {
    /**
     * Get list of all rolls in the grade
     * @deprecated
     */
    get: operations['getRolls']
    /**
     * Add new roll to grade
     * @deprecated
     */
    post: operations['addRoll']
  }
  '/libraries/stocks/{stockid}/grades/{gradeid}/sheets/{sheetid}': {
    /**
     * Get sheet by ID
     * @deprecated
     */
    get: operations['getSheet']
    /**
     * Edit sheet
     * @deprecated
     */
    put: operations['editSheet']
    /**
     * Delete sheet in grade
     * @deprecated
     */
    delete: operations['deleteSheet']
  }
  '/libraries/stocks/{stockid}/grades/{gradeid}/sheets': {
    /**
     * Get list of all sheets in the grade
     * @deprecated
     */
    get: operations['getSheets']
    /**
     * Add new sheet to grade
     * @deprecated
     */
    post: operations['addSheet']
  }
  '/libraries/tiling/{tilingid}': {
    /** Get tiling by ID */
    get: operations['getTiling_1']
    /** Edit tiling */
    put: operations['editTiling']
    /** Delete tiling */
    delete: operations['deleteTiling']
  }
  '/libraries/tiling': {
    /** Get list of all tilings */
    get: operations['getTilings']
    /** Add new tiling */
    post: operations['addTiling']
  }
  '/presets/import/die/ard': {
    /** List all ARD Die Import Presets */
    get: operations['getArdDieLayoutImportPresets_1']
  }
  '/presets/import/die/cff2': {
    /** List all CFF2 Die Layout Import Presets */
    get: operations['getCff2DieLayoutImportPresets_1']
  }
  '/presets/import/die/ddes2': {
    /** List all DDES2 Die Layout Import Presets */
    get: operations['getDdes2DieLayoutImportPresets_1']
  }
  '/presets/import/die/ddes3': {
    /** List all DDES3 Die Layout Import Presets */
    get: operations['getDdes3DieLayoutImportPresets_1']
  }
  '/presets/import/die/dxf': {
    /** List all DXF Die Layout Import Presets */
    get: operations['getDxfDieLayoutImportPresets_1']
  }
  '/presets/import/die/mfg': {
    /** List all MFG Die Import Presets */
    get: operations['getMfgDieImportPresets_1']
  }
  '/presets/import/die/pdf': {
    /** List all PDF Die Layout Import Presets */
    get: operations['getPdfDieLayoutImportPresets_1']
  }
  '/presets/imposition-ai/{profile-id}': {
    /** Get Imposition AI profile by ID */
    get: operations['getImpositionAiProfiles_1']
    /** Edit Imposition AI profile */
    put: operations['editImpositionAiProfiles_1']
    /** Delete Imposition AI profile */
    delete: operations['deleteImpositionAiProfiles_1']
  }
  '/presets/imposition-ai': {
    /** Get list of all Imposition AI profile */
    get: operations['getImpositionAiProfiles_3']
    /** Add new Imposition AI profile */
    post: operations['addImpositionAiProfiles_1']
  }
  '/presets/imposition-ai/profiles': {
    /**
     * List all Imposition AI Profiles (Deprecated)
     * @deprecated
     */
    get: operations['getImpositionAiProfiles']
  }
  '/presets/marks/dynamic-ink-mappings': {
    /** List all dynamic ink mapping presets */
    get: operations['getDynamicInkMappings']
  }
  '/presets/marks/dynamic-keyword-mappings': {
    /** List all dynamic keyword mapping presets */
    get: operations['getDynamicKeywordMapping']
  }
  '/presets/export/cover-sheet': {
    /** List all Cover Sheet export presets */
    get: operations['getCoverSheetExportPresets']
  }
  '/presets/export/report/csv': {
    /** List all CSV Report Presets */
    get: operations['getCsvReportPresets']
  }
  '/presets/export/die/cff2': {
    /** List all cutting CFF2 export presets */
    get: operations['getCff2DieExportPresets']
  }
  '/presets/export/die/dxf': {
    /** List all cutting DXF export presets */
    get: operations['getExportDieDxfPresets']
  }
  '/presets/export/die/pdf': {
    /** List all cutting PDF export presets */
    get: operations['getPdfDieExportPresets']
  }
  '/presets/export/die/zcc': {
    /** List all cutting ZCC export presets */
    get: operations['getExportDieZccPresets']
  }
  '/presets/export/hp-jdf': {
    /** List all HP JDF export presets */
    get: operations['getHpJdfExportPresets']
  }
  '/presets/export/jdf': {
    /** List all JDF export presets */
    get: operations['getImposedJdfExportPresets']
  }
  '/presets/export/jdf-cutting': {
    /** List all JDF export presets */
    get: operations['getCuttingJdfExportPresets']
  }
  '/presets/export/report/json': {
    /** List all JSON Project Report Presets */
    get: operations['getJsonReportPresets']
  }
  '/presets/export/jdf-kongsberg': {
    /** List all Kongsberg JDF export presets */
    get: operations['getKongsbergJdfExportPresets']
  }
  '/presets/export/pdf': {
    /** List all PDF export presets */
    get: operations['getImposedPdfExportPresets']
  }
  '/presets/export/report/pdf': {
    /** List all PDF Project Report Presets */
    get: operations['getPdfReportPresets']
  }
  '/presets/export/pdf-vector': {
    /** List all PDF Vector export presets */
    get: operations['getPdfVectorExportPresets']
  }
  '/presets/export/tiling-report': {
    /** List all tiling report export presets */
    get: operations['getExportTilingReportPresets']
  }
  '/presets/export/report/xml': {
    /** List all XML Project Report Presets */
    get: operations['getXmlReportPresets']
  }
  '/presets/ganging/profiles': {
    /**
     * List all Ganging Profiles (Deprecated)
     * @deprecated
     */
    get: operations['getGangingProfiles']
  }
  '/presets/import/product/csv': {
    /** List all Product CSV import presets */
    get: operations['getProductCsvImportPresets']
  }
  '/presets/tools/step-and-repeat': {
    /** List all step-and-repeat presets */
    get: operations['getStepAndRepeatPresets']
  }
  '/presets/import/stock-csv': {
    /** List all stock CSV presets */
    get: operations['getStockCsv']
  }
  '/presets/products/tiling': {
    /** List all tiling presets */
    get: operations['getTilings_1']
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    /** @description Info, warning, or error message format */
    MessageEntity: {
      /**
       * Format: int32
       * @description Unique, language independent ID for this message
       */
      id?: number
      /** @description Localized message text */
      text?: string
      /** @description Action that generated this message */
      action?: string
    }
    /** @description Standard action response including success, new resources, and error/warning messages */
    ResponseEntity: {
      /** @description Overall success of operation */
      success: boolean
      /**
       * Format: int32
       * @description HTTP response status code
       */
      'status-code'?: number
      /** @description Any errors that occurred during operation */
      errors?: components['schemas']['MessageEntity'][]
      /** @description Any warnings that occurred during operation */
      warnings?: components['schemas']['MessageEntity'][]
      /** @description URIs of newly created resources */
      resources?: string[]
    }
    /** @description Create job action resource */
    CreateJobResource: {
      /** @description Job ID */
      id: string
      /** @description Job name */
      name?: string
      /** @description Job contact person */
      contact?: string
      /** @description Job phone number */
      phone?: string
      /** @description Job client name */
      client?: string
      /** @description Job notes */
      notes?: string
      /** @description Job units */
      units?: string
      /**
       * Format: int32
       * @description ID of action resource is being applied to (Hot Folders only)
       */
      idref?: number
      /** @description Job template path for creating a new job from a template file or reporting which template was used to create a given job */
      'template-path'?: string
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description Boolean property */
    'boolean-property': {
      /** @description Property name */
      name: string
      /** @description Property value */
      value?: boolean
      /** @enum {string} */
      type:
        | 'String'
        | 'Integer'
        | 'Long'
        | 'Double'
        | 'Boolean'
        | 'Scalar'
        | 'Size'
        | 'Date'
        | 'IntegerRange'
        | 'DoubleRange'
        | 'ScalarRange'
        | 'DateRange'
        | 'Margins'
        | 'PlacementRule'
        | 'Enum'
        | 'Matcher'
        | 'TextList'
        | 'ScalarList'
        | 'List'
        | 'AssetRef'
        | 'Object'
        | 'Link'
    }
    /** @description Date property */
    'date-property': {
      /** @description Property name */
      name: string
      /**
       * Format: date-time
       * @description Property value
       */
      value?: string
      /** @enum {string} */
      type:
        | 'String'
        | 'Integer'
        | 'Long'
        | 'Double'
        | 'Boolean'
        | 'Scalar'
        | 'Size'
        | 'Date'
        | 'IntegerRange'
        | 'DoubleRange'
        | 'ScalarRange'
        | 'DateRange'
        | 'Margins'
        | 'PlacementRule'
        | 'Enum'
        | 'Matcher'
        | 'TextList'
        | 'ScalarList'
        | 'List'
        | 'AssetRef'
        | 'Object'
        | 'Link'
    }
    /** @description Number property */
    'double-property': {
      /** @description Property name */
      name: string
      /**
       * Format: double
       * @description Property value
       */
      value?: number
      /** @enum {string} */
      type:
        | 'String'
        | 'Integer'
        | 'Long'
        | 'Double'
        | 'Boolean'
        | 'Scalar'
        | 'Size'
        | 'Date'
        | 'IntegerRange'
        | 'DoubleRange'
        | 'ScalarRange'
        | 'DateRange'
        | 'Margins'
        | 'PlacementRule'
        | 'Enum'
        | 'Matcher'
        | 'TextList'
        | 'ScalarList'
        | 'List'
        | 'AssetRef'
        | 'Object'
        | 'Link'
    }
    /** @description Integer property */
    'integer-property': {
      /** @description Property name */
      name: string
      /**
       * Format: int32
       * @description Property value
       */
      value?: number
      /** @enum {string} */
      type:
        | 'String'
        | 'Integer'
        | 'Long'
        | 'Double'
        | 'Boolean'
        | 'Scalar'
        | 'Size'
        | 'Date'
        | 'IntegerRange'
        | 'DoubleRange'
        | 'ScalarRange'
        | 'DateRange'
        | 'Margins'
        | 'PlacementRule'
        | 'Enum'
        | 'Matcher'
        | 'TextList'
        | 'ScalarList'
        | 'List'
        | 'AssetRef'
        | 'Object'
        | 'Link'
    }
    /** @description Custom property */
    propertyObject: {
      /** @description Property name */
      name: string
      /** @enum {string} */
      type:
        | 'String'
        | 'Integer'
        | 'Long'
        | 'Double'
        | 'Boolean'
        | 'Scalar'
        | 'Size'
        | 'Date'
        | 'IntegerRange'
        | 'DoubleRange'
        | 'ScalarRange'
        | 'DateRange'
        | 'Margins'
        | 'PlacementRule'
        | 'Enum'
        | 'Matcher'
        | 'TextList'
        | 'ScalarList'
        | 'List'
        | 'AssetRef'
        | 'Object'
        | 'Link'
    } & (
      | components['schemas']['boolean-property']
      | components['schemas']['string-property']
      | components['schemas']['integer-property']
      | components['schemas']['double-property']
      | components['schemas']['date-property']
      | components['schemas']['text-list-property']
    )
    /** @description Text property */
    'string-property': {
      /** @description Property name */
      name: string
      /** @description Property value */
      value?: string
      /** @enum {string} */
      type:
        | 'String'
        | 'Integer'
        | 'Long'
        | 'Double'
        | 'Boolean'
        | 'Scalar'
        | 'Size'
        | 'Date'
        | 'IntegerRange'
        | 'DoubleRange'
        | 'ScalarRange'
        | 'DateRange'
        | 'Margins'
        | 'PlacementRule'
        | 'Enum'
        | 'Matcher'
        | 'TextList'
        | 'ScalarList'
        | 'List'
        | 'AssetRef'
        | 'Object'
        | 'Link'
    }
    /** @description Text list property */
    'text-list-property': {
      /** @description Property name */
      name: string
      /** @enum {string} */
      type:
        | 'String'
        | 'Integer'
        | 'Long'
        | 'Double'
        | 'Boolean'
        | 'Scalar'
        | 'Size'
        | 'Date'
        | 'IntegerRange'
        | 'DoubleRange'
        | 'ScalarRange'
        | 'DateRange'
        | 'Margins'
        | 'PlacementRule'
        | 'Enum'
        | 'Matcher'
        | 'TextList'
        | 'ScalarList'
        | 'List'
        | 'AssetRef'
        | 'Object'
        | 'Link'
      /** @description Property value */
      value?: string[]
    }
    /** @description Specific devices */
    AssetRefDevice: {
      frozenAsset?: components['schemas']['device']
    }
    /** @description Process types */
    'AssetRefProcess-type': {
      frozenAsset?: components['schemas']['process-type']
    }
    /** @description Tool stats */
    DctToolStats: {
      /** @description Tool name */
      tool: string
      time?: components['schemas']['time-info']
      /**
       * Format: double
       * @description Total travel time when this tool is in the down position
       */
      'down-length'?: number
      /**
       * Format: double
       * @description Total travel time when this tool is in the raised position
       */
      'up-length'?: number
      /** @description Beam name for multi-beam tables */
      beam?: string
    }
    /** @description Information about the grade */
    GradeInfoEntity: {
      /** @description Name of library item */
      name: string
      /** @description Unique ID of this item (auto-generated, read-only) */
      id?: string
      /** @description Optional external ID of media item */
      'external-id'?: string
      /** @description Asset description */
      description?: string
      /** @description Caliper of grade */
      caliper: string
      /** @description Grade weight */
      weight: string
    }
    /** @description Ink name and type */
    InkEntity: {
      /** @description Ink name */
      name: string
      /** @description Whether ink is a separation color */
      separation: boolean
      /**
       * @description Ink type
       * @enum {string}
       */
      type:
        | 'Bleed'
        | 'Crease'
        | 'Cut'
        | 'Foil'
        | 'Glue'
        | 'Normal'
        | 'Technical'
        | 'Varnish'
    }
    /** @description Statistics on all component items placed in a given layout */
    ItemStatsEntity: {
      /**
       * Format: int32
       * @description Number of component items placed in the layout
       */
      count?: number
      bounds?: components['schemas']['RectEntity']
    }
    /** @description Number of instances that a given item is placed on a layout */
    LayoutPlacedEntity: {
      /**
       * Format: int32
       * @description Index of layout
       */
      index: number
      /**
       * Format: int32
       * @description Number of components placed in layout
       */
      placed: number
    }
    /** @description Library item */
    LibraryItemEntity: {
      /** @description Name of library item */
      name: string
      /** @description Unique ID of this item (auto-generated, read-only) */
      id?: string
      /** @description Optional external ID of media item */
      'external-id'?: string
      /** @description Asset description */
      description?: string
    }
    /** @description Media name and dimensions */
    MediaDimensionsEntity: {
      /** @description Name of library item */
      name: string
      /** @description Unique ID of this item (auto-generated, read-only) */
      id?: string
      /** @description Optional external ID of media item */
      'external-id'?: string
      /** @description Asset description */
      description?: string
      /** @description Media width */
      width: string
      /** @description Media height */
      height: string
    }
    /** @description Job layout */
    PhoenixLayoutEntity: {
      /** @description Layout id */
      id?: string
      /**
       * Format: int32
       * @description Layout index
       */
      index?: number
      /** @description Layout name */
      name?: string
      /**
       * @description Workstyle of layout
       * @enum {string}
       */
      workstyle?:
        | 'FlatWork'
        | 'Sheetwise'
        | 'Perfecting'
        | 'WorkAndTurn'
        | 'WorkAndTumble'
      /** @description Facility job trails processing this layout */
      trails?: components['schemas']['job-trail'][]
      /**
       * Format: int32
       * @description Required run length of layout
       */
      'run-length'?: number
      /**
       * Format: float
       * @description Estimated press time in minutes
       */
      'press-minutes'?: number
      /**
       * Format: int32
       * @description Number of plates needed (print inks)
       */
      plates?: number
      /**
       * Format: double
       * @description Estimated plate cost in layout
       */
      'plate-cost'?: number
      /**
       * Format: double
       * @description Estimated stock cost in layout
       */
      'stock-cost'?: number
      /**
       * Format: double
       * @description Estimated press run cost in layout
       */
      'press-cost'?: number
      /**
       * Format: double
       * @description Estimated die creation cost in layout
       */
      'die-cost'?: number
      /**
       * Format: double
       * @description Estimated total layout cost
       */
      'total-cost'?: number
      /**
       * Format: double
       * @description Total sheet waste percentage
       */
      waste?: number
      /**
       * Format: double
       * @description Sheet usage percentage per sheet
       */
      'sheet-usage'?: number
      /**
       * Format: double
       * @description Product underrun percentage in layout
       */
      underrun?: number
      /**
       * Format: double
       * @description Product overrun percentage in layout
       */
      overrun?: number
      /**
       * Format: int32
       * @description Total number of pieces placed in layout
       */
      placed?: number
      /**
       * Format: int32
       * @description Total number of unique products in layout
       */
      'product-count'?: number
      /** @description Random unique layout identifier */
      random?: string
      /** @description All templates being used in layout */
      templates?: components['schemas']['PlacedTemplateEntity'][]
      'tool-stats'?: components['schemas']['ToolStatsEntity']
      /** @description Product priority-based stats */
      'priority-stats'?: components['schemas']['PriorityStatsEntity'][]
      /** @description Surfaces in layout */
      surfaces?: components['schemas']['SurfaceEntity'][]
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
      front?: components['schemas']['SurfaceEntity']
      back?: components['schemas']['SurfaceEntity']
    }
    /** @description (Deprecated) Product in a job */
    PhoenixProductEntity: {
      /**
       * Format: int32
       * @description Unique item index
       */
      index?: number
      /** @description Unique name of the product */
      name: string
      /** @description Product color as ARGB hex string */
      color?: string
      /**
       * Format: int32
       * @description Ordered amount
       */
      ordered?: number
      /** @description Product description */
      description?: string
      /** @description Product notes */
      notes?: string
      /** @description (Deprecated) Product die name */
      'die-name'?: string
      /** @description (Deprecated) Product die source */
      'die-source'?: string
      /** @description (Deprecated) Product die source full path */
      'die-path'?: string
      /** @description (Deprecated) Product stock */
      stock?: string
      /** @description (Deprecated) Product grade */
      grade?: string
      /**
       * @description (Deprecated) Grain direction of stock
       * @enum {string}
       */
      grain?: 'Horizontal' | 'Vertical' | 'Consistent' | 'None'
      /** @description (Deprecated) Width of product die */
      width?: string
      /** @description (Deprecated) Height of product die */
      height?: string
      /**
       * @description (Deprecated) Spacing type of product
       * @enum {string}
       */
      'spacing-type'?: 'Margins' | 'Uniform' | 'Bleed' | 'Tool'
      /** @description Product group */
      group?: string
      /**
       * Format: int32
       * @description Product priority
       */
      priority?: number
      /**
       * @description Rotation type of product
       * @enum {string}
       */
      rotation?: 'Any' | 'Orthogonal' | 'None' | 'Custom'
      /** @description List of templates this product can be used with */
      templates?: string[]
      /**
       * Format: int32
       * @description Total number of products placed across layouts in the job
       */
      placed?: number
      /**
       * Format: int32
       * @description Total number of products to be printed
       */
      total?: number
      /**
       * Format: int32
       * @description Total number of overruns above ordered quantity
       */
      overrun?: number
      /** @description Product custom properties */
      properties?: components['schemas']['PropertyEntity'][]
      /** @description Number of products placed in each layout */
      layouts?: components['schemas']['LayoutPlacedEntity'][]
      thumbnail?: components['schemas']['ThumbnailEntity']
    }
    /** @description Project and associated properties, layouts and products */
    PhoenixProject: {
      /** @description Job ID */
      id: string
      /** @description Job name */
      name?: string
      /** @description Job contact person */
      contact?: string
      /** @description Job phone number */
      phone?: string
      /** @description Job client name */
      client?: string
      /** @description Job notes */
      notes?: string
      /** @description Job units */
      units?: string
      /** @description Job template path if job created from template */
      'template-path'?: string
      /**
       * Format: int32
       * @description Total required run length of all layouts in project
       */
      'run-length'?: number
      /**
       * Format: float
       * @description Total estimated press time across project
       */
      'press-minutes'?: number
      /**
       * Format: double
       * @description Total estimated plate costs across project
       */
      'plate-cost'?: number
      /**
       * Format: double
       * @description Total estimated stock costs across project
       */
      'stock-cost'?: number
      /**
       * Format: double
       * @description Total estimated press run costs across project
       */
      'press-cost'?: number
      /**
       * Format: double
       * @description Total estimated die creation costs across project
       */
      'die-cost'?: number
      /**
       * Format: double
       * @description Total project cost
       */
      'total-cost'?: number
      /**
       * Format: double
       * @description Average sheet waste percentage across the project
       */
      waste?: number
      /**
       * Format: double
       * @description Average sheet usage percentage across project
       */
      'sheet-usage'?: number
      /**
       * Format: double
       * @description Average product underrun percentage across project
       */
      underrun?: number
      /**
       * Format: double
       * @description Average product overrun percentage across project
       */
      overrun?: number
      /**
       * Format: int32
       * @description Number of layouts in the job
       */
      'layout-count'?: number
      facility?: components['schemas']['facility']
      /** @description Layouts in the project */
      layouts?: components['schemas']['PhoenixLayoutEntity'][]
      /**
       * @deprecated
       * @description Products in the project in v1 format
       */
      products?: components['schemas']['PhoenixProductEntity'][]
      /** @description Products in the project in v2 format */
      products2?: components['schemas']['product'][]
      /** @description Rolls in the project */
      rolls?: components['schemas']['roll'][]
      /** @description List of all project-level messages */
      messages?: components['schemas']['message'][]
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description Information about a template placed in a layout */
    PlacedTemplateEntity: {
      /** @description Template name */
      name?: string
      /** @enum {string} */
      source?: 'Generated' | 'Library' | 'File' | 'Project'
      /**
       * Format: int32
       * @description Number of items or 'ups' in this template
       */
      items: number
      /**
       * Format: int32
       * @description Number of pieces placed into this template
       */
      placed: number
    }
    /** @description Breakdown of layout stats for each product priority */
    PriorityStatsEntity: {
      /**
       * Format: int32
       * @description Priority level
       */
      priority: number
      /**
       * Format: float
       * @description Sheet usage on layout for products at this priority level
       */
      'sheet-usage': number
    }
    /** @description Name/value property */
    PropertyEntity: {
      /** @description Property name */
      name: string
      /** @description Property value */
      value: string
      /**
       * @description Property type, when omitted type 'Text' is assumed
       * @enum {string}
       */
      type?: 'Text' | 'Integer' | 'Number' | 'Boolean' | 'Date' | 'TextList'
    }
    /** @description Rectangle with position and dimensions */
    RectEntity: {
      /** @description Horizontal position */
      x?: string
      /** @description Vertical position */
      y?: string
      /** @description Rectangle width */
      width?: string
      /** @description Rectangle height */
      height?: string
    }
    /** @description Circumference */
    ScalarValue: {
      percentage?: boolean
      /** @enum {string} */
      unit?:
        | 'Feet'
        | 'Inches'
        | 'Meters'
        | 'Centimeters'
        | 'Millimeters'
        | 'Micrometers'
        | 'Thou'
        | 'Points'
      negated?: boolean
      isNegated?: boolean
      /** @enum {string} */
      precedence?: 'Level1' | 'Level2'
      operator?: boolean
      composite?: boolean
      /** Format: int32 */
      length?: number
      stringRepresentation?: string
      /** Format: int32 */
      recursionDepth?: number
    }
    /** @description Job layout surface */
    SurfaceEntity: {
      /**
       * @description Side of this surface: Front or Back
       * @enum {string}
       */
      side: 'Front' | 'Back'
      press?: components['schemas']['LibraryItemEntity']
      stock?: components['schemas']['LibraryItemEntity']
      grade?: components['schemas']['GradeInfoEntity']
      sheet?: components['schemas']['MediaDimensionsEntity']
      plate?: components['schemas']['MediaDimensionsEntity']
      items?: components['schemas']['ItemStatsEntity']
      /** @description List of all inks on this surface */
      inks?: components['schemas']['InkEntity'][]
      thumbnail?: components['schemas']['ThumbnailEntity']
      /** @description List of all messages related to this surface */
      messages?: components['schemas']['message'][]
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description Binary thumbnail image data */
    ThumbnailEntity: {
      /** @description Base64 encoded binary image data */
      data?: string
      /** @description Image media type format */
      'media-type'?: string
      /**
       * Format: int32
       * @description Width of thumbnail image in pixels
       */
      width?: number
      /**
       * Format: int32
       * @description Height of thumbnail image in pixels
       */
      height?: number
    }
    /** @description Breakdown of tool statistics per tool category */
    ToolCategoryStatsEntity: {
      /** @description Tool category name */
      name?: string
      /** @description Linear line length total of all tool types in this category */
      length?: string
    }
    /** @description Breakdown of tool statistics on a given layout */
    ToolStatsEntity: {
      /** @description Product category-based stats */
      categories?: components['schemas']['ToolCategoryStatsEntity'][]
    }
    /** @description Acceleration */
    acceleration: {
      /**
       * Format: double
       * @description Value
       */
      value: number
      /** @enum {string} */
      units:
        | 'MetersPerSecond2'
        | 'CentimetersPerSecond2'
        | 'MillimetersPerSecond2'
        | 'FeetPerSecond2'
        | 'InchesPerSecond2'
    }
    /** @description Asset info */
    'asset-info': {
      /** @description Unique ID */
      id?: string
      /** @description Asset name */
      name?: string
    }
    /** @description Blank component item placed on the roll */
    blank: {
      /**
       * Format: double
       * @description X coordinate
       */
      x: number
      /**
       * Format: double
       * @description Y coordinate
       */
      y: number
      /**
       * Format: double
       * @description Width
       */
      width: number
      /**
       * Format: double
       * @description Height
       */
      height: number
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name?: string
      /**
       * Format: int32
       * @description Number of times this component repeats sequentially within its parent region
       */
      repeats?: number
      /** @enum {string} */
      type:
        | 'Roll'
        | 'Segment'
        | 'Lane'
        | 'Ribbon'
        | 'Component'
        | 'Blank'
        | 'Frame'
        | 'Strip'
        | 'LeadIn'
        | 'LeadOut'
    }
    /** @description Bleedline */
    bleedline: {
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name: string
      /**
       * Format: date-time
       * @description Created On
       */
      'created-on'?: string
      /**
       * Format: date-time
       * @description Modified On
       */
      'modified-on'?: string
      /** @description Version */
      version?: string
      /** @description Description */
      description?: string
      /** @description Notes */
      notes?: string
      source?: components['schemas']['dieline-source']
      shape: components['schemas']['path']
      /**
       * Format: double
       * @description Dieline thickness
       */
      thickness?: number
      rect: components['schemas']['rect']
      /** @enum {string} */
      type: 'Margins' | 'Contour' | 'CAD' | 'None'
      /** @description Bleedline source */
      'bleed-source'?: string
      /** @description Bleedline margin */
      margin: string
      margins: components['schemas']['margins']
      /** @description Whether or not bleedline shape has been custom modified */
      'shape-modified'?: boolean
      /** @description Whether or not margins have been custom adjusted */
      'margins-adjusted'?: boolean
      /** @description Path */
      path?: string
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description Bound part for creating books */
    'bound-part': {
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name: string
      /** @enum {string} */
      grain: 'Horizontal' | 'Vertical' | 'Consistent' | 'None'
      /** @description Part pages */
      pages: components['schemas']['page'][]
      /** @description Part process settings */
      'process-settings': components['schemas']['process-setting'][]
      rotation: components['schemas']['rotation']
      'page-size': components['schemas']['size']
      /** @description Part sections */
      sections: components['schemas']['bound-section'][]
      /** @enum {string} */
      'binding-method': 'PerfectBound' | 'SaddleStitch' | 'None'
      /**
       * Format: int32
       * @description Pages per section in this part
       */
      'pages-per-section'?: number
      /**
       * @description Binding edge of this part
       * @enum {string}
       */
      'binding-edge': 'Top' | 'Bottom' | 'Right' | 'Left'
      /**
       * @description Jog edge of this part
       * @enum {string}
       */
      'jog-edge': 'Top' | 'Bottom' | 'Right' | 'Left'
      /**
       * @description Reading order of this part
       * @enum {string}
       */
      'reading-order': 'Normal' | 'Calendar'
      /** @description Whether this part has a self cover or not */
      'self-cover': boolean
      trim: components['schemas']['trim']
      creep: components['schemas']['creep']
      /** @description Allowed folds in this part */
      'allowed-folds'?: components['schemas']['folding-pattern'][]
      /** @enum {string} */
      type: 'Flat' | 'Bound' | 'Folded' | 'Tiled'
      material?: components['schemas']['material']
      /** @description Part processes */
      processes?: components['schemas']['process'][]
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description Bound section */
    'bound-section': {
      /** @description Unique ID */
      id?: string
      /** @enum {string} */
      'binding-method': 'PerfectBound' | 'SaddleStitch' | 'None'
      /** @description Signatures in this section */
      signatures?: components['schemas']['bound-signature'][]
    }
    /** @description Bound signature component */
    'bound-signature': {
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name: string
      'die-design': components['schemas']['die-design']
      spacing: components['schemas']['spacing']
      offcut?: components['schemas']['offcut']
      /** @enum {string} */
      type: 'Flat' | 'Bound' | 'Folded' | 'Tiled'
      'folding-pattern': components['schemas']['asset-info']
      /** @description Number of instances that a given item is placed on a layout */
      layouts?: {
        /**
         * Format: int32
         * @description Index of layout
         */
        index: number
        /**
         * Format: int32
         * @description Number of components placed in layout
         */
        placed: number
      }
      /**
       * Format: int32
       * @description Total placed count of this component across all layouts in the project
       */
      placed?: number
      /**
       * Format: int32
       * @description Total number of overruns above ordered quantity
       */
      overrun?: number
      /** @description Whether order quantity of this component has been fulfilled */
      fulfilled?: boolean
      /**
       * Format: int32
       * @description Total number of copies of this component being produced in the project
       */
      total?: number
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description Connector to link things together */
    connector: {
      thing: components['schemas']['reference']
    }
    /** @description Corrugator */
    corrugator: {
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name: string
      /**
       * Format: date-time
       * @description Created On
       */
      'created-on'?: string
      /**
       * Format: date-time
       * @description Modified On
       */
      'modified-on'?: string
      /** @description Version */
      version?: string
      /** @description Description */
      description?: string
      /** @description Notes */
      notes?: string
      /** @description External ID */
      'external-id'?: string
      /** @description Allow pass-through */
      'allow-pass-through'?: boolean
      /** @description Direct connections to other things */
      connections?: components['schemas']['connector'][]
      costing: components['schemas']['corrugator-costing']
      capabilities: components['schemas']['corrugator-capabilities']
      script?: components['schemas']['reference']
      /** @description Manufacturer */
      manufacturer: string
      'media-rules': components['schemas']['corrugator-media-rules']
      placement: components['schemas']['placement']
      operation: components['schemas']['corrugator-operation']
      /**
       * Format: int32
       * @description Number of chop knives
       */
      'chop-knives': number
      /**
       * Format: int32
       * @description Number of slit knives
       */
      'slit-knives': number
      /** @enum {string} */
      type:
        | 'SheetFedDigitalPress'
        | 'WebFedDigitalPress'
        | 'SheetFedOffsetPress'
        | 'WebFedOffsetPress'
        | 'WebFedFlexoPress'
        | 'FlatbedWideFormatPress'
        | 'RollFedWideFormatPress'
        | 'GuillotineCutter'
        | 'FlatbedDieCutter'
        | 'RotaryDieCutter'
        | 'DigitalCuttingTable'
        | 'Corrugator'
        | 'DieMaking'
      /** @enum {string} */
      'feed-type': 'Roll' | 'Sheet'
      'process-type': components['schemas']['process-type']
      /** @description Path */
      path?: string
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description Corrugator capabilities */
    'corrugator-capabilities': {
      'width-range': components['schemas']['scalar-range']
      'height-range': components['schemas']['scalar-range']
      /** @description Limit */
      limit: boolean
      /** @enum {string} */
      'limit-logic': 'Inclusively' | 'Exclusively'
      'caliper-range': components['schemas']['scalar-range']
      'weight-range': components['schemas']['stock-weight-range']
      /** @enum {string} */
      'sheet-handling': 'None' | 'LongEdgeHorizontal' | 'LongEdgeVertical'
      /** @description Library reference */
      'stock-types'?: {
        /** @description Unique ID of asset */
        id?: string
        /** @description Path to asset */
        path?: string
      }
      /** @description Library reference */
      'specific-stocks'?: {
        /** @description Unique ID of asset */
        id?: string
        /** @description Path to asset */
        path?: string
      }
      'length-range': components['schemas']['scalar-range']
      fluting: components['schemas']['stock-capabilities']
      'bottom-liner': components['schemas']['stock-capabilities']
      /** @enum {string} */
      type:
        | 'PressCapabilities'
        | 'GcCapabilities'
        | 'FdcCapabilities'
        | 'RdcCapabilities'
        | 'DctCapabilities'
        | 'CorrugatorCapabilities'
        | 'DmCapabilities'
    }
    /** @description Corrugator costing */
    'corrugator-costing': {
      /** @description Currency */
      currency: {
        currencyCode?: string
        /** Format: int32 */
        defaultFractionDigits?: number
        /** Format: int32 */
        numericCode?: number
        displayName?: string
        symbol?: string
        numericCodeAsString?: string
      }
      rate: components['schemas']['rate']
      setup: components['schemas']['setup']
      'knife-changeover-time': components['schemas']['time-value']
      /** @enum {string} */
      type:
        | 'SfdpCosting'
        | 'WfdpCosting'
        | 'SfopCosting'
        | 'WfopCosting'
        | 'FwfpCosting'
        | 'WffpCosting'
        | 'RfwfpCosting'
        | 'GcCosting'
        | 'FdcCosting'
        | 'RdcCosting'
        | 'DctCosting'
        | 'CorrugatorCosting'
        | 'DmCosting'
    }
    /** @description Corrugator media rule */
    'corrugator-media-rule': {
      /** @description List of marks to apply with this media rule */
      marks?: components['schemas']['device-mark'][]
      /** @description Speed reduction specified as a number where 1.0 represents no change */
      'speed-reduction'?: string
      content?: components['schemas']['margins']
      image?: components['schemas']['margins']
      /** @description Regions */
      regions?: components['schemas']['region'][]
      /** @enum {string} */
      type:
        | 'OperationMode'
        | 'MediaRule'
        | 'PressMediaRule'
        | 'DctRuleValue'
        | 'CorrugatorMode'
        | 'CorrugatorMediaRule'
        | 'SteelRule'
    }
    /** @description Corrugator media rules */
    'corrugator-media-rules': {
      default: components['schemas']['corrugator-media-rule']
      /** @description Map containing key/values */
      map?: {
        [key: string]: components['schemas']['corrugator-media-rule']
      }
      /** @enum {string} */
      type:
        | 'OperationModes'
        | 'DctOperation'
        | 'CorrugatorOperation'
        | 'PressMediaRules'
        | 'GcMediaRules'
        | 'FdcMediaRules'
        | 'RdcMediaRules'
        | 'DctMediaRules'
        | 'CorrugatorMediaRules'
        | 'SteelRules'
    }
    /** @description Corrugator operation */
    'corrugator-operation': {
      default: components['schemas']['corrugator-operation-mode']
      /** @description Map containing key/values */
      map?: {
        [key: string]: components['schemas']['corrugator-operation-mode']
      }
      /** @enum {string} */
      type:
        | 'OperationModes'
        | 'DctOperation'
        | 'CorrugatorOperation'
        | 'PressMediaRules'
        | 'GcMediaRules'
        | 'FdcMediaRules'
        | 'RdcMediaRules'
        | 'DctMediaRules'
        | 'CorrugatorMediaRules'
        | 'SteelRules'
    }
    /** @description Corrugator operation mode */
    'corrugator-operation-mode': {
      speed: components['schemas']['speed']
      /** @enum {string} */
      type:
        | 'OperationMode'
        | 'MediaRule'
        | 'PressMediaRule'
        | 'DctRuleValue'
        | 'CorrugatorMode'
        | 'CorrugatorMediaRule'
        | 'SteelRule'
    }
    /** @description Corrugator processing results */
    'corrugator-result': {
      /**
       * @description Status
       * @enum {string}
       */
      status: 'Pending' | 'Success' | 'Error'
      /** @description Processes involved */
      processes?: string[]
      time?: components['schemas']['time-info']
      cost?: components['schemas']['cost-info']
      /** @description Messages reported during processing */
      messages?: components['schemas']['message'][]
      /** @description Messages reported by a third-party external estimation engine during processing */
      'external-messages'?: components['schemas']['message'][]
      /** @description Process type */
      'process-type'?: string
      'setup-time'?: components['schemas']['time-info']
      /**
       * Format: int32
       * @description Total number of layouts being processed by this device including setup, waste, and produced layouts
       */
      'total-layouts'?: number
      /**
       * Format: int32
       * @description Number of knife changeovers corrugator needs to perform
       */
      'knife-changeovers': number
      'knife-changeover-time'?: components['schemas']['time-info']
      /** @enum {string} */
      type:
        | 'SheetFedDigitalPress'
        | 'WebFedDigitalPress'
        | 'SheetFedOffsetPress'
        | 'WebFedOffsetPress'
        | 'WebFedFlexoPress'
        | 'FlatbedWideFormatPress'
        | 'RollFedWideFormatPress'
        | 'GuillotineCutter'
        | 'FlatbedDieCutter'
        | 'RotaryDieCutter'
        | 'DigitalCuttingTable'
        | 'Corrugator'
        | 'DieMaking'
    }
    /** @description Cost info */
    'cost-info': {
      /**
       * Format: double
       * @description Cost value
       */
      value?: number
      /** @description Currency */
      currency?: string
      /** @description Cost display text including currency */
      display?: string
    }
    /** @description Creep settings */
    creep: {
      /** @enum {string} */
      type: 'None' | 'Inward' | 'Outward' | 'Both' | 'Custom'
      /** @enum {string} */
      method: 'Offset' | 'Scale'
      /**
       * Format: double
       * @description Creep transition
       */
      transition: number
      /** @enum {string} */
      calculation: 'FromStock' | 'PerPage' | 'Total'
      /** @description Creep amount */
      amount?: string
    }
    /** @description Custom tiling where each tile is explicitly defined */
    'custom-tiling': {
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name: string
      /**
       * Format: date-time
       * @description Created On
       */
      'created-on'?: string
      /**
       * Format: date-time
       * @description Modified On
       */
      'modified-on'?: string
      /** @description Version */
      version?: string
      /** @description Description */
      description?: string
      /** @description Notes */
      notes?: string
      /** @description Custom tiles */
      tile?: components['schemas']['tile'][]
      /** @enum {string} */
      type: 'Standard' | 'Custom'
      /** @description Path */
      path?: string
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description Flexo press cylinder */
    cylinder: {
      circumference: components['schemas']['ScalarValue']
      /** @enum {string} */
      type: 'Gear' | 'Sleeve'
    } & (
      | components['schemas']['gear-cylinder']
      | components['schemas']['sleeve-cylinder']
    )
    /** @description Digital cutting table capabilities */
    'dct-capabilities': {
      'width-range': components['schemas']['scalar-range']
      'height-range': components['schemas']['scalar-range']
      /** @description Limit */
      limit: boolean
      /** @enum {string} */
      'limit-logic': 'Inclusively' | 'Exclusively'
      'caliper-range': components['schemas']['scalar-range']
      'weight-range': components['schemas']['stock-weight-range']
      /** @enum {string} */
      'sheet-handling': 'None' | 'LongEdgeHorizontal' | 'LongEdgeVertical'
      /** @description Library reference */
      'stock-types'?: {
        /** @description Unique ID of asset */
        id?: string
        /** @description Path to asset */
        path?: string
      }
      /** @description Library reference */
      'specific-stocks'?: {
        /** @description Unique ID of asset */
        id?: string
        /** @description Path to asset */
        path?: string
      }
      /** @enum {string} */
      type:
        | 'PressCapabilities'
        | 'GcCapabilities'
        | 'FdcCapabilities'
        | 'RdcCapabilities'
        | 'DctCapabilities'
        | 'CorrugatorCapabilities'
        | 'DmCapabilities'
    }
    /** @description Digital cutting table costing */
    'dct-costing': {
      /** @description Currency */
      currency: {
        currencyCode?: string
        /** Format: int32 */
        defaultFractionDigits?: number
        /** Format: int32 */
        numericCode?: number
        displayName?: string
        symbol?: string
        numericCodeAsString?: string
      }
      rate: components['schemas']['rate']
      setup: components['schemas']['setup']
      /** @enum {string} */
      type:
        | 'SfdpCosting'
        | 'WfdpCosting'
        | 'SfopCosting'
        | 'WfopCosting'
        | 'FwfpCosting'
        | 'WffpCosting'
        | 'RfwfpCosting'
        | 'GcCosting'
        | 'FdcCosting'
        | 'RdcCosting'
        | 'DctCosting'
        | 'CorrugatorCosting'
        | 'DmCosting'
    }
    /** @description Digital cutting table media rules */
    'dct-media-rules': {
      default: components['schemas']['media-rule']
      /** @description Map containing key/values */
      map?: {
        [key: string]: components['schemas']['media-rule']
      }
      /** @enum {string} */
      type:
        | 'OperationModes'
        | 'DctOperation'
        | 'CorrugatorOperation'
        | 'PressMediaRules'
        | 'GcMediaRules'
        | 'FdcMediaRules'
        | 'RdcMediaRules'
        | 'DctMediaRules'
        | 'CorrugatorMediaRules'
        | 'SteelRules'
    }
    /** @description Digital cutting table operation */
    'dct-operation': {
      default: components['schemas']['dct-rule-value']
      /** @description Map containing key/values */
      map?: {
        [key: string]: components['schemas']['dct-rule-value']
      }
      /** @enum {string} */
      type:
        | 'OperationModes'
        | 'DctOperation'
        | 'CorrugatorOperation'
        | 'PressMediaRules'
        | 'GcMediaRules'
        | 'FdcMediaRules'
        | 'RdcMediaRules'
        | 'DctMediaRules'
        | 'CorrugatorMediaRules'
        | 'SteelRules'
    }
    /** @description Digital cutting table processing results */
    'dct-result': {
      /**
       * @description Status
       * @enum {string}
       */
      status: 'Pending' | 'Success' | 'Error'
      /** @description Processes involved */
      processes?: string[]
      time?: components['schemas']['time-info']
      cost?: components['schemas']['cost-info']
      /** @description Messages reported during processing */
      messages?: components['schemas']['message'][]
      /** @description Messages reported by a third-party external estimation engine during processing */
      'external-messages'?: components['schemas']['message'][]
      /** @description Process type */
      'process-type'?: string
      'setup-time'?: components['schemas']['time-info']
      /**
       * Format: int32
       * @description Total number of layouts being processed by this device including setup, waste, and produced layouts
       */
      'total-layouts'?: number
      /**
       * Format: int32
       * @description Run length
       */
      'run-length': number
      /** @description Tool stats */
      'tool-stats'?: components['schemas']['DctToolStats'][]
      /** @enum {string} */
      type:
        | 'SheetFedDigitalPress'
        | 'WebFedDigitalPress'
        | 'SheetFedOffsetPress'
        | 'WebFedOffsetPress'
        | 'WebFedFlexoPress'
        | 'FlatbedWideFormatPress'
        | 'RollFedWideFormatPress'
        | 'GuillotineCutter'
        | 'FlatbedDieCutter'
        | 'RotaryDieCutter'
        | 'DigitalCuttingTable'
        | 'Corrugator'
        | 'DieMaking'
    }
    /** @description Digital cutting table rule value */
    'dct-rule-value': {
      'motion-lowered': components['schemas']['motion-specs']
      'motion-lifted': components['schemas']['motion-specs']
      'motion-lowering': components['schemas']['motion-specs']
      'motion-lifting': components['schemas']['motion-specs']
      /** @description Clearing Distance */
      'clearing-distance': string
      /**
       * Format: double
       * @description Auto Lift Angle
       */
      'auto-lift-angle': number
      /** @description Auto Lift Distance */
      'auto-lift-distance': string
      /** @enum {string} */
      type:
        | 'OperationMode'
        | 'MediaRule'
        | 'PressMediaRule'
        | 'DctRuleValue'
        | 'CorrugatorMode'
        | 'CorrugatorMediaRule'
        | 'SteelRule'
    }
    /** @description Device */
    device: {
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name: string
      /**
       * Format: date-time
       * @description Created On
       */
      'created-on'?: string
      /**
       * Format: date-time
       * @description Modified On
       */
      'modified-on'?: string
      /** @description Version */
      version?: string
      /** @description Description */
      description?: string
      /** @description Notes */
      notes?: string
      /** @description External ID */
      'external-id'?: string
      /** @description Allow pass-through */
      'allow-pass-through'?: boolean
      /** @description Direct connections to other things */
      connections?: components['schemas']['connector'][]
      costing: components['schemas']['device-costing']
      capabilities: components['schemas']['device-capabilities']
      script?: components['schemas']['reference']
      /** @description Manufacturer */
      manufacturer: string
      'media-rules': components['schemas']['media-rules']
      placement: components['schemas']['placement']
      /** @enum {string} */
      'feed-type': 'Roll' | 'Sheet'
      'process-type': components['schemas']['process-type']
      /** @enum {string} */
      type:
        | 'SheetFedDigitalPress'
        | 'WebFedDigitalPress'
        | 'SheetFedOffsetPress'
        | 'WebFedOffsetPress'
        | 'WebFedFlexoPress'
        | 'FlatbedWideFormatPress'
        | 'RollFedWideFormatPress'
        | 'GuillotineCutter'
        | 'FlatbedDieCutter'
        | 'RotaryDieCutter'
        | 'DigitalCuttingTable'
        | 'Corrugator'
        | 'DieMaking'
      /** @description Path */
      path?: string
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description Device capabilities */
    'device-capabilities': {
      'width-range': components['schemas']['scalar-range']
      'height-range': components['schemas']['scalar-range']
      /** @description Limit */
      limit: boolean
      /** @enum {string} */
      'limit-logic': 'Inclusively' | 'Exclusively'
      'caliper-range': components['schemas']['scalar-range']
      'weight-range': components['schemas']['stock-weight-range']
      /** @enum {string} */
      'sheet-handling': 'None' | 'LongEdgeHorizontal' | 'LongEdgeVertical'
      /** @description Library reference */
      'stock-types'?: {
        /** @description Unique ID of asset */
        id?: string
        /** @description Path to asset */
        path?: string
      }
      /** @description Library reference */
      'specific-stocks'?: {
        /** @description Unique ID of asset */
        id?: string
        /** @description Path to asset */
        path?: string
      }
      /** @enum {string} */
      type:
        | 'PressCapabilities'
        | 'GcCapabilities'
        | 'FdcCapabilities'
        | 'RdcCapabilities'
        | 'DctCapabilities'
        | 'CorrugatorCapabilities'
        | 'DmCapabilities'
    }
    /** @description Device costing */
    'device-costing': {
      /** @description Currency */
      currency: {
        currencyCode?: string
        /** Format: int32 */
        defaultFractionDigits?: number
        /** Format: int32 */
        numericCode?: number
        displayName?: string
        symbol?: string
        numericCodeAsString?: string
      }
      rate: components['schemas']['rate']
      setup: components['schemas']['setup']
      /** @enum {string} */
      type:
        | 'SfdpCosting'
        | 'WfdpCosting'
        | 'SfopCosting'
        | 'WfopCosting'
        | 'FwfpCosting'
        | 'WffpCosting'
        | 'RfwfpCosting'
        | 'GcCosting'
        | 'FdcCosting'
        | 'RdcCosting'
        | 'DctCosting'
        | 'CorrugatorCosting'
        | 'DmCosting'
    }
    /** @description Device mark */
    'device-mark': {
      mark: components['schemas']['reference']
      /** @enum {string} */
      side: 'Front' | 'Back' | 'Both'
    }
    /** @description Die design */
    'die-design': {
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name: string
      /**
       * Format: date-time
       * @description Created On
       */
      'created-on'?: string
      /**
       * Format: date-time
       * @description Modified On
       */
      'modified-on'?: string
      /** @description Version */
      version?: string
      /** @description Description */
      description?: string
      /** @description Notes */
      notes?: string
      /** @enum {string} */
      type?: 'Rectangle' | 'Irregular' | 'Open'
      /** @description Die design source */
      source?: string
      /** @description Die design file-path */
      'file-path'?: string
      /** @description Die design shape source */
      'shape-source'?: string
      shape?: components['schemas']['path']
      bleedline?: components['schemas']['bleedline']
      offcut?: components['schemas']['dieline']
      /** @description Die design dielines */
      dielines?: components['schemas']['dieline'][]
      /**
       * @description Grain Direction
       * @enum {string}
       */
      grain?: 'GrainHorizontal' | 'GrainVertical' | 'NotSpecified'
      /** @description Die design shape id */
      'shape-id'?: string
      rect?: components['schemas']['rect']
      /** @description Path */
      path?: string
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description Die Making */
    'die-making': {
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name: string
      /**
       * Format: date-time
       * @description Created On
       */
      'created-on'?: string
      /**
       * Format: date-time
       * @description Modified On
       */
      'modified-on'?: string
      /** @description Version */
      version?: string
      /** @description Description */
      description?: string
      /** @description Notes */
      notes?: string
      /** @description External ID */
      'external-id'?: string
      /** @description Allow pass-through */
      'allow-pass-through'?: boolean
      /** @description Direct connections to other things */
      connections?: components['schemas']['connector'][]
      costing: components['schemas']['dm-costing']
      capabilities: components['schemas']['dm-capabilities']
      script?: components['schemas']['reference']
      /** @enum {string} */
      'die-type': 'SteelRuleDie' | 'SolidDie' | 'FlexibleDie'
      /** @enum {string} */
      type:
        | 'SheetFedDigitalPress'
        | 'WebFedDigitalPress'
        | 'SheetFedOffsetPress'
        | 'WebFedOffsetPress'
        | 'WebFedFlexoPress'
        | 'FlatbedWideFormatPress'
        | 'RollFedWideFormatPress'
        | 'GuillotineCutter'
        | 'FlatbedDieCutter'
        | 'RotaryDieCutter'
        | 'DigitalCuttingTable'
        | 'Corrugator'
        | 'DieMaking'
      /** @description Path */
      path?: string
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description Dieline */
    dieline: {
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name: string
      /**
       * Format: date-time
       * @description Created On
       */
      'created-on'?: string
      /**
       * Format: date-time
       * @description Modified On
       */
      'modified-on'?: string
      /** @description Version */
      version?: string
      /** @description Description */
      description?: string
      /** @description Notes */
      notes?: string
      source?: components['schemas']['dieline-source']
      shape: components['schemas']['path']
      /**
       * Format: double
       * @description Dieline thickness
       */
      thickness?: number
      /** @description Path */
      path?: string
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description Dieline source */
    'dieline-source': {
      /** @enum {string} */
      type:
        | 'Unknown'
        | 'Separation'
        | 'PDFLayer'
        | 'CAD'
        | 'MediaBox'
        | 'BleedBox'
        | 'CropBox'
        | 'TrimBox'
        | 'ArtBox'
        | 'PathBounds'
        | 'ImageBounds'
        | 'ImageTracing'
        | 'CustomSize'
        | 'Offcut'
        | 'Application'
        | 'Tile'
        | 'Mark'
        | 'Strip'
        | 'Nick'
      /** @description Dieline source name */
      name?: string
    }
    /** @description Digital cutting table */
    'digital-cutting-table': {
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name: string
      /**
       * Format: date-time
       * @description Created On
       */
      'created-on'?: string
      /**
       * Format: date-time
       * @description Modified On
       */
      'modified-on'?: string
      /** @description Version */
      version?: string
      /** @description Description */
      description?: string
      /** @description Notes */
      notes?: string
      /** @description External ID */
      'external-id'?: string
      /** @description Allow pass-through */
      'allow-pass-through'?: boolean
      /** @description Direct connections to other things */
      connections?: components['schemas']['connector'][]
      costing: components['schemas']['dct-costing']
      capabilities: components['schemas']['dct-capabilities']
      script?: components['schemas']['reference']
      /** @description Manufacturer */
      manufacturer: string
      'media-rules': components['schemas']['dct-media-rules']
      placement: components['schemas']['placement']
      operation: components['schemas']['dct-operation']
      /** @enum {string} */
      'estimating-engine': 'TiliaLabs' | 'ZundCutCenter'
      'zcc-connection-settings'?: components['schemas']['zcc-connection-settings']
      /** @enum {string} */
      type:
        | 'SheetFedDigitalPress'
        | 'WebFedDigitalPress'
        | 'SheetFedOffsetPress'
        | 'WebFedOffsetPress'
        | 'WebFedFlexoPress'
        | 'FlatbedWideFormatPress'
        | 'RollFedWideFormatPress'
        | 'GuillotineCutter'
        | 'FlatbedDieCutter'
        | 'RotaryDieCutter'
        | 'DigitalCuttingTable'
        | 'Corrugator'
        | 'DieMaking'
      /** @enum {string} */
      'feed-type': 'Roll' | 'Sheet'
      'process-type': components['schemas']['process-type']
      /** @description Path */
      path?: string
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description Die Making Capabilities */
    'dm-capabilities': {
      'width-range': components['schemas']['scalar-range']
      'height-range': components['schemas']['scalar-range']
      /** @description Limit */
      limit: boolean
      /** @enum {string} */
      'limit-logic': 'Inclusively' | 'Exclusively'
      /** @description Process types */
      'process-types'?: components['schemas']['AssetRefProcess-type'][]
      /** @description Specific devices */
      'specific-devices'?: components['schemas']['AssetRefDevice'][]
      /** @enum {string} */
      type:
        | 'PressCapabilities'
        | 'GcCapabilities'
        | 'FdcCapabilities'
        | 'RdcCapabilities'
        | 'DctCapabilities'
        | 'CorrugatorCapabilities'
        | 'DmCapabilities'
    }
    /** @description Die Making Costing */
    'dm-costing': {
      /**
       * Format: double
       * @description Cost
       */
      cost: number
      /**
       * Format: double
       * @description Cost per area
       */
      'cost-per-area': number
      /** @enum {string} */
      'cost-per-area-units':
        | 'Sheets'
        | 'Feet'
        | 'Inches'
        | 'Meters'
        | 'Centimeters'
        | 'Millimeters'
        | 'MSI'
        | 'MSF'
        | 'SquareFeet'
        | 'SquareInches'
        | 'SquareMeters'
        | 'SquareCentimeters'
        | 'SquareMillimeters'
      /**
       * Format: double
       * @description Cost per 1up
       */
      'cost-per-1up': number
      'steel-rules': components['schemas']['steel-rules']
      /** @enum {string} */
      type:
        | 'SfdpCosting'
        | 'WfdpCosting'
        | 'SfopCosting'
        | 'WfopCosting'
        | 'FwfpCosting'
        | 'WffpCosting'
        | 'RfwfpCosting'
        | 'GcCosting'
        | 'FdcCosting'
        | 'RdcCosting'
        | 'DctCosting'
        | 'CorrugatorCosting'
        | 'DmCosting'
    }
    /** @description Die making processing results */
    'dm-result': {
      /**
       * @description Status
       * @enum {string}
       */
      status: 'Pending' | 'Success' | 'Error'
      /** @description Processes involved */
      processes?: string[]
      time?: components['schemas']['time-info']
      cost?: components['schemas']['cost-info']
      /** @description Messages reported during processing */
      messages?: components['schemas']['message'][]
      /** @description Messages reported by a third-party external estimation engine during processing */
      'external-messages'?: components['schemas']['message'][]
      /** @enum {string} */
      'die-type': 'SteelRuleDie' | 'SolidDie' | 'FlexibleDie'
      /**
       * Format: int32
       * @description Number of positions or "ups" in die
       */
      'number-ups': number
      /** @description Rule stats */
      'rule-stats'?: components['schemas']['dm-rule-stats'][]
      /** @enum {string} */
      type:
        | 'SheetFedDigitalPress'
        | 'WebFedDigitalPress'
        | 'SheetFedOffsetPress'
        | 'WebFedOffsetPress'
        | 'WebFedFlexoPress'
        | 'FlatbedWideFormatPress'
        | 'RollFedWideFormatPress'
        | 'GuillotineCutter'
        | 'FlatbedDieCutter'
        | 'RotaryDieCutter'
        | 'DigitalCuttingTable'
        | 'Corrugator'
        | 'DieMaking'
      /** @description Per-die position cost */
      'cost-per-ups'?: string
      /** @description Per-area cost */
      'cost-per-area'?: string
    }
    /** @description Die making rule stats */
    'dm-rule-stats': {
      /** @description Tool name */
      tool: string
      cost: components['schemas']['cost-info']
      /**
       * Format: double
       * @description Total linear tool length
       */
      length: number
    }
    /** @description Project facility */
    facility: {
      /** @description Job trails which contain one or more layouts and the list of things that are processing them */
      trails?: components['schemas']['job-trail'][]
      /** @description List of all things being actively used in one or more job trails in this facility */
      things?: readonly components['schemas']['facility-thingObjectObject'][]
      stats: components['schemas']['facility-stats']
    }
    /** @description Facility-level aggregate stats */
    readonly 'facility-stats': {
      readonly time: components['schemas']['time-info']
      readonly cost: components['schemas']['cost-info']
      /** @description Per-process stats */
      readonly 'process-stats'?: components['schemas']['process-stats'][]
      /**
       * Format: int32
       * @description Total number of layouts needed including ordered run lengths, setup layouts, and waste layouts
       */
      readonly 'total-layouts'?: number
      /**
       * Format: int32
       * @description Total number of setup layouts
       */
      readonly 'setup-layouts'?: number
      /**
       * Format: int32
       * @description Total number of waste layouts during processing
       */
      readonly 'waste-layouts'?: number
    }
    /** @description Thing being utilized in the facility and its list of current jobs */
    readonly 'facility-thingObjectObject': {
      readonly thing?: components['schemas']['thing']
      /** @description List of all jobs currently queued for processing by this thing */
      readonly jobs?: components['schemas']['thing-job'][]
    }
    /** @description Flatbed die cutter capabilities */
    'fdc-capabilities': {
      'width-range': components['schemas']['scalar-range']
      'height-range': components['schemas']['scalar-range']
      /** @description Limit */
      limit: boolean
      /** @enum {string} */
      'limit-logic': 'Inclusively' | 'Exclusively'
      'caliper-range': components['schemas']['scalar-range']
      'weight-range': components['schemas']['stock-weight-range']
      /** @enum {string} */
      'sheet-handling': 'None' | 'LongEdgeHorizontal' | 'LongEdgeVertical'
      /** @description Library reference */
      'stock-types'?: {
        /** @description Unique ID of asset */
        id?: string
        /** @description Path to asset */
        path?: string
      }
      /** @description Library reference */
      'specific-stocks'?: {
        /** @description Unique ID of asset */
        id?: string
        /** @description Path to asset */
        path?: string
      }
      /** @enum {string} */
      type:
        | 'PressCapabilities'
        | 'GcCapabilities'
        | 'FdcCapabilities'
        | 'RdcCapabilities'
        | 'DctCapabilities'
        | 'CorrugatorCapabilities'
        | 'DmCapabilities'
    }
    /** @description Flatbed die cutter costing */
    'fdc-costing': {
      /** @description Currency */
      currency: {
        currencyCode?: string
        /** Format: int32 */
        defaultFractionDigits?: number
        /** Format: int32 */
        numericCode?: number
        displayName?: string
        symbol?: string
        numericCodeAsString?: string
      }
      rate: components['schemas']['rate']
      setup: components['schemas']['fdc-setup']
      'run-length-range'?: components['schemas']['integer-range']
      speed: components['schemas']['speed']
      /** @enum {string} */
      type:
        | 'SfdpCosting'
        | 'WfdpCosting'
        | 'SfopCosting'
        | 'WfopCosting'
        | 'FwfpCosting'
        | 'WffpCosting'
        | 'RfwfpCosting'
        | 'GcCosting'
        | 'FdcCosting'
        | 'RdcCosting'
        | 'DctCosting'
        | 'CorrugatorCosting'
        | 'DmCosting'
    }
    /** @description Flatbed die cutter media rules */
    'fdc-media-rules': {
      default: components['schemas']['media-rule']
      /** @description Map containing key/values */
      map?: {
        [key: string]: components['schemas']['media-rule']
      }
      /** @enum {string} */
      type:
        | 'OperationModes'
        | 'DctOperation'
        | 'CorrugatorOperation'
        | 'PressMediaRules'
        | 'GcMediaRules'
        | 'FdcMediaRules'
        | 'RdcMediaRules'
        | 'DctMediaRules'
        | 'CorrugatorMediaRules'
        | 'SteelRules'
    }
    /** @description Flatbed die cutter processing results */
    'fdc-result': {
      /**
       * @description Status
       * @enum {string}
       */
      status: 'Pending' | 'Success' | 'Error'
      /** @description Processes involved */
      processes?: string[]
      time?: components['schemas']['time-info']
      cost?: components['schemas']['cost-info']
      /** @description Messages reported during processing */
      messages?: components['schemas']['message'][]
      /** @description Messages reported by a third-party external estimation engine during processing */
      'external-messages'?: components['schemas']['message'][]
      /** @description Process type */
      'process-type'?: string
      'setup-time'?: components['schemas']['time-info']
      /**
       * Format: int32
       * @description Total number of layouts being processed by this device including setup, waste, and produced layouts
       */
      'total-layouts'?: number
      /**
       * Format: double
       * @description Cutting time
       */
      'cutting-time'?: number
      /** @description Die name */
      'die-name'?: string
      /** @description Die ID */
      'die-id'?: string
      /**
       * Format: int32
       * @description Number of setup layouts
       */
      'setup-layouts'?: number
      /** @enum {string} */
      type:
        | 'SheetFedDigitalPress'
        | 'WebFedDigitalPress'
        | 'SheetFedOffsetPress'
        | 'WebFedOffsetPress'
        | 'WebFedFlexoPress'
        | 'FlatbedWideFormatPress'
        | 'RollFedWideFormatPress'
        | 'GuillotineCutter'
        | 'FlatbedDieCutter'
        | 'RotaryDieCutter'
        | 'DigitalCuttingTable'
        | 'Corrugator'
        | 'DieMaking'
    }
    /** @description Flatbed die cutter setup */
    'fdc-setup': {
      time: components['schemas']['time-value']
      /**
       * Format: int32
       * @description Setup Layouts
       */
      layouts: number
      /** @enum {string} */
      type: 'Setup' | 'SetupLayouts' | 'GcSetup' | 'FdcSetup' | 'RdcSetup'
    }
    /** @description Fixed number of tiles rule */
    'fixed-number-rule': {
      /**
       * Format: int32
       * @description Fixed number of tiles to create in the given dimension
       */
      number: number
      /** @description If enabled, tile sizes will be uniform after applying overlap or gap methods to the tile, otherwise tile sizes are uniform before overlap or gap methods are applied */
      'uniform-final-size'?: boolean
      /** @enum {string} */
      type: 'None' | 'FixedNumber' | 'FixedSize' | 'VariableSizes'
    }
    /** @description Fixed size tiling rule */
    'fixed-size-rule': {
      /**
       * Format: double
       * @description Fixed size used to create tiles in the given dimension
       */
      size: number
      /** @enum {string} */
      type: 'None' | 'FixedNumber' | 'FixedSize' | 'VariableSizes'
    }
    /** @description Flat component */
    flat: {
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name: string
      'die-design': components['schemas']['die-design']
      spacing: components['schemas']['spacing']
      offcut?: components['schemas']['offcut']
      /**
       * Format: int32
       * @description Bundle size
       */
      'bundle-size'?: number
      /**
       * Format: int32
       * @description Max Bundle Splits
       */
      'max-bundle-splits'?: number
      /** @enum {string} */
      type: 'Flat' | 'Bound' | 'Folded' | 'Tiled'
      /** @description Number of instances that a given item is placed on a layout */
      layouts?: {
        /**
         * Format: int32
         * @description Index of layout
         */
        index: number
        /**
         * Format: int32
         * @description Number of components placed in layout
         */
        placed: number
      }
      /**
       * Format: int32
       * @description Total placed count of this component across all layouts in the project
       */
      placed?: number
      /**
       * Format: int32
       * @description Total number of overruns above ordered quantity
       */
      overrun?: number
      /** @description Whether order quantity of this component has been fulfilled */
      fulfilled?: boolean
      /**
       * Format: int32
       * @description Total number of copies of this component being produced in the project
       */
      total?: number
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description Flat part for creating flats */
    'flat-part': {
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name: string
      /** @enum {string} */
      grain: 'Horizontal' | 'Vertical' | 'Consistent' | 'None'
      /** @description Part pages */
      pages: components['schemas']['page'][]
      /** @description Part process settings */
      'process-settings': components['schemas']['process-setting'][]
      rotation: components['schemas']['rotation']
      flat: components['schemas']['flat']
      /** @description Die templates this flatmust use */
      templates?: string[]
      /** @enum {string} */
      type: 'Flat' | 'Bound' | 'Folded' | 'Tiled'
      material?: components['schemas']['material']
      /** @description Part processes */
      processes?: components['schemas']['process'][]
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description Flatbed die cutter */
    'flatbed-die-cutter': {
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name: string
      /**
       * Format: date-time
       * @description Created On
       */
      'created-on'?: string
      /**
       * Format: date-time
       * @description Modified On
       */
      'modified-on'?: string
      /** @description Version */
      version?: string
      /** @description Description */
      description?: string
      /** @description Notes */
      notes?: string
      /** @description External ID */
      'external-id'?: string
      /** @description Allow pass-through */
      'allow-pass-through'?: boolean
      /** @description Direct connections to other things */
      connections?: components['schemas']['connector'][]
      costing: components['schemas']['fdc-costing']
      capabilities: components['schemas']['fdc-capabilities']
      script?: components['schemas']['reference']
      /** @description Manufacturer */
      manufacturer: string
      'media-rules': components['schemas']['fdc-media-rules']
      placement: components['schemas']['placement']
      /** @description Gripper */
      gripper: string
      /** @enum {string} */
      type:
        | 'SheetFedDigitalPress'
        | 'WebFedDigitalPress'
        | 'SheetFedOffsetPress'
        | 'WebFedOffsetPress'
        | 'WebFedFlexoPress'
        | 'FlatbedWideFormatPress'
        | 'RollFedWideFormatPress'
        | 'GuillotineCutter'
        | 'FlatbedDieCutter'
        | 'RotaryDieCutter'
        | 'DigitalCuttingTable'
        | 'Corrugator'
        | 'DieMaking'
      /** @enum {string} */
      'feed-type': 'Roll' | 'Sheet'
      'process-type': components['schemas']['process-type']
      /** @description Path */
      path?: string
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description Flatbed Wide Format Press */
    'flatbed-wide-format-press': {
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name: string
      /**
       * Format: date-time
       * @description Created On
       */
      'created-on'?: string
      /**
       * Format: date-time
       * @description Modified On
       */
      'modified-on'?: string
      /** @description Version */
      version?: string
      /** @description Description */
      description?: string
      /** @description Notes */
      notes?: string
      /** @description External ID */
      'external-id'?: string
      /** @description Allow pass-through */
      'allow-pass-through'?: boolean
      /** @description Direct connections to other things */
      connections?: components['schemas']['connector'][]
      costing: components['schemas']['fwfp-costing']
      capabilities: components['schemas']['press-capabilities']
      script?: components['schemas']['reference']
      /** @description Manufacturer */
      manufacturer: string
      'media-rules': components['schemas']['press-media-rules']
      placement: components['schemas']['press-placement']
      operation: components['schemas']['operation-modes']
      'front-units': components['schemas']['press-units']
      /** @description Single Pass Double Sided */
      'single-pass-double-sided'?: boolean
      'back-units'?: components['schemas']['press-units']
      /** @description Double Sided Speed Reduction */
      'double-sided-speed-reduction'?: string
      /** @description Gripper */
      gripper?: string
      /** @enum {string} */
      sheetTurn?: 'Turn' | 'Tumble'
      /** @enum {string} */
      type:
        | 'SheetFedDigitalPress'
        | 'WebFedDigitalPress'
        | 'SheetFedOffsetPress'
        | 'WebFedOffsetPress'
        | 'WebFedFlexoPress'
        | 'FlatbedWideFormatPress'
        | 'RollFedWideFormatPress'
        | 'GuillotineCutter'
        | 'FlatbedDieCutter'
        | 'RotaryDieCutter'
        | 'DigitalCuttingTable'
        | 'Corrugator'
        | 'DieMaking'
      /** @enum {string} */
      'feed-type': 'Roll' | 'Sheet'
      'process-type': components['schemas']['process-type']
      /** @description Path */
      path?: string
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description Flexo Press Placement */
    'flexo-press-placement': {
      rule: components['schemas']['rule']
      'default-sheet'?: components['schemas']['sheet-ref']
      'default-plate'?: components['schemas']['reference']
      /** @enum {string} */
      type:
        | 'Placement'
        | 'PressPlacement'
        | 'OffsetPressPlacement'
        | 'FlexoPressPlacement'
    }
    /** @description Signature fold */
    fold: {
      /** @description Whether this fold is up or down */
      up: boolean
      /** @description Whether this fold is vertical or horizontal */
      vertical: boolean
      /**
       * Format: int32
       * @description Cells in this fold
       */
      cells: number
    }
    /** @description Folded parts for creating folded work such as brochures */
    'folded-part': {
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name: string
      /** @enum {string} */
      grain: 'Horizontal' | 'Vertical' | 'Consistent' | 'None'
      /** @description Part pages */
      pages: components['schemas']['page'][]
      /** @description Part process settings */
      'process-settings': components['schemas']['process-setting'][]
      rotation: components['schemas']['rotation']
      'page-size': components['schemas']['size']
      signature?: components['schemas']['folded-signature']
      /** @enum {string} */
      type: 'Flat' | 'Bound' | 'Folded' | 'Tiled'
      material?: components['schemas']['material']
      /** @description Part processes */
      processes?: components['schemas']['process'][]
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description Folded signature component */
    'folded-signature': {
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name: string
      'die-design': components['schemas']['die-design']
      spacing: components['schemas']['spacing']
      offcut?: components['schemas']['offcut']
      /** @enum {string} */
      type: 'Flat' | 'Bound' | 'Folded' | 'Tiled'
      'folding-pattern': components['schemas']['asset-info']
      /** @description Number of instances that a given item is placed on a layout */
      layouts?: {
        /**
         * Format: int32
         * @description Index of layout
         */
        index: number
        /**
         * Format: int32
         * @description Number of components placed in layout
         */
        placed: number
      }
      /**
       * Format: int32
       * @description Total placed count of this component across all layouts in the project
       */
      placed?: number
      /**
       * Format: int32
       * @description Total number of overruns above ordered quantity
       */
      overrun?: number
      /** @description Whether order quantity of this component has been fulfilled */
      fulfilled?: boolean
      /**
       * Format: int32
       * @description Total number of copies of this component being produced in the project
       */
      total?: number
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description Folding pattern */
    'folding-pattern': {
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name: string
      /**
       * Format: date-time
       * @description Created On
       */
      'created-on'?: string
      /**
       * Format: date-time
       * @description Modified On
       */
      'modified-on'?: string
      /** @description Version */
      version?: string
      /** @description Description */
      description?: string
      /** @description Notes */
      notes?: string
      /** @description External ID */
      'external-id'?: string
      /**
       * Format: int32
       * @description Number of columns
       */
      columns: number
      /**
       * Format: int32
       * @description Number of rows
       */
      rows: number
      /** @description Folds in this signature */
      folds: components['schemas']['fold'][]
      'page-mappings'?: components['schemas']['page-mappings']
      /** @description Path */
      path?: string
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description Single frame in the roll */
    frame: {
      /**
       * Format: double
       * @description X coordinate
       */
      x: number
      /**
       * Format: double
       * @description Y coordinate
       */
      y: number
      /**
       * Format: double
       * @description Width
       */
      width: number
      /**
       * Format: double
       * @description Height
       */
      height: number
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name?: string
      /**
       * Format: int32
       * @description Number of times this frame repeats consecutively on the roll
       */
      repeats?: number
      /** @enum {string} */
      type:
        | 'Roll'
        | 'Segment'
        | 'Lane'
        | 'Ribbon'
        | 'Component'
        | 'Blank'
        | 'Frame'
        | 'Strip'
        | 'LeadIn'
        | 'LeadOut'
    }
    /** @description Flatbed Wide Format Press Costing */
    'fwfp-costing': {
      /** @description Currency */
      currency: {
        currencyCode?: string
        /** Format: int32 */
        defaultFractionDigits?: number
        /** Format: int32 */
        numericCode?: number
        displayName?: string
        symbol?: string
        numericCodeAsString?: string
      }
      rate: components['schemas']['rate']
      setup: components['schemas']['setup-layouts']
      /**
       * Format: double
       * @description Running Waste
       */
      'running-waste': number
      /** @enum {string} */
      type:
        | 'SfdpCosting'
        | 'WfdpCosting'
        | 'SfopCosting'
        | 'WfopCosting'
        | 'FwfpCosting'
        | 'WffpCosting'
        | 'RfwfpCosting'
        | 'GcCosting'
        | 'FdcCosting'
        | 'RdcCosting'
        | 'DctCosting'
        | 'CorrugatorCosting'
        | 'DmCosting'
    }
    /** @description Flatbed Wide Format Press Result */
    'fwfp-result': {
      /**
       * @description Status
       * @enum {string}
       */
      status: 'Pending' | 'Success' | 'Error'
      /** @description Processes involved */
      processes?: string[]
      time?: components['schemas']['time-info']
      cost?: components['schemas']['cost-info']
      /** @description Messages reported during processing */
      messages?: components['schemas']['message'][]
      /** @description Messages reported by a third-party external estimation engine during processing */
      'external-messages'?: components['schemas']['message'][]
      /** @description Process type */
      'process-type'?: string
      'setup-time'?: components['schemas']['time-info']
      /**
       * Format: int32
       * @description Total number of layouts being processed by this device including setup, waste, and produced layouts
       */
      'total-layouts'?: number
      /**
       * Format: int32
       * @description Number of setup layouts
       */
      'setup-layouts'?: number
      /**
       * Format: int32
       * @description Layouts wasted during the device run
       */
      'waste-layouts'?: number
      /** @description Colors being processed */
      colors?: components['schemas']['press-color'][]
      /** @enum {string} */
      side?: 'Front' | 'Back' | 'Both'
      'ink-cost'?: components['schemas']['cost-info']
      /** @enum {string} */
      type:
        | 'SheetFedDigitalPress'
        | 'WebFedDigitalPress'
        | 'SheetFedOffsetPress'
        | 'WebFedOffsetPress'
        | 'WebFedFlexoPress'
        | 'FlatbedWideFormatPress'
        | 'RollFedWideFormatPress'
        | 'GuillotineCutter'
        | 'FlatbedDieCutter'
        | 'RotaryDieCutter'
        | 'DigitalCuttingTable'
        | 'Corrugator'
        | 'DieMaking'
    }
    /** @description Gap-based tile edge defines gap amount and optional extension distance beyond gap for a given tile edge */
    'gap-tile-edge': {
      /**
       * Format: double
       * @description Gap distance to subtract from tile edge
       */
      gap: number
      /**
       * Format: double
       * @description Amount of extra artwork content beyond the tile gap boundary to extend
       */
      extension?: number
      /** @enum {string} */
      type: 'GapEdge' | 'OverlapEdge'
    }
    /** @description Gap tiling method creates gaps between tiles */
    'gap-tiling': {
      /**
       * Format: double
       * @description Gap distance between tiles in the given direction
       */
      gap: number
      /** @enum {string} */
      'extension-rule'?: 'OppositeStart' | 'Both'
      /**
       * Format: double
       * @description Amount of extra artwork content beyond the tile gap boundary to extend into the gap in the given direction
       */
      extension?: number
      /** @enum {string} */
      type: 'None' | 'Gap' | 'Overlap'
    }
    /** @description Guillotine cutter capabilities */
    'gc-capabilities': {
      'width-range': components['schemas']['scalar-range']
      'height-range': components['schemas']['scalar-range']
      /** @description Limit */
      limit: boolean
      /** @enum {string} */
      'limit-logic': 'Inclusively' | 'Exclusively'
      'caliper-range': components['schemas']['scalar-range']
      'weight-range': components['schemas']['stock-weight-range']
      /** @enum {string} */
      'sheet-handling': 'None' | 'LongEdgeHorizontal' | 'LongEdgeVertical'
      /** @description Library reference */
      'stock-types'?: {
        /** @description Unique ID of asset */
        id?: string
        /** @description Path to asset */
        path?: string
      }
      /** @description Library reference */
      'specific-stocks'?: {
        /** @description Unique ID of asset */
        id?: string
        /** @description Path to asset */
        path?: string
      }
      /** @enum {string} */
      type:
        | 'PressCapabilities'
        | 'GcCapabilities'
        | 'FdcCapabilities'
        | 'RdcCapabilities'
        | 'DctCapabilities'
        | 'CorrugatorCapabilities'
        | 'DmCapabilities'
    }
    /** @description Guillotine cutter costing */
    'gc-costing': {
      /** @description Currency */
      currency: {
        currencyCode?: string
        /** Format: int32 */
        defaultFractionDigits?: number
        /** Format: int32 */
        numericCode?: number
        displayName?: string
        symbol?: string
        numericCodeAsString?: string
      }
      rate: components['schemas']['rate']
      setup: components['schemas']['gc-setup']
      /** @enum {string} */
      type:
        | 'SfdpCosting'
        | 'WfdpCosting'
        | 'SfopCosting'
        | 'WfopCosting'
        | 'FwfpCosting'
        | 'WffpCosting'
        | 'RfwfpCosting'
        | 'GcCosting'
        | 'FdcCosting'
        | 'RdcCosting'
        | 'DctCosting'
        | 'CorrugatorCosting'
        | 'DmCosting'
    }
    /** @description Guillotine cutter media rules */
    'gc-media-rules': {
      default: components['schemas']['media-rule']
      /** @description Map containing key/values */
      map?: {
        [key: string]: components['schemas']['media-rule']
      }
      /** @enum {string} */
      type:
        | 'OperationModes'
        | 'DctOperation'
        | 'CorrugatorOperation'
        | 'PressMediaRules'
        | 'GcMediaRules'
        | 'FdcMediaRules'
        | 'RdcMediaRules'
        | 'DctMediaRules'
        | 'CorrugatorMediaRules'
        | 'SteelRules'
    }
    /** @description Guillotine cutter processing results */
    'gc-result': {
      /**
       * @description Status
       * @enum {string}
       */
      status: 'Pending' | 'Success' | 'Error'
      /** @description Processes involved */
      processes?: string[]
      time?: components['schemas']['time-info']
      cost?: components['schemas']['cost-info']
      /** @description Messages reported during processing */
      messages?: components['schemas']['message'][]
      /** @description Messages reported by a third-party external estimation engine during processing */
      'external-messages'?: components['schemas']['message'][]
      /** @description Process type */
      'process-type'?: string
      'setup-time'?: components['schemas']['time-info']
      /**
       * Format: int32
       * @description Total number of layouts being processed by this device including setup, waste, and produced layouts
       */
      'total-layouts'?: number
      /**
       * Format: int32
       * @description Number of sheet turns
       */
      'sheet-turns': number
      /**
       * Format: int32
       * @description Total number of cuts needed for each stack
       */
      'cut-count': number
      /**
       * Format: int32
       * @description Number of stacks that need to be cut
       */
      stacks: number
      /** @enum {string} */
      type:
        | 'SheetFedDigitalPress'
        | 'WebFedDigitalPress'
        | 'SheetFedOffsetPress'
        | 'WebFedOffsetPress'
        | 'WebFedFlexoPress'
        | 'FlatbedWideFormatPress'
        | 'RollFedWideFormatPress'
        | 'GuillotineCutter'
        | 'FlatbedDieCutter'
        | 'RotaryDieCutter'
        | 'DigitalCuttingTable'
        | 'Corrugator'
        | 'DieMaking'
    }
    /** @description Guillotine cutter setup */
    'gc-setup': {
      time: components['schemas']['time-value']
      /** @enum {string} */
      type: 'Setup' | 'SetupLayouts' | 'GcSetup' | 'FdcSetup' | 'RdcSetup'
    }
    /** @description Gear Cylinder */
    'gear-cylinder': {
      circumference: components['schemas']['ScalarValue']
      /** @enum {string} */
      type: 'Gear' | 'Sleeve'
    }
    /** @description Guillotine cutter */
    'guillotine-cutter': {
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name: string
      /**
       * Format: date-time
       * @description Created On
       */
      'created-on'?: string
      /**
       * Format: date-time
       * @description Modified On
       */
      'modified-on'?: string
      /** @description Version */
      version?: string
      /** @description Description */
      description?: string
      /** @description Notes */
      notes?: string
      /** @description External ID */
      'external-id'?: string
      /** @description Allow pass-through */
      'allow-pass-through'?: boolean
      /** @description Direct connections to other things */
      connections?: components['schemas']['connector'][]
      costing: components['schemas']['gc-costing']
      capabilities: components['schemas']['gc-capabilities']
      script?: components['schemas']['reference']
      /** @description Manufacturer */
      manufacturer: string
      'media-rules': components['schemas']['gc-media-rules']
      placement: components['schemas']['placement']
      /** @enum {string} */
      type:
        | 'SheetFedDigitalPress'
        | 'WebFedDigitalPress'
        | 'SheetFedOffsetPress'
        | 'WebFedOffsetPress'
        | 'WebFedFlexoPress'
        | 'FlatbedWideFormatPress'
        | 'RollFedWideFormatPress'
        | 'GuillotineCutter'
        | 'FlatbedDieCutter'
        | 'RotaryDieCutter'
        | 'DigitalCuttingTable'
        | 'Corrugator'
        | 'DieMaking'
      /** @enum {string} */
      'feed-type': 'Roll' | 'Sheet'
      'process-type': components['schemas']['process-type']
      /** @description Path */
      path?: string
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description Ink Cost */
    'ink-cost': {
      /** @enum {string} */
      type: 'Coverage' | 'Clicks'
      /** @enum {string} */
      units:
        | 'Sheets'
        | 'Feet'
        | 'Inches'
        | 'Meters'
        | 'Centimeters'
        | 'Millimeters'
        | 'MSI'
        | 'MSF'
        | 'SquareFeet'
        | 'SquareInches'
        | 'SquareMeters'
        | 'SquareCentimeters'
        | 'SquareMillimeters'
      /** @description Coverage */
      coverage?: string
      /**
       * Format: double
       * @description Cyan
       */
      cyan?: number
      /**
       * Format: double
       * @description Magenta
       */
      magenta?: number
      /**
       * Format: double
       * @description Yellow
       */
      yellow?: number
      /**
       * Format: double
       * @description Black
       */
      black?: number
      /**
       * Format: double
       * @description Spots
       */
      spots?: number
      /**
       * Format: double
       * @description Coatings
       */
      coatings?: number
      /**
       * Format: double
       * @description Foils
       */
      foils?: number
    }
    /** @description Integer Range */
    'integer-range': {
      /**
       * Format: int32
       * @description Start
       */
      start?: number
      /**
       * Format: int32
       * @description End
       */
      end?: number
      /** @enum {string} */
      type:
        | 'IntegerRange'
        | 'DoubleRange'
        | 'ScalarRange'
        | 'StockWeightRange'
        | 'DateRange'
    }
    /** @description Job */
    'job-info': {
      thing?: components['schemas']['asset-info']
      /** @description Job ID */
      job?: string
    }
    /** @description Job trail */
    'job-trail': {
      /** @description Unique ID */
      id?: string
      /** @description Trail layouts */
      layouts?: components['schemas']['layout-range'][]
      stats: components['schemas']['trail-stats']
      /** @description Ordered list of jobs being performed in this trail */
      jobs?: components['schemas']['job-info'][]
    }
    /** @description Lane within a roll */
    lane: {
      /**
       * Format: double
       * @description Y coordinate
       */
      y: number
      /**
       * Format: double
       * @description Width
       */
      width: number
      /**
       * Format: double
       * @description Height
       */
      height: number
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name?: string
      /**
       * Format: double
       * @description Gutter distance between child regions of this region
       */
      gutter?: number
      /** @description Template used to define layout of this lane, e.g. repeat template used in die cutting */
      template?: string
      /** @enum {string} */
      type:
        | 'Roll'
        | 'Segment'
        | 'Lane'
        | 'Ribbon'
        | 'Component'
        | 'Blank'
        | 'Frame'
        | 'Strip'
        | 'LeadIn'
        | 'LeadOut'
    }
    /** @description Layout index range */
    'layout-range': {
      /**
       * Format: int32
       * @description Start layout index
       */
      start: number
      /**
       * Format: int32
       * @description End layout index
       */
      end: number
    }
    /** @description Number of instances that a given item is placed on a layout */
    layouts: {
      /**
       * Format: int32
       * @description Index of layout
       */
      index: number
      /**
       * Format: int32
       * @description Number of components placed in layout
       */
      placed: number
    }
    /** @description Lead-in area on the roll */
    'lead-in': {
      /**
       * Format: double
       * @description X coordinate
       */
      x: number
      /**
       * Format: double
       * @description Y coordinate
       */
      y: number
      /**
       * Format: double
       * @description Width
       */
      width: number
      /**
       * Format: double
       * @description Height
       */
      height: number
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name?: string
      /** @enum {string} */
      type:
        | 'Roll'
        | 'Segment'
        | 'Lane'
        | 'Ribbon'
        | 'Component'
        | 'Blank'
        | 'Frame'
        | 'Strip'
        | 'LeadIn'
        | 'LeadOut'
    }
    /** @description Lead-out area on the roll */
    'lead-out': {
      /**
       * Format: double
       * @description X coordinate
       */
      x: number
      /**
       * Format: double
       * @description Y coordinate
       */
      y: number
      /**
       * Format: double
       * @description Width
       */
      width: number
      /**
       * Format: double
       * @description Height
       */
      height: number
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name?: string
      /** @enum {string} */
      type:
        | 'Roll'
        | 'Segment'
        | 'Lane'
        | 'Ribbon'
        | 'Component'
        | 'Blank'
        | 'Frame'
        | 'Strip'
        | 'LeadIn'
        | 'LeadOut'
    }
    /** @description Margins */
    margins: {
      /** @enum {string} */
      type?: 'Inside' | 'Outside'
      /** @description Left */
      left?: string
      /** @description Top */
      top?: string
      /** @description Right */
      right?: string
      /** @description Bottom */
      bottom?: string
      /** @description Linked */
      linked?: boolean
    }
    /** @description Material object */
    material: {
      stock?: components['schemas']['asset-info']
      grade?: components['schemas']['asset-info']
    }
    /** @description Material Reference */
    'material-ref': {
      stock: components['schemas']['reference']
      /** @description Grade ID */
      'grade-id': string
    }
    /** @description Media rule */
    'media-rule': {
      /** @description List of marks to apply with this media rule */
      marks?: components['schemas']['device-mark'][]
      /** @description Speed reduction specified as a number where 1.0 represents no change */
      'speed-reduction'?: string
      content?: components['schemas']['margins']
      image?: components['schemas']['margins']
      /** @enum {string} */
      type:
        | 'OperationMode'
        | 'MediaRule'
        | 'PressMediaRule'
        | 'DctRuleValue'
        | 'CorrugatorMode'
        | 'CorrugatorMediaRule'
        | 'SteelRule'
    }
    /** @description Media rules */
    'media-rules': {
      default: components['schemas']['media-rule']
      /** @description Map containing key/values */
      map?: {
        [key: string]: components['schemas']['media-rule']
      }
      /** @enum {string} */
      type:
        | 'OperationModes'
        | 'DctOperation'
        | 'CorrugatorOperation'
        | 'PressMediaRules'
        | 'GcMediaRules'
        | 'FdcMediaRules'
        | 'RdcMediaRules'
        | 'DctMediaRules'
        | 'CorrugatorMediaRules'
        | 'SteelRules'
    }
    /** @description Message */
    message: {
      /** @description Unique ID */
      id?: string
      /**
       * @description Status type
       * @enum {string}
       */
      type?: 'Progress' | 'Success' | 'Info' | 'Warning' | 'Error'
      /** @description Message text */
      text?: string
    }
    /** @description Motion specs */
    'motion-specs': {
      velocity: components['schemas']['velocity']
      acceleration: components['schemas']['acceleration']
    }
    /** @description Offcut settings */
    offcut: {
      /** @description Single margin setting */
      margin?: string
      margins?: components['schemas']['margins']
      /** @enum {string} */
      type: 'None' | 'Contour' | 'Margins'
    }
    /** @description Offset Press Placement */
    'offset-press-placement': {
      rule: components['schemas']['rule']
      'default-sheet'?: components['schemas']['sheet-ref']
      'default-plate'?: components['schemas']['reference']
      'sheet-position': components['schemas']['sheet-position']
      /** @enum {string} */
      type:
        | 'Placement'
        | 'PressPlacement'
        | 'OffsetPressPlacement'
        | 'FlexoPressPlacement'
    }
    /** @description Operation Mode */
    'operation-mode': {
      speed: components['schemas']['speed']
      'ink-cost': components['schemas']['ink-cost']
      /** @enum {string} */
      type:
        | 'OperationMode'
        | 'MediaRule'
        | 'PressMediaRule'
        | 'DctRuleValue'
        | 'CorrugatorMode'
        | 'CorrugatorMediaRule'
        | 'SteelRule'
    }
    /** @description Operation Modes */
    'operation-modes': {
      default: components['schemas']['operation-mode']
      /** @description Map containing key/values */
      map?: {
        [key: string]: components['schemas']['operation-mode']
      }
      /** @enum {string} */
      type:
        | 'OperationModes'
        | 'DctOperation'
        | 'CorrugatorOperation'
        | 'PressMediaRules'
        | 'GcMediaRules'
        | 'FdcMediaRules'
        | 'RdcMediaRules'
        | 'DctMediaRules'
        | 'CorrugatorMediaRules'
        | 'SteelRules'
    }
    /** @description Overlap-based tile edge defines overlap from tile edge and optionally no image area within the overlap */
    'overlap-tile-edge': {
      /**
       * Format: double
       * @description Distance beyond tile edge to extend the tile to create overlap in the given direction
       */
      overlap: number
      /**
       * Format: double
       * @description Distance of the section at the end of the overlap where artwork content is to be clipped
       */
      'no-image'?: number
      /** @enum {string} */
      type: 'GapEdge' | 'OverlapEdge'
    }
    /** @description Overlap tiling method creates overlaps between tiles in the given direction */
    'overlap-tiling': {
      /** @enum {string} */
      'overlap-rule'?: 'Top' | 'Bottom' | 'Both'
      /**
       * Format: double
       * @description Distance beyond tile edge to extend the tile to create overlap in the given direction
       */
      overlap: number
      /**
       * Format: double
       * @description Distance of the section at the end of the overlap where artwork content is to be clipped
       */
      'no-image'?: number
      /** @enum {string} */
      type: 'None' | 'Gap' | 'Overlap'
    }
    /** @description Page object */
    page: {
      /** @description Unique ID */
      id?: string
      file: components['schemas']['page-file']
      /** @description Part page clip */
      'page-clip'?: boolean
      /** @description Page artwork locked */
      locked?: boolean
      /** @description Page visible */
      visible?: boolean
    }
    /** @description Page assignment state for the page */
    'page-file': {
      /** @description Full path to the file */
      path?: string
      /**
       * Format: int32
       * @description Page number used from the file
       */
      number?: number
      /**
       * Format: double
       * @description Artwork page width
       */
      width?: number
      /**
       * Format: double
       * @description Artwork page height
       */
      height?: number
      /** @description File checksum */
      checksum?: string
      /**
       * Format: int64
       * @description Timestamp recorded for file
       */
      timestamp?: number
    }
    /** @description Folding pattern custom page mappings */
    'page-mappings': Record<string, never>
    /** @description Part - base object for product 2.0 part model */
    partObject: {
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name: string
      /** @enum {string} */
      grain: 'Horizontal' | 'Vertical' | 'Consistent' | 'None'
      /** @description Part pages */
      pages: components['schemas']['page'][]
      /** @description Part process settings */
      'process-settings': components['schemas']['process-setting'][]
      rotation: components['schemas']['rotation']
      /** @enum {string} */
      type: 'Flat' | 'Bound' | 'Folded' | 'Tiled'
      material?: components['schemas']['material']
      /** @description Part processes */
      processes?: components['schemas']['process'][]
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    } & (
      | components['schemas']['flat-part']
      | components['schemas']['bound-part']
      | components['schemas']['folded-part']
      | components['schemas']['tiled-part']
    )
    /** @description Path */
    path: Record<string, never>
    /** @description Placement */
    placement: {
      rule: components['schemas']['rule']
      /** @enum {string} */
      type:
        | 'Placement'
        | 'PressPlacement'
        | 'OffsetPressPlacement'
        | 'FlexoPressPlacement'
    } & (
      | components['schemas']['press-placement']
      | components['schemas']['offset-press-placement']
      | components['schemas']['flexo-press-placement']
    )
    /** @description Press Capabilities */
    'press-capabilities': {
      'width-range': components['schemas']['scalar-range']
      'height-range': components['schemas']['scalar-range']
      /** @description Limit */
      limit: boolean
      /** @enum {string} */
      'limit-logic': 'Inclusively' | 'Exclusively'
      'caliper-range': components['schemas']['scalar-range']
      'weight-range': components['schemas']['stock-weight-range']
      /** @enum {string} */
      'sheet-handling': 'None' | 'LongEdgeHorizontal' | 'LongEdgeVertical'
      /** @description Library reference */
      'stock-types'?: {
        /** @description Unique ID of asset */
        id?: string
        /** @description Path to asset */
        path?: string
      }
      /** @description Library reference */
      'specific-stocks'?: {
        /** @description Unique ID of asset */
        id?: string
        /** @description Path to asset */
        path?: string
      }
      /** @enum {string} */
      type:
        | 'PressCapabilities'
        | 'GcCapabilities'
        | 'FdcCapabilities'
        | 'RdcCapabilities'
        | 'DctCapabilities'
        | 'CorrugatorCapabilities'
        | 'DmCapabilities'
    }
    /** @description Press color */
    'press-color': {
      /** @description Color name */
      name?: string
      /** @description Color process */
      process?: string
      /** @enum {string} */
      side?: 'Front' | 'Back'
      cost?: components['schemas']['cost-info']
    }
    /** @description Press media rule */
    'press-media-rule': {
      /** @description List of marks to apply with this media rule */
      marks?: components['schemas']['device-mark'][]
      /** @description Speed reduction specified as a number where 1.0 represents no change */
      'speed-reduction'?: string
      content?: components['schemas']['margins']
      image?: components['schemas']['margins']
      /** @description Regions */
      regions?: components['schemas']['region'][]
      /** @description Ink adjustment */
      'ink-adjustment'?: string
      /** @enum {string} */
      type:
        | 'OperationMode'
        | 'MediaRule'
        | 'PressMediaRule'
        | 'DctRuleValue'
        | 'CorrugatorMode'
        | 'CorrugatorMediaRule'
        | 'SteelRule'
    }
    /** @description Press media rules */
    'press-media-rules': {
      default: components['schemas']['press-media-rule']
      /** @description Map containing key/values */
      map?: {
        [key: string]: components['schemas']['press-media-rule']
      }
      /** @enum {string} */
      type:
        | 'OperationModes'
        | 'DctOperation'
        | 'CorrugatorOperation'
        | 'PressMediaRules'
        | 'GcMediaRules'
        | 'FdcMediaRules'
        | 'RdcMediaRules'
        | 'DctMediaRules'
        | 'CorrugatorMediaRules'
        | 'SteelRules'
    }
    /** @description Press Placement */
    'press-placement': {
      rule: components['schemas']['rule']
      'default-sheet'?: components['schemas']['sheet-ref']
      /** @enum {string} */
      type:
        | 'Placement'
        | 'PressPlacement'
        | 'OffsetPressPlacement'
        | 'FlexoPressPlacement'
    }
    /** @description Press Units */
    'press-units': {
      /**
       * Format: int32
       * @description Units
       */
      units: number
      /**
       * Format: int32
       * @description Coatings
       */
      coatings: number
      /**
       * Format: int32
       * @description Foils
       */
      foils: number
    }
    /** @description Process */
    process: {
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name: string
      /**
       * Format: date-time
       * @description Created On
       */
      'created-on'?: string
      /**
       * Format: date-time
       * @description Modified On
       */
      'modified-on'?: string
      /** @description Version */
      version?: string
      /** @description Description */
      description?: string
      /** @description Notes */
      notes?: string
      /** @description External ID */
      'external-id'?: string
      /** @description Path */
      path?: string
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description Process setting */
    'process-setting': {
      /** @description Process setting process */
      process: string
      /** @description Process setting mode */
      mode?: string
      /**
       * Format: double
       * @description Process setting mode value
       */
      'mode-value'?: number
      /** @description Process setting things */
      things?: string[]
      /** @description Process setting types */
      'process-types'?: string[]
    }
    /** @description Per-process aggregate stats */
    'process-stats': {
      time: components['schemas']['time-info']
      cost: components['schemas']['cost-info']
      /** @description Process */
      process: string
      /** @description Inline processes */
      inline?: string[]
    }
    /** @description Process Type */
    'process-type': {
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name: string
      /**
       * Format: date-time
       * @description Created On
       */
      'created-on'?: string
      /**
       * Format: date-time
       * @description Modified On
       */
      'modified-on'?: string
      /** @description Version */
      version?: string
      /** @description Description */
      description?: string
      /** @description Notes */
      notes?: string
      /** @description External ID */
      'external-id'?: string
      process: components['schemas']['reference']
      /** @description Path */
      path?: string
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description Product 2.0 */
    product: {
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name: string
      /**
       * Format: date-time
       * @description Created On
       */
      'created-on'?: string
      /**
       * Format: date-time
       * @description Modified On
       */
      'modified-on'?: string
      /** @description Version */
      version?: string
      /** @description Description */
      description?: string
      /** @description Notes */
      notes?: string
      /**
       * Format: int32
       * @description Product order quantity
       */
      quantity: number
      /**
       * Format: date-time
       * @description Product due date
       */
      'due-date'?: string
      /** @description Product group */
      group?: string
      /**
       * Format: int32
       * @description Product priority
       */
      priority?: number
      overruns: components['schemas']['scalar-range']
      /**
       * Format: int32
       * @description Product color in RGB
       */
      color: number
      /** @description Product parts that make up this product */
      parts: components['schemas']['partObject'][]
      /** @description All warning and error messages related to this product */
      messages?: components['schemas']['message'][]
      /**
       * Format: int32
       * @description Product index number
       */
      index?: number
      /** @description Whether order quantities of all components in this product have been fulfilled */
      fulfilled?: boolean
      /** @description Path */
      path?: string
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description Rate */
    rate: {
      /**
       * Format: double
       * @description Value
       */
      value: number
      /** @enum {string} */
      units: 'Milliseconds' | 'Seconds' | 'Minutes' | 'Hours' | 'Days'
    }
    /** @description Rotary die cutter capabilities */
    'rdc-capabilities': {
      'width-range': components['schemas']['scalar-range']
      'height-range': components['schemas']['scalar-range']
      /** @description Limit */
      limit: boolean
      /** @enum {string} */
      'limit-logic': 'Inclusively' | 'Exclusively'
      'caliper-range': components['schemas']['scalar-range']
      'weight-range': components['schemas']['stock-weight-range']
      /** @enum {string} */
      'sheet-handling': 'None' | 'LongEdgeHorizontal' | 'LongEdgeVertical'
      /** @description Library reference */
      'stock-types'?: {
        /** @description Unique ID of asset */
        id?: string
        /** @description Path to asset */
        path?: string
      }
      /** @description Library reference */
      'specific-stocks'?: {
        /** @description Unique ID of asset */
        id?: string
        /** @description Path to asset */
        path?: string
      }
      /** @enum {string} */
      type:
        | 'PressCapabilities'
        | 'GcCapabilities'
        | 'FdcCapabilities'
        | 'RdcCapabilities'
        | 'DctCapabilities'
        | 'CorrugatorCapabilities'
        | 'DmCapabilities'
    }
    /** @description Rotary die cutter costing */
    'rdc-costing': {
      /** @description Currency */
      currency: {
        currencyCode?: string
        /** Format: int32 */
        defaultFractionDigits?: number
        /** Format: int32 */
        numericCode?: number
        displayName?: string
        symbol?: string
        numericCodeAsString?: string
      }
      rate: components['schemas']['rate']
      setup: components['schemas']['rdc-setup']
      'run-length-range'?: components['schemas']['integer-range']
      speed: components['schemas']['speed']
      /** @enum {string} */
      type:
        | 'SfdpCosting'
        | 'WfdpCosting'
        | 'SfopCosting'
        | 'WfopCosting'
        | 'FwfpCosting'
        | 'WffpCosting'
        | 'RfwfpCosting'
        | 'GcCosting'
        | 'FdcCosting'
        | 'RdcCosting'
        | 'DctCosting'
        | 'CorrugatorCosting'
        | 'DmCosting'
    }
    /** @description Rotary die cutter media rules */
    'rdc-media-rules': {
      default: components['schemas']['media-rule']
      /** @description Map containing key/values */
      map?: {
        [key: string]: components['schemas']['media-rule']
      }
      /** @enum {string} */
      type:
        | 'OperationModes'
        | 'DctOperation'
        | 'CorrugatorOperation'
        | 'PressMediaRules'
        | 'GcMediaRules'
        | 'FdcMediaRules'
        | 'RdcMediaRules'
        | 'DctMediaRules'
        | 'CorrugatorMediaRules'
        | 'SteelRules'
    }
    /** @description Rotary die cutter processing results */
    'rdc-result': {
      /**
       * @description Status
       * @enum {string}
       */
      status: 'Pending' | 'Success' | 'Error'
      /** @description Processes involved */
      processes?: string[]
      time?: components['schemas']['time-info']
      cost?: components['schemas']['cost-info']
      /** @description Messages reported during processing */
      messages?: components['schemas']['message'][]
      /** @description Messages reported by a third-party external estimation engine during processing */
      'external-messages'?: components['schemas']['message'][]
      /** @description Process type */
      'process-type'?: string
      'setup-time'?: components['schemas']['time-info']
      /**
       * Format: int32
       * @description Total number of layouts being processed by this device including setup, waste, and produced layouts
       */
      'total-layouts'?: number
      /**
       * Format: double
       * @description Cutting time
       */
      'cutting-time'?: number
      /** @description Die name */
      'die-name'?: string
      /** @description Die ID */
      'die-id'?: string
      /**
       * Format: int32
       * @description Number of setup layouts
       */
      'setup-layouts'?: number
      /** @enum {string} */
      type:
        | 'SheetFedDigitalPress'
        | 'WebFedDigitalPress'
        | 'SheetFedOffsetPress'
        | 'WebFedOffsetPress'
        | 'WebFedFlexoPress'
        | 'FlatbedWideFormatPress'
        | 'RollFedWideFormatPress'
        | 'GuillotineCutter'
        | 'FlatbedDieCutter'
        | 'RotaryDieCutter'
        | 'DigitalCuttingTable'
        | 'Corrugator'
        | 'DieMaking'
    }
    /** @description Rotary die cutter setup */
    'rdc-setup': {
      time: components['schemas']['time-value']
      /**
       * Format: int32
       * @description Setup Layouts
       */
      layouts: number
      /** @enum {string} */
      type: 'Setup' | 'SetupLayouts' | 'GcSetup' | 'FdcSetup' | 'RdcSetup'
    }
    /** @description Rectangle object */
    rect: {
      /**
       * Format: double
       * @description X coordinate
       */
      x: number
      /**
       * Format: double
       * @description Y coordinate
       */
      y: number
      /**
       * Format: double
       * @description Width
       */
      width: number
      /**
       * Format: double
       * @description Height
       */
      height: number
    }
    /** @description Library reference */
    reference: {
      /** @description Unique ID of asset */
      id?: string
      /** @description Path to asset */
      path?: string
    }
    /** @description Region */
    region: {
      /** @enum {string} */
      type: 'Horizontal' | 'Vertical' | 'Rectangle'
      /** @enum {string} */
      alignX?: 'Left' | 'Right' | 'Center'
      /** @enum {string} */
      alignY?: 'Top' | 'Center' | 'Bottom' | 'Punch'
      /** @description Offset X */
      'offset-x'?: string
      /** @description Offset Y */
      'offset-y'?: string
      /** @description Size X */
      'size-x'?: string
      /** @description Size Y */
      'size-y'?: string
      /** @enum {string} */
      applied?: 'Always' | 'Perfecting'
    }
    /** @description Thing processing result */
    result: {
      /**
       * @description Status
       * @enum {string}
       */
      status: 'Pending' | 'Success' | 'Error'
      /** @description Processes involved */
      processes?: string[]
      time?: components['schemas']['time-info']
      cost?: components['schemas']['cost-info']
      /** @description Messages reported during processing */
      messages?: components['schemas']['message'][]
      /** @description Messages reported by a third-party external estimation engine during processing */
      'external-messages'?: components['schemas']['message'][]
      /** @enum {string} */
      type:
        | 'SheetFedDigitalPress'
        | 'WebFedDigitalPress'
        | 'SheetFedOffsetPress'
        | 'WebFedOffsetPress'
        | 'WebFedFlexoPress'
        | 'FlatbedWideFormatPress'
        | 'RollFedWideFormatPress'
        | 'GuillotineCutter'
        | 'FlatbedDieCutter'
        | 'RotaryDieCutter'
        | 'DigitalCuttingTable'
        | 'Corrugator'
        | 'DieMaking'
    } & (
      | components['schemas']['sfdp-result']
      | components['schemas']['wfdp-result']
      | components['schemas']['sfop-result']
      | components['schemas']['wfop-result']
      | components['schemas']['fwfp-result']
      | components['schemas']['rfwfp-result']
      | components['schemas']['fdc-result']
      | components['schemas']['rdc-result']
      | components['schemas']['dct-result']
      | components['schemas']['gc-result']
      | components['schemas']['dm-result']
      | components['schemas']['corrugator-result']
      | components['schemas']['wffp-result']
    )
    /** @description Roll-fed Wide Format Press Costing */
    'rfwfp-costing': {
      /** @description Currency */
      currency: {
        currencyCode?: string
        /** Format: int32 */
        defaultFractionDigits?: number
        /** Format: int32 */
        numericCode?: number
        displayName?: string
        symbol?: string
        numericCodeAsString?: string
      }
      rate: components['schemas']['rate']
      setup: components['schemas']['setup-layouts']
      /**
       * Format: double
       * @description Running Waste
       */
      'running-waste': number
      /** @enum {string} */
      type:
        | 'SfdpCosting'
        | 'WfdpCosting'
        | 'SfopCosting'
        | 'WfopCosting'
        | 'FwfpCosting'
        | 'WffpCosting'
        | 'RfwfpCosting'
        | 'GcCosting'
        | 'FdcCosting'
        | 'RdcCosting'
        | 'DctCosting'
        | 'CorrugatorCosting'
        | 'DmCosting'
    }
    /** @description Roll-fed Wide Format Press Result */
    'rfwfp-result': {
      /**
       * @description Status
       * @enum {string}
       */
      status: 'Pending' | 'Success' | 'Error'
      /** @description Processes involved */
      processes?: string[]
      time?: components['schemas']['time-info']
      cost?: components['schemas']['cost-info']
      /** @description Messages reported during processing */
      messages?: components['schemas']['message'][]
      /** @description Messages reported by a third-party external estimation engine during processing */
      'external-messages'?: components['schemas']['message'][]
      /** @description Process type */
      'process-type'?: string
      'setup-time'?: components['schemas']['time-info']
      /**
       * Format: int32
       * @description Total number of layouts being processed by this device including setup, waste, and produced layouts
       */
      'total-layouts'?: number
      /**
       * Format: int32
       * @description Number of setup layouts
       */
      'setup-layouts'?: number
      /**
       * Format: int32
       * @description Layouts wasted during the device run
       */
      'waste-layouts'?: number
      /** @description Colors being processed */
      colors?: components['schemas']['press-color'][]
      /** @enum {string} */
      side?: 'Front' | 'Back' | 'Both'
      'ink-cost'?: components['schemas']['cost-info']
      /** @description Total length of roll being processed */
      'roll-length'?: string
      /** @enum {string} */
      type:
        | 'SheetFedDigitalPress'
        | 'WebFedDigitalPress'
        | 'SheetFedOffsetPress'
        | 'WebFedOffsetPress'
        | 'WebFedFlexoPress'
        | 'FlatbedWideFormatPress'
        | 'RollFedWideFormatPress'
        | 'GuillotineCutter'
        | 'FlatbedDieCutter'
        | 'RotaryDieCutter'
        | 'DigitalCuttingTable'
        | 'Corrugator'
        | 'DieMaking'
    }
    /** @description Ribbon within a roll */
    ribbon: {
      /**
       * Format: double
       * @description X coordinate
       */
      x: number
      /**
       * Format: double
       * @description Y coordinate
       */
      y: number
      /**
       * Format: double
       * @description Width
       */
      width: number
      /**
       * Format: double
       * @description Height
       */
      height: number
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name?: string
      /**
       * Format: double
       * @description Gutter distance between child regions of this region
       */
      gutter?: number
      /** @enum {string} */
      type:
        | 'Roll'
        | 'Segment'
        | 'Lane'
        | 'Ribbon'
        | 'Component'
        | 'Blank'
        | 'Frame'
        | 'Strip'
        | 'LeadIn'
        | 'LeadOut'
    }
    /** @description Single continuous roll in the project */
    roll: {
      /**
       * Format: double
       * @description X coordinate
       */
      x: number
      /**
       * Format: double
       * @description Y coordinate
       */
      y: number
      /**
       * Format: double
       * @description Width
       */
      width: number
      /**
       * Format: double
       * @description Height
       */
      height: number
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name?: string
      /** @description Child regions */
      children?: components['schemas']['roll-region'][]
      /** @description Roll frames in this region */
      frames?: components['schemas']['frame'][]
      /** @enum {string} */
      type:
        | 'Roll'
        | 'Segment'
        | 'Lane'
        | 'Ribbon'
        | 'Component'
        | 'Blank'
        | 'Frame'
        | 'Strip'
        | 'LeadIn'
        | 'LeadOut'
      material?: components['schemas']['material']
    }
    /** @description Component item placed on the roll */
    'roll-component': {
      /**
       * Format: double
       * @description X coordinate
       */
      x: number
      /**
       * Format: double
       * @description Y coordinate
       */
      y: number
      /**
       * Format: double
       * @description Width
       */
      width: number
      /**
       * Format: double
       * @description Height
       */
      height: number
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name?: string
      /**
       * Format: int32
       * @description Number of times this component repeats sequentially within its parent region
       */
      repeats?: number
      /**
       * Format: double
       * @description Rotation of this component in degrees
       */
      rotation?: number
      /** @enum {string} */
      type:
        | 'Roll'
        | 'Segment'
        | 'Lane'
        | 'Ribbon'
        | 'Component'
        | 'Blank'
        | 'Frame'
        | 'Strip'
        | 'LeadIn'
        | 'LeadOut'
    }
    /** @description Roll-fed Wide Format Press */
    'roll-fed-wide-format-press': {
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name: string
      /**
       * Format: date-time
       * @description Created On
       */
      'created-on'?: string
      /**
       * Format: date-time
       * @description Modified On
       */
      'modified-on'?: string
      /** @description Version */
      version?: string
      /** @description Description */
      description?: string
      /** @description Notes */
      notes?: string
      /** @description External ID */
      'external-id'?: string
      /** @description Allow pass-through */
      'allow-pass-through'?: boolean
      /** @description Direct connections to other things */
      connections?: components['schemas']['connector'][]
      costing: components['schemas']['rfwfp-costing']
      capabilities: components['schemas']['press-capabilities']
      script?: components['schemas']['reference']
      /** @description Manufacturer */
      manufacturer: string
      'media-rules': components['schemas']['press-media-rules']
      placement: components['schemas']['press-placement']
      operation: components['schemas']['operation-modes']
      'front-units': components['schemas']['press-units']
      /** @description Single Pass Double Sided */
      'single-pass-double-sided'?: boolean
      'back-units'?: components['schemas']['press-units']
      /** @description Double Sided Speed Reduction */
      'double-sided-speed-reduction'?: string
      /** @description Gripper */
      gripper?: string
      /** @enum {string} */
      type:
        | 'SheetFedDigitalPress'
        | 'WebFedDigitalPress'
        | 'SheetFedOffsetPress'
        | 'WebFedOffsetPress'
        | 'WebFedFlexoPress'
        | 'FlatbedWideFormatPress'
        | 'RollFedWideFormatPress'
        | 'GuillotineCutter'
        | 'FlatbedDieCutter'
        | 'RotaryDieCutter'
        | 'DigitalCuttingTable'
        | 'Corrugator'
        | 'DieMaking'
      /** @enum {string} */
      'feed-type': 'Roll' | 'Sheet'
      'process-type': components['schemas']['process-type']
      /** @description Path */
      path?: string
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description Base object for all roll-based regions */
    'roll-region': {
      /**
       * Format: double
       * @description X coordinate
       */
      x: number
      /**
       * Format: double
       * @description Y coordinate
       */
      y: number
      /**
       * Format: double
       * @description Width
       */
      width: number
      /**
       * Format: double
       * @description Height
       */
      height: number
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name?: string
      /** @enum {string} */
      type:
        | 'Roll'
        | 'Segment'
        | 'Lane'
        | 'Ribbon'
        | 'Component'
        | 'Blank'
        | 'Frame'
        | 'Strip'
        | 'LeadIn'
        | 'LeadOut'
    } & (
      | components['schemas']['roll']
      | components['schemas']['segment']
      | components['schemas']['lane']
      | components['schemas']['ribbon']
      | components['schemas']['roll-component']
      | components['schemas']['blank']
      | components['schemas']['frame']
      | components['schemas']['strip']
      | components['schemas']['lead-in']
      | components['schemas']['lead-out']
    )
    /** @description Rotary die cutter */
    'rotary-die-cutter': {
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name: string
      /**
       * Format: date-time
       * @description Created On
       */
      'created-on'?: string
      /**
       * Format: date-time
       * @description Modified On
       */
      'modified-on'?: string
      /** @description Version */
      version?: string
      /** @description Description */
      description?: string
      /** @description Notes */
      notes?: string
      /** @description External ID */
      'external-id'?: string
      /** @description Allow pass-through */
      'allow-pass-through'?: boolean
      /** @description Direct connections to other things */
      connections?: components['schemas']['connector'][]
      costing: components['schemas']['rdc-costing']
      capabilities: components['schemas']['rdc-capabilities']
      script?: components['schemas']['reference']
      /** @description Manufacturer */
      manufacturer: string
      'media-rules': components['schemas']['rdc-media-rules']
      placement: components['schemas']['placement']
      /** @enum {string} */
      type:
        | 'SheetFedDigitalPress'
        | 'WebFedDigitalPress'
        | 'SheetFedOffsetPress'
        | 'WebFedOffsetPress'
        | 'WebFedFlexoPress'
        | 'FlatbedWideFormatPress'
        | 'RollFedWideFormatPress'
        | 'GuillotineCutter'
        | 'FlatbedDieCutter'
        | 'RotaryDieCutter'
        | 'DigitalCuttingTable'
        | 'Corrugator'
        | 'DieMaking'
      /** @enum {string} */
      'feed-type': 'Roll' | 'Sheet'
      'process-type': components['schemas']['process-type']
      /** @description Path */
      path?: string
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description Rotation settings */
    rotation: {
      /** @enum {string} */
      'rotation-type'?: 'Any' | 'Orthogonal' | 'None' | 'Custom'
      /** @description Custom rotation values */
      'custom-values'?: number[]
    }
    /** @description Placement Rule */
    rule: {
      /**
       * @description Reference anchor in the layout to base placement on
       * @enum {string}
       */
      anchor?: 'Content' | 'Sheet' | 'Plate'
      /**
       * @description Reference point in the anchor to align placement to
       * @enum {string}
       */
      'reference-point'?:
        | 'TopLeft'
        | 'TopCenter'
        | 'TopRight'
        | 'CenterLeft'
        | 'Center'
        | 'CenterRight'
        | 'BottomLeft'
        | 'BottomCenter'
        | 'BottomRight'
      /**
       * @description Reference point within parent to place this mark's reference point
       * @enum {string}
       */
      placement?:
        | 'TopLeft'
        | 'TopCenter'
        | 'TopRight'
        | 'CenterLeft'
        | 'Center'
        | 'CenterRight'
        | 'BottomLeft'
        | 'BottomCenter'
        | 'BottomRight'
      /** @description Additional horizontal offset to apply from horizontal placement location.  Positive scalar values move the mark to the right while negative values move the mark to the left within the parent item. */
      'horizontal-offset'?: string
      /** @description Additional vertical offset to apply from vertical placement location.  Positive scalar values move the mark up while negative values move the mark downward within the parent item. */
      'vertical-offset'?: string
      /** @description Use die template specification for sheet size and placement */
      'resize-sheet'?: boolean
    }
    /** @description Scalar Range */
    'scalar-range': {
      /** @description Start */
      start?: string
      /** @description End */
      end?: string
      /** @enum {string} */
      type:
        | 'IntegerRange'
        | 'DoubleRange'
        | 'ScalarRange'
        | 'StockWeightRange'
        | 'DateRange'
    }
    /** @description Segment within a roll */
    segment: {
      /**
       * Format: double
       * @description X coordinate
       */
      x: number
      /**
       * Format: double
       * @description Y coordinate
       */
      y: number
      /**
       * Format: double
       * @description Width
       */
      width: number
      /**
       * Format: double
       * @description Height
       */
      height: number
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name?: string
      /** @enum {string} */
      type:
        | 'Roll'
        | 'Segment'
        | 'Lane'
        | 'Ribbon'
        | 'Component'
        | 'Blank'
        | 'Frame'
        | 'Strip'
        | 'LeadIn'
        | 'LeadOut'
    }
    /** @description Setup */
    setup: {
      time: components['schemas']['time-value']
      /** @enum {string} */
      type: 'Setup' | 'SetupLayouts' | 'GcSetup' | 'FdcSetup' | 'RdcSetup'
    } & (
      | components['schemas']['setup-layouts']
      | components['schemas']['gc-setup']
      | components['schemas']['fdc-setup']
      | components['schemas']['rdc-setup']
    )
    /** @description Setup Layouts */
    'setup-layouts': {
      time: components['schemas']['time-value']
      /**
       * Format: int32
       * @description Setup Layouts
       */
      layouts: number
      /** @enum {string} */
      type: 'Setup' | 'SetupLayouts' | 'GcSetup' | 'FdcSetup' | 'RdcSetup'
    }
    /** @description Sheet-fed Digital Press Costing */
    'sfdp-costing': {
      /** @description Currency */
      currency: {
        currencyCode?: string
        /** Format: int32 */
        defaultFractionDigits?: number
        /** Format: int32 */
        numericCode?: number
        displayName?: string
        symbol?: string
        numericCodeAsString?: string
      }
      rate: components['schemas']['rate']
      setup: components['schemas']['setup-layouts']
      /**
       * Format: double
       * @description Running Waste
       */
      'running-waste': number
      /** @enum {string} */
      type:
        | 'SfdpCosting'
        | 'WfdpCosting'
        | 'SfopCosting'
        | 'WfopCosting'
        | 'FwfpCosting'
        | 'WffpCosting'
        | 'RfwfpCosting'
        | 'GcCosting'
        | 'FdcCosting'
        | 'RdcCosting'
        | 'DctCosting'
        | 'CorrugatorCosting'
        | 'DmCosting'
    }
    /** @description Sheet-fed Digital Press Result */
    'sfdp-result': {
      /**
       * @description Status
       * @enum {string}
       */
      status: 'Pending' | 'Success' | 'Error'
      /** @description Processes involved */
      processes?: string[]
      time?: components['schemas']['time-info']
      cost?: components['schemas']['cost-info']
      /** @description Messages reported during processing */
      messages?: components['schemas']['message'][]
      /** @description Messages reported by a third-party external estimation engine during processing */
      'external-messages'?: components['schemas']['message'][]
      /** @description Process type */
      'process-type'?: string
      'setup-time'?: components['schemas']['time-info']
      /**
       * Format: int32
       * @description Total number of layouts being processed by this device including setup, waste, and produced layouts
       */
      'total-layouts'?: number
      /**
       * Format: int32
       * @description Number of setup layouts
       */
      'setup-layouts'?: number
      /**
       * Format: int32
       * @description Layouts wasted during the device run
       */
      'waste-layouts'?: number
      /** @description Colors being processed */
      colors?: components['schemas']['press-color'][]
      /** @enum {string} */
      side?: 'Front' | 'Back' | 'Both'
      'ink-cost'?: components['schemas']['cost-info']
      /** @enum {string} */
      type:
        | 'SheetFedDigitalPress'
        | 'WebFedDigitalPress'
        | 'SheetFedOffsetPress'
        | 'WebFedOffsetPress'
        | 'WebFedFlexoPress'
        | 'FlatbedWideFormatPress'
        | 'RollFedWideFormatPress'
        | 'GuillotineCutter'
        | 'FlatbedDieCutter'
        | 'RotaryDieCutter'
        | 'DigitalCuttingTable'
        | 'Corrugator'
        | 'DieMaking'
    }
    /** @description Sheet-fed Offset Press Costing */
    'sfop-costing': {
      /** @description Currency */
      currency: {
        currencyCode?: string
        /** Format: int32 */
        defaultFractionDigits?: number
        /** Format: int32 */
        numericCode?: number
        displayName?: string
        symbol?: string
        numericCodeAsString?: string
      }
      rate: components['schemas']['rate']
      setup: components['schemas']['setup-layouts']
      /**
       * Format: double
       * @description Running Waste
       */
      'running-waste': number
      'setup-per-color': components['schemas']['setup-layouts']
      /**
       * Format: double
       * @description Minimum Cost Per Layout
       */
      'minimum-cost-per-layout': number
      'run-length-range': components['schemas']['integer-range']
      /** @enum {string} */
      type:
        | 'SfdpCosting'
        | 'WfdpCosting'
        | 'SfopCosting'
        | 'WfopCosting'
        | 'FwfpCosting'
        | 'WffpCosting'
        | 'RfwfpCosting'
        | 'GcCosting'
        | 'FdcCosting'
        | 'RdcCosting'
        | 'DctCosting'
        | 'CorrugatorCosting'
        | 'DmCosting'
    }
    /** @description Sheet-fed Offset Press Result */
    'sfop-result': {
      /**
       * @description Status
       * @enum {string}
       */
      status: 'Pending' | 'Success' | 'Error'
      /** @description Processes involved */
      processes?: string[]
      time?: components['schemas']['time-info']
      cost?: components['schemas']['cost-info']
      /** @description Messages reported during processing */
      messages?: components['schemas']['message'][]
      /** @description Messages reported by a third-party external estimation engine during processing */
      'external-messages'?: components['schemas']['message'][]
      /** @description Process type */
      'process-type'?: string
      'setup-time'?: components['schemas']['time-info']
      /**
       * Format: int32
       * @description Total number of layouts being processed by this device including setup, waste, and produced layouts
       */
      'total-layouts'?: number
      /**
       * Format: int32
       * @description Number of setup layouts
       */
      'setup-layouts'?: number
      /**
       * Format: int32
       * @description Layouts wasted during the device run
       */
      'waste-layouts'?: number
      /** @description Colors being processed */
      colors?: components['schemas']['press-color'][]
      /** @enum {string} */
      side?: 'Front' | 'Back' | 'Both'
      'ink-cost'?: components['schemas']['cost-info']
      'plate-cost'?: components['schemas']['cost-info']
      /**
       * Format: int32
       * @description Plate count
       */
      plates?: number
      /** @enum {string} */
      type:
        | 'SheetFedDigitalPress'
        | 'WebFedDigitalPress'
        | 'SheetFedOffsetPress'
        | 'WebFedOffsetPress'
        | 'WebFedFlexoPress'
        | 'FlatbedWideFormatPress'
        | 'RollFedWideFormatPress'
        | 'GuillotineCutter'
        | 'FlatbedDieCutter'
        | 'RotaryDieCutter'
        | 'DigitalCuttingTable'
        | 'Corrugator'
        | 'DieMaking'
    }
    /** @description Sheet-fed Digital Press */
    'sheet-fed-digital-press': {
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name: string
      /**
       * Format: date-time
       * @description Created On
       */
      'created-on'?: string
      /**
       * Format: date-time
       * @description Modified On
       */
      'modified-on'?: string
      /** @description Version */
      version?: string
      /** @description Description */
      description?: string
      /** @description Notes */
      notes?: string
      /** @description External ID */
      'external-id'?: string
      /** @description Allow pass-through */
      'allow-pass-through'?: boolean
      /** @description Direct connections to other things */
      connections?: components['schemas']['connector'][]
      costing: components['schemas']['sfdp-costing']
      capabilities: components['schemas']['press-capabilities']
      script?: components['schemas']['reference']
      /** @description Manufacturer */
      manufacturer: string
      'media-rules': components['schemas']['press-media-rules']
      placement: components['schemas']['press-placement']
      operation: components['schemas']['operation-modes']
      'front-units': components['schemas']['press-units']
      /** @description Single Pass Double Sided */
      'single-pass-double-sided'?: boolean
      'back-units'?: components['schemas']['press-units']
      /** @description Double Sided Speed Reduction */
      'double-sided-speed-reduction'?: string
      /** @description Gripper */
      gripper?: string
      /** @enum {string} */
      sheetTurn: 'Turn' | 'Tumble'
      /** @enum {string} */
      type:
        | 'SheetFedDigitalPress'
        | 'WebFedDigitalPress'
        | 'SheetFedOffsetPress'
        | 'WebFedOffsetPress'
        | 'WebFedFlexoPress'
        | 'FlatbedWideFormatPress'
        | 'RollFedWideFormatPress'
        | 'GuillotineCutter'
        | 'FlatbedDieCutter'
        | 'RotaryDieCutter'
        | 'DigitalCuttingTable'
        | 'Corrugator'
        | 'DieMaking'
      /** @enum {string} */
      'feed-type': 'Roll' | 'Sheet'
      'process-type': components['schemas']['process-type']
      /** @description Path */
      path?: string
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description Sheet-fed Offset Press */
    'sheet-fed-offset-press': {
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name: string
      /**
       * Format: date-time
       * @description Created On
       */
      'created-on'?: string
      /**
       * Format: date-time
       * @description Modified On
       */
      'modified-on'?: string
      /** @description Version */
      version?: string
      /** @description Description */
      description?: string
      /** @description Notes */
      notes?: string
      /** @description External ID */
      'external-id'?: string
      /** @description Allow pass-through */
      'allow-pass-through'?: boolean
      /** @description Direct connections to other things */
      connections?: components['schemas']['connector'][]
      costing: components['schemas']['sfop-costing']
      capabilities: components['schemas']['press-capabilities']
      script?: components['schemas']['reference']
      /** @description Manufacturer */
      manufacturer: string
      'media-rules': components['schemas']['press-media-rules']
      placement: components['schemas']['offset-press-placement']
      operation: components['schemas']['operation-modes']
      'front-units': components['schemas']['press-units']
      /** @description Single Pass Double Sided */
      'single-pass-double-sided'?: boolean
      'back-units'?: components['schemas']['press-units']
      /** @description Double Sided Speed Reduction */
      'double-sided-speed-reduction'?: string
      /** @description Gripper */
      gripper?: string
      /** @enum {string} */
      sheetTurn: 'Turn' | 'Tumble'
      /** @enum {string} */
      type:
        | 'SheetFedDigitalPress'
        | 'WebFedDigitalPress'
        | 'SheetFedOffsetPress'
        | 'WebFedOffsetPress'
        | 'WebFedFlexoPress'
        | 'FlatbedWideFormatPress'
        | 'RollFedWideFormatPress'
        | 'GuillotineCutter'
        | 'FlatbedDieCutter'
        | 'RotaryDieCutter'
        | 'DigitalCuttingTable'
        | 'Corrugator'
        | 'DieMaking'
      /** @enum {string} */
      'feed-type': 'Roll' | 'Sheet'
      'process-type': components['schemas']['process-type']
      /** @description Path */
      path?: string
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description Sheet position */
    'sheet-position': {
      /** @enum {string} */
      'align-x': 'Left' | 'Right' | 'Center'
      /** @enum {string} */
      'align-y': 'Top' | 'Center' | 'Bottom' | 'Punch'
      /** @description Offset X */
      'offset-x'?: string
      /** @description Offset Y */
      'offset-y'?: string
    }
    /** @description Sheet Reference */
    'sheet-ref': {
      media: components['schemas']['material-ref']
      /** @description Sheet ID */
      'sheet-id': string
    }
    /** @description Size object */
    size: {
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name: string
      /**
       * Format: date-time
       * @description Created On
       */
      'created-on'?: string
      /**
       * Format: date-time
       * @description Modified On
       */
      'modified-on'?: string
      /** @description Version */
      version?: string
      /** @description Description */
      description?: string
      /** @description Notes */
      notes?: string
      /** @description Size width */
      width: string
      /** @description Size height */
      height: string
      /** @description Path */
      path?: string
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description Sleeve Cylinder */
    'sleeve-cylinder': {
      circumference: components['schemas']['ScalarValue']
      /** @enum {string} */
      type: 'Gear' | 'Sleeve'
    }
    /** @description Spacing settings */
    spacing: {
      /** @description Single margin setting */
      margin?: string
      margins?: components['schemas']['margins']
      /** @enum {string} */
      type: 'Margins' | 'Uniform' | 'Bleed' | 'Tool'
    }
    /** @description Speed */
    speed: {
      /** @enum {string} */
      type: 'Fixed' | 'Stepped'
      'speed-units': components['schemas']['speed-units']
      /**
       * Format: double
       * @description Fixed Speed
       */
      'fixed-speed': number
      'stepped-speed'?: components['schemas']['stepped-speed']
    }
    /** @description Speed Units */
    'speed-units': {
      /** @enum {string} */
      units:
        | 'Sheets'
        | 'Feet'
        | 'Inches'
        | 'Meters'
        | 'Centimeters'
        | 'Millimeters'
        | 'MSI'
        | 'MSF'
        | 'SquareFeet'
        | 'SquareInches'
        | 'SquareMeters'
        | 'SquareCentimeters'
        | 'SquareMillimeters'
      /** @enum {string} */
      time: 'Milliseconds' | 'Seconds' | 'Minutes' | 'Hours' | 'Days'
    }
    /** @description Standard rule-based tiling */
    'standard-tiling': {
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name: string
      /**
       * Format: date-time
       * @description Created On
       */
      'created-on'?: string
      /**
       * Format: date-time
       * @description Modified On
       */
      'modified-on'?: string
      /** @description Version */
      version?: string
      /** @description Description */
      description?: string
      /** @description Notes */
      notes?: string
      /** @enum {string} */
      start?: 'TopLeft' | 'TopRight' | 'BottomLeft' | 'BottomRight'
      /** @enum {string} */
      order?:
        | 'SnakingVertical'
        | 'SnakingHorizontal'
        | 'ZigzagVertical'
        | 'ZigzagHorizontal'
      'horizontal-rule'?: components['schemas']['tiling-rule']
      'horizontal-method'?: components['schemas']['tiling-method']
      'vertical-rule'?: components['schemas']['tiling-rule']
      'vertical-method'?: components['schemas']['tiling-method']
      /** @enum {string} */
      type: 'Standard' | 'Custom'
      /** @description Path */
      path?: string
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description Steel rule */
    'steel-rule': {
      /**
       * Format: double
       * @description Cost
       */
      cost: number
      /**
       * @description Units
       * @enum {string}
       */
      units:
        | 'Feet'
        | 'Inches'
        | 'Meters'
        | 'Centimeters'
        | 'Millimeters'
        | 'Micrometers'
        | 'Thou'
        | 'Points'
      /** @enum {string} */
      type:
        | 'OperationMode'
        | 'MediaRule'
        | 'PressMediaRule'
        | 'DctRuleValue'
        | 'CorrugatorMode'
        | 'CorrugatorMediaRule'
        | 'SteelRule'
    }
    /** @description Steel rules */
    'steel-rules': {
      default: components['schemas']['steel-rule']
      /** @description Map containing key/values */
      map?: {
        [key: string]: components['schemas']['steel-rule']
      }
      /** @enum {string} */
      type:
        | 'OperationModes'
        | 'DctOperation'
        | 'CorrugatorOperation'
        | 'PressMediaRules'
        | 'GcMediaRules'
        | 'FdcMediaRules'
        | 'RdcMediaRules'
        | 'DctMediaRules'
        | 'CorrugatorMediaRules'
        | 'SteelRules'
    }
    /** @description Stepped Speed */
    'stepped-speed': {
      /** @description Stepped speed entries */
      entries?: components['schemas']['stepped-speed-entry'][]
    }
    /** @description Stepped Speed Entry */
    'stepped-speed-entry': {
      /**
       * Format: double
       * @description Range
       */
      range: number
      /**
       * Format: double
       * @description Speed
       */
      speed: number
    }
    /** @description Stock capabilities */
    'stock-capabilities': {
      /** @description Limit */
      limit: boolean
      /** @enum {string} */
      'limit-logic': 'Inclusively' | 'Exclusively'
      /** @description Library reference */
      'stock-types'?: {
        /** @description Unique ID of asset */
        id?: string
        /** @description Path to asset */
        path?: string
      }
      /** @description Library reference */
      'specific-stocks'?: {
        /** @description Unique ID of asset */
        id?: string
        /** @description Path to asset */
        path?: string
      }
    }
    /** @description Stock weight value and units */
    'stock-weight': {
      /**
       * Format: double
       * @description Weight
       */
      weight: number
      /** @enum {string} */
      units: 'GSM' | 'Lb'
    }
    /** @description Stock Weight Range */
    'stock-weight-range': {
      start?: components['schemas']['stock-weight']
      end?: components['schemas']['stock-weight']
      /** @enum {string} */
      type:
        | 'IntegerRange'
        | 'DoubleRange'
        | 'ScalarRange'
        | 'StockWeightRange'
        | 'DateRange'
    }
    /** @description Strip in the roll where no components can be placed */
    strip: {
      /**
       * Format: double
       * @description X coordinate
       */
      x: number
      /**
       * Format: double
       * @description Y coordinate
       */
      y: number
      /**
       * Format: double
       * @description Width
       */
      width: number
      /**
       * Format: double
       * @description Height
       */
      height: number
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name?: string
      /** @enum {string} */
      type:
        | 'Roll'
        | 'Segment'
        | 'Lane'
        | 'Ribbon'
        | 'Component'
        | 'Blank'
        | 'Frame'
        | 'Strip'
        | 'LeadIn'
        | 'LeadOut'
      /** @enum {string} */
      alignment?: 'Left' | 'Right' | 'Center'
    }
    /** @description Thing - base object for IoT model */
    thing: {
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name: string
      /**
       * Format: date-time
       * @description Created On
       */
      'created-on'?: string
      /**
       * Format: date-time
       * @description Modified On
       */
      'modified-on'?: string
      /** @description Version */
      version?: string
      /** @description Description */
      description?: string
      /** @description Notes */
      notes?: string
      /** @description External ID */
      'external-id'?: string
      /** @description Allow pass-through */
      'allow-pass-through'?: boolean
      /** @description Direct connections to other things */
      connections?: components['schemas']['connector'][]
      /** @enum {string} */
      type:
        | 'SheetFedDigitalPress'
        | 'WebFedDigitalPress'
        | 'SheetFedOffsetPress'
        | 'WebFedOffsetPress'
        | 'WebFedFlexoPress'
        | 'FlatbedWideFormatPress'
        | 'RollFedWideFormatPress'
        | 'GuillotineCutter'
        | 'FlatbedDieCutter'
        | 'RotaryDieCutter'
        | 'DigitalCuttingTable'
        | 'Corrugator'
        | 'DieMaking'
      /** @description Path */
      path?: string
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    } & (
      | components['schemas']['sheet-fed-digital-press']
      | components['schemas']['web-fed-digital-press']
      | components['schemas']['sheet-fed-offset-press']
      | components['schemas']['web-fed-offset-press']
      | components['schemas']['web-fed-flexo-press']
      | components['schemas']['flatbed-wide-format-press']
      | components['schemas']['roll-fed-wide-format-press']
      | components['schemas']['guillotine-cutter']
      | components['schemas']['flatbed-die-cutter']
      | components['schemas']['rotary-die-cutter']
      | components['schemas']['digital-cutting-table']
      | components['schemas']['die-making']
      | components['schemas']['corrugator']
    )
    /** @description Thing job */
    'thing-job': {
      /** @description Unique ID */
      id?: string
      result?: components['schemas']['result']
      /** @description Job trail ID */
      trail?: string
    }
    /** @description Single tile definition */
    tile: {
      /**
       * Format: double
       * @description X coordinate
       */
      x: number
      /**
       * Format: double
       * @description Y coordinate
       */
      y: number
      /**
       * Format: double
       * @description Width
       */
      width: number
      /**
       * Format: double
       * @description Height
       */
      height: number
      bleed: components['schemas']['margins']
      'left-edge'?: components['schemas']['tile-edge']
      'top-edge'?: components['schemas']['tile-edge']
      'right-edge'?: components['schemas']['tile-edge']
      'bottom-edge'?: components['schemas']['tile-edge']
    }
    /** @description Tile edge */
    'tile-edge': {
      /** @enum {string} */
      type: 'GapEdge' | 'OverlapEdge'
    } & (
      | components['schemas']['gap-tile-edge']
      | components['schemas']['overlap-tile-edge']
    )
    /** @description Tile component */
    'tile-flat': {
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name: string
      'die-design': components['schemas']['die-design']
      spacing: components['schemas']['spacing']
      offcut?: components['schemas']['offcut']
      tile: components['schemas']['tile']
      /** @enum {string} */
      type: 'Flat' | 'Bound' | 'Folded' | 'Tiled'
      /**
       * Format: int32
       * @description Tile index
       */
      index: number
      layouts?: components['schemas']['layouts']
      /**
       * Format: int32
       * @description Total placed count of this component across all layouts in the project
       */
      placed?: number
      /**
       * Format: int32
       * @description Total number of overruns above ordered quantity
       */
      overrun?: number
      /** @description Whether order quantity of this component has been fulfilled */
      fulfilled?: boolean
      /**
       * Format: int32
       * @description Total number of copies of this component being produced in the project
       */
      total?: number
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description Tiled part for creating tiled work */
    'tiled-part': {
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name: string
      /** @enum {string} */
      grain: 'Horizontal' | 'Vertical' | 'Consistent' | 'None'
      /** @description Part pages */
      pages: components['schemas']['page'][]
      /** @description Part process settings */
      'process-settings': components['schemas']['process-setting'][]
      rotation: components['schemas']['rotation']
      'die-design': components['schemas']['die-design']
      tiling: components['schemas']['tiling']
      /** @description Tiled components for this tiled part */
      tiles: components['schemas']['tile-flat'][]
      /** @enum {string} */
      type: 'Flat' | 'Bound' | 'Folded' | 'Tiled'
      material?: components['schemas']['material']
      /** @description Part processes */
      processes?: components['schemas']['process'][]
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description Tiling preset defining how tiling is performed */
    tiling: {
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name: string
      /**
       * Format: date-time
       * @description Created On
       */
      'created-on'?: string
      /**
       * Format: date-time
       * @description Modified On
       */
      'modified-on'?: string
      /** @description Version */
      version?: string
      /** @description Description */
      description?: string
      /** @description Notes */
      notes?: string
      /** @enum {string} */
      type: 'Standard' | 'Custom'
      /** @description Path */
      path?: string
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    } & (
      | components['schemas']['standard-tiling']
      | components['schemas']['custom-tiling']
    )
    /** @description Tiling method */
    'tiling-method': {
      /** @enum {string} */
      type: 'None' | 'Gap' | 'Overlap'
    } & (
      | components['schemas']['gap-tiling']
      | components['schemas']['overlap-tiling']
    )
    /** @description Tiling rule */
    'tiling-rule': {
      /** @enum {string} */
      type: 'None' | 'FixedNumber' | 'FixedSize' | 'VariableSizes'
    } & (
      | components['schemas']['fixed-number-rule']
      | components['schemas']['fixed-size-rule']
      | components['schemas']['variable-sizes-rule']
    )
    /** @description Time info */
    'time-info': {
      /**
       * Format: double
       * @description Time in seconds
       */
      seconds?: number
      /** @description Time in display format with hours, minutes, and seconds */
      display?: string
    }
    /** @description Time value */
    'time-value': {
      /** @enum {string} */
      units: 'Milliseconds' | 'Seconds' | 'Minutes' | 'Hours' | 'Days'
      /**
       * Format: double
       * @description Value
       */
      value: number
    }
    /** @description Trail-level aggregate stats */
    readonly 'trail-stats': {
      readonly time: components['schemas']['time-info']
      readonly cost: components['schemas']['cost-info']
      /** @description Per-process stats */
      readonly 'process-stats'?: components['schemas']['process-stats'][]
      /**
       * Format: int32
       * @description Total number of layouts needed including ordered run lengths, setup layouts, and waste layouts
       */
      readonly 'total-layouts'?: number
      /**
       * Format: int32
       * @description Total number of setup layouts
       */
      readonly 'setup-layouts'?: number
      /**
       * Format: int32
       * @description Total number of waste layouts during processing
       */
      readonly 'waste-layouts'?: number
    }
    /** @description Trim settings */
    trim: {
      /** @description Spine trim */
      'spine-trim'?: string
      /** @description Jog trim */
      'jog-trim'?: string
      /** @description Face trim */
      'face-trim'?: string
      /** @description Non-jog trim */
      'non-jog-trim'?: string
      /** @enum {string} */
      'lip-type'?: 'Auto' | 'Front' | 'Back'
      /** @description Lip */
      lip?: string
    }
    /** @description Variable sizes tiling rule */
    'variable-sizes-rule': {
      /** @description Custom sizes to use to create tiles in the given dimension */
      sizes: number[]
      /** @enum {string} */
      type: 'None' | 'FixedNumber' | 'FixedSize' | 'VariableSizes'
    }
    /** @description Velocity */
    velocity: {
      /**
       * Format: double
       * @description Value
       */
      value: number
      /** @enum {string} */
      units:
        | 'MetersPerSecond'
        | 'CentimetersPerSecond'
        | 'MillimetersPerSecond'
        | 'FeetPerSecond'
        | 'InchesPerSecond'
    }
    /** @description Web-fed Digital Press */
    'web-fed-digital-press': {
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name: string
      /**
       * Format: date-time
       * @description Created On
       */
      'created-on'?: string
      /**
       * Format: date-time
       * @description Modified On
       */
      'modified-on'?: string
      /** @description Version */
      version?: string
      /** @description Description */
      description?: string
      /** @description Notes */
      notes?: string
      /** @description External ID */
      'external-id'?: string
      /** @description Allow pass-through */
      'allow-pass-through'?: boolean
      /** @description Direct connections to other things */
      connections?: components['schemas']['connector'][]
      costing: components['schemas']['wfdp-costing']
      capabilities: components['schemas']['press-capabilities']
      script?: components['schemas']['reference']
      /** @description Manufacturer */
      manufacturer: string
      'media-rules': components['schemas']['press-media-rules']
      placement: components['schemas']['press-placement']
      operation: components['schemas']['operation-modes']
      'front-units': components['schemas']['press-units']
      /** @description Single Pass Double Sided */
      'single-pass-double-sided'?: boolean
      'back-units'?: components['schemas']['press-units']
      /** @description Double Sided Speed Reduction */
      'double-sided-speed-reduction'?: string
      /** @description Gripper */
      gripper?: string
      /** @enum {string} */
      type:
        | 'SheetFedDigitalPress'
        | 'WebFedDigitalPress'
        | 'SheetFedOffsetPress'
        | 'WebFedOffsetPress'
        | 'WebFedFlexoPress'
        | 'FlatbedWideFormatPress'
        | 'RollFedWideFormatPress'
        | 'GuillotineCutter'
        | 'FlatbedDieCutter'
        | 'RotaryDieCutter'
        | 'DigitalCuttingTable'
        | 'Corrugator'
        | 'DieMaking'
      /** @enum {string} */
      'feed-type': 'Roll' | 'Sheet'
      'process-type': components['schemas']['process-type']
      /** @description Path */
      path?: string
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description Web-fed Flexo Press */
    'web-fed-flexo-press': {
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name: string
      /**
       * Format: date-time
       * @description Created On
       */
      'created-on'?: string
      /**
       * Format: date-time
       * @description Modified On
       */
      'modified-on'?: string
      /** @description Version */
      version?: string
      /** @description Description */
      description?: string
      /** @description Notes */
      notes?: string
      /** @description External ID */
      'external-id'?: string
      /** @description Allow pass-through */
      'allow-pass-through'?: boolean
      /** @description Direct connections to other things */
      connections?: components['schemas']['connector'][]
      costing: components['schemas']['wffp-costing']
      capabilities: components['schemas']['press-capabilities']
      script?: components['schemas']['reference']
      /** @description Manufacturer */
      manufacturer: string
      'media-rules': components['schemas']['press-media-rules']
      placement: components['schemas']['flexo-press-placement']
      operation: components['schemas']['operation-modes']
      'front-units': components['schemas']['press-units']
      /** @description Single Pass Double Sided */
      'single-pass-double-sided'?: boolean
      'back-units'?: components['schemas']['press-units']
      /** @description Double Sided Speed Reduction */
      'double-sided-speed-reduction'?: string
      /** @description Gripper */
      gripper?: string
      /** @description Cylinders this press can use */
      cylinders?: components['schemas']['cylinder'][]
      /** @enum {string} */
      type:
        | 'SheetFedDigitalPress'
        | 'WebFedDigitalPress'
        | 'SheetFedOffsetPress'
        | 'WebFedOffsetPress'
        | 'WebFedFlexoPress'
        | 'FlatbedWideFormatPress'
        | 'RollFedWideFormatPress'
        | 'GuillotineCutter'
        | 'FlatbedDieCutter'
        | 'RotaryDieCutter'
        | 'DigitalCuttingTable'
        | 'Corrugator'
        | 'DieMaking'
      /** @enum {string} */
      'feed-type': 'Roll' | 'Sheet'
      'process-type': components['schemas']['process-type']
      /** @description Path */
      path?: string
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description Web-fed Offset Press */
    'web-fed-offset-press': {
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name: string
      /**
       * Format: date-time
       * @description Created On
       */
      'created-on'?: string
      /**
       * Format: date-time
       * @description Modified On
       */
      'modified-on'?: string
      /** @description Version */
      version?: string
      /** @description Description */
      description?: string
      /** @description Notes */
      notes?: string
      /** @description External ID */
      'external-id'?: string
      /** @description Allow pass-through */
      'allow-pass-through'?: boolean
      /** @description Direct connections to other things */
      connections?: components['schemas']['connector'][]
      costing: components['schemas']['wfop-costing']
      capabilities: components['schemas']['press-capabilities']
      script?: components['schemas']['reference']
      /** @description Manufacturer */
      manufacturer: string
      'media-rules': components['schemas']['press-media-rules']
      placement: components['schemas']['offset-press-placement']
      operation: components['schemas']['operation-modes']
      'front-units': components['schemas']['press-units']
      /** @description Single Pass Double Sided */
      'single-pass-double-sided'?: boolean
      'back-units'?: components['schemas']['press-units']
      /** @description Double Sided Speed Reduction */
      'double-sided-speed-reduction'?: string
      /** @description Gripper */
      gripper?: string
      /** @enum {string} */
      type:
        | 'SheetFedDigitalPress'
        | 'WebFedDigitalPress'
        | 'SheetFedOffsetPress'
        | 'WebFedOffsetPress'
        | 'WebFedFlexoPress'
        | 'FlatbedWideFormatPress'
        | 'RollFedWideFormatPress'
        | 'GuillotineCutter'
        | 'FlatbedDieCutter'
        | 'RotaryDieCutter'
        | 'DigitalCuttingTable'
        | 'Corrugator'
        | 'DieMaking'
      /** @enum {string} */
      'feed-type': 'Roll' | 'Sheet'
      'process-type': components['schemas']['process-type']
      /** @description Path */
      path?: string
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description Web-fed Digital Press Costing */
    'wfdp-costing': {
      /** @description Currency */
      currency: {
        currencyCode?: string
        /** Format: int32 */
        defaultFractionDigits?: number
        /** Format: int32 */
        numericCode?: number
        displayName?: string
        symbol?: string
        numericCodeAsString?: string
      }
      rate: components['schemas']['rate']
      setup: components['schemas']['setup-layouts']
      /**
       * Format: double
       * @description Running Waste
       */
      'running-waste': number
      /** @enum {string} */
      type:
        | 'SfdpCosting'
        | 'WfdpCosting'
        | 'SfopCosting'
        | 'WfopCosting'
        | 'FwfpCosting'
        | 'WffpCosting'
        | 'RfwfpCosting'
        | 'GcCosting'
        | 'FdcCosting'
        | 'RdcCosting'
        | 'DctCosting'
        | 'CorrugatorCosting'
        | 'DmCosting'
    }
    /** @description Web-fed Digital Press Result */
    'wfdp-result': {
      /**
       * @description Status
       * @enum {string}
       */
      status: 'Pending' | 'Success' | 'Error'
      /** @description Processes involved */
      processes?: string[]
      time?: components['schemas']['time-info']
      cost?: components['schemas']['cost-info']
      /** @description Messages reported during processing */
      messages?: components['schemas']['message'][]
      /** @description Messages reported by a third-party external estimation engine during processing */
      'external-messages'?: components['schemas']['message'][]
      /** @description Process type */
      'process-type'?: string
      'setup-time'?: components['schemas']['time-info']
      /**
       * Format: int32
       * @description Total number of layouts being processed by this device including setup, waste, and produced layouts
       */
      'total-layouts'?: number
      /**
       * Format: int32
       * @description Number of setup layouts
       */
      'setup-layouts'?: number
      /**
       * Format: int32
       * @description Layouts wasted during the device run
       */
      'waste-layouts'?: number
      /** @description Colors being processed */
      colors?: components['schemas']['press-color'][]
      /** @enum {string} */
      side?: 'Front' | 'Back' | 'Both'
      'ink-cost'?: components['schemas']['cost-info']
      /** @description Total length of roll being processed */
      'roll-length'?: string
      /** @enum {string} */
      type:
        | 'SheetFedDigitalPress'
        | 'WebFedDigitalPress'
        | 'SheetFedOffsetPress'
        | 'WebFedOffsetPress'
        | 'WebFedFlexoPress'
        | 'FlatbedWideFormatPress'
        | 'RollFedWideFormatPress'
        | 'GuillotineCutter'
        | 'FlatbedDieCutter'
        | 'RotaryDieCutter'
        | 'DigitalCuttingTable'
        | 'Corrugator'
        | 'DieMaking'
    }
    /** @description Web-fed Flexo Press Costing */
    'wffp-costing': {
      /** @description Currency */
      currency: {
        currencyCode?: string
        /** Format: int32 */
        defaultFractionDigits?: number
        /** Format: int32 */
        numericCode?: number
        displayName?: string
        symbol?: string
        numericCodeAsString?: string
      }
      rate: components['schemas']['rate']
      setup: components['schemas']['setup-layouts']
      /**
       * Format: double
       * @description Running Waste
       */
      'running-waste': number
      'setup-per-color': components['schemas']['setup-layouts']
      /** @enum {string} */
      type:
        | 'SfdpCosting'
        | 'WfdpCosting'
        | 'SfopCosting'
        | 'WfopCosting'
        | 'FwfpCosting'
        | 'WffpCosting'
        | 'RfwfpCosting'
        | 'GcCosting'
        | 'FdcCosting'
        | 'RdcCosting'
        | 'DctCosting'
        | 'CorrugatorCosting'
        | 'DmCosting'
    }
    /** @description Web-fed Flexo Press Result */
    'wffp-result': {
      /**
       * @description Status
       * @enum {string}
       */
      status: 'Pending' | 'Success' | 'Error'
      /** @description Processes involved */
      processes?: string[]
      time?: components['schemas']['time-info']
      cost?: components['schemas']['cost-info']
      /** @description Messages reported during processing */
      messages?: components['schemas']['message'][]
      /** @description Messages reported by a third-party external estimation engine during processing */
      'external-messages'?: components['schemas']['message'][]
      /** @description Process type */
      'process-type'?: string
      'setup-time'?: components['schemas']['time-info']
      /**
       * Format: int32
       * @description Total number of layouts being processed by this device including setup, waste, and produced layouts
       */
      'total-layouts'?: number
      /**
       * Format: int32
       * @description Number of setup layouts
       */
      'setup-layouts'?: number
      /**
       * Format: int32
       * @description Layouts wasted during the device run
       */
      'waste-layouts'?: number
      /** @description Colors being processed */
      colors?: components['schemas']['press-color'][]
      /** @enum {string} */
      side?: 'Front' | 'Back' | 'Both'
      'ink-cost'?: components['schemas']['cost-info']
      'plate-cost'?: components['schemas']['cost-info']
      /**
       * Format: int32
       * @description Plate count
       */
      plates?: number
      /** @description Total length of roll being processed */
      'roll-length'?: string
      /** @enum {string} */
      type:
        | 'SheetFedDigitalPress'
        | 'WebFedDigitalPress'
        | 'SheetFedOffsetPress'
        | 'WebFedOffsetPress'
        | 'WebFedFlexoPress'
        | 'FlatbedWideFormatPress'
        | 'RollFedWideFormatPress'
        | 'GuillotineCutter'
        | 'FlatbedDieCutter'
        | 'RotaryDieCutter'
        | 'DigitalCuttingTable'
        | 'Corrugator'
        | 'DieMaking'
    }
    /** @description Web-fed Offset Press Costing */
    'wfop-costing': {
      /** @description Currency */
      currency: {
        currencyCode?: string
        /** Format: int32 */
        defaultFractionDigits?: number
        /** Format: int32 */
        numericCode?: number
        displayName?: string
        symbol?: string
        numericCodeAsString?: string
      }
      rate: components['schemas']['rate']
      setup: components['schemas']['setup-layouts']
      /**
       * Format: double
       * @description Running Waste
       */
      'running-waste': number
      'setup-per-color': components['schemas']['setup-layouts']
      /**
       * Format: double
       * @description Minimum Cost Per Layout
       */
      'minimum-cost-per-layout': number
      'run-length-range': components['schemas']['integer-range']
      /** @enum {string} */
      type:
        | 'SfdpCosting'
        | 'WfdpCosting'
        | 'SfopCosting'
        | 'WfopCosting'
        | 'FwfpCosting'
        | 'WffpCosting'
        | 'RfwfpCosting'
        | 'GcCosting'
        | 'FdcCosting'
        | 'RdcCosting'
        | 'DctCosting'
        | 'CorrugatorCosting'
        | 'DmCosting'
    }
    /** @description Web-fed Offset Press Result */
    'wfop-result': {
      /**
       * @description Status
       * @enum {string}
       */
      status: 'Pending' | 'Success' | 'Error'
      /** @description Processes involved */
      processes?: string[]
      time?: components['schemas']['time-info']
      cost?: components['schemas']['cost-info']
      /** @description Messages reported during processing */
      messages?: components['schemas']['message'][]
      /** @description Messages reported by a third-party external estimation engine during processing */
      'external-messages'?: components['schemas']['message'][]
      /** @description Process type */
      'process-type'?: string
      'setup-time'?: components['schemas']['time-info']
      /**
       * Format: int32
       * @description Total number of layouts being processed by this device including setup, waste, and produced layouts
       */
      'total-layouts'?: number
      /**
       * Format: int32
       * @description Number of setup layouts
       */
      'setup-layouts'?: number
      /**
       * Format: int32
       * @description Layouts wasted during the device run
       */
      'waste-layouts'?: number
      /** @description Colors being processed */
      colors?: components['schemas']['press-color'][]
      /** @enum {string} */
      side?: 'Front' | 'Back' | 'Both'
      'ink-cost'?: components['schemas']['cost-info']
      'plate-cost'?: components['schemas']['cost-info']
      /**
       * Format: int32
       * @description Plate count
       */
      plates?: number
      /** @description Total length of roll being processed */
      'roll-length'?: string
      /** @enum {string} */
      type:
        | 'SheetFedDigitalPress'
        | 'WebFedDigitalPress'
        | 'SheetFedOffsetPress'
        | 'WebFedOffsetPress'
        | 'WebFedFlexoPress'
        | 'FlatbedWideFormatPress'
        | 'RollFedWideFormatPress'
        | 'GuillotineCutter'
        | 'FlatbedDieCutter'
        | 'RotaryDieCutter'
        | 'DigitalCuttingTable'
        | 'Corrugator'
        | 'DieMaking'
    }
    /** @description ZCC connection settings */
    'zcc-connection-settings': {
      /** @description Hostname */
      hostname: string
      /**
       * Format: int32
       * @description Port
       */
      port: number
      /**
       * Format: int32
       * @description Timeout
       */
      timeout: number
      /**
       * Format: int32
       * @description ZccVersion
       */
      zccVersion?: number
      /** @description ProcessName */
      processName?: string
      /** @description ProcessGUID */
      processGUID?: string
    }
    FormDataContentDisposition: {
      type?: string
      parameters?: {
        [key: string]: string
      }
      fileName?: string
      /** Format: date-time */
      creationDate?: string
      /** Format: date-time */
      modificationDate?: string
      /** Format: date-time */
      readDate?: string
      /** Format: int64 */
      size?: number
      name?: string
    }
    /** @description Edit project action resource */
    EditProjectResource: {
      /** @description Job ID */
      id: string
      /** @description Job name */
      name?: string
      /** @description Job contact person */
      contact?: string
      /** @description Job phone number */
      phone?: string
      /** @description Job client name */
      client?: string
      /** @description Job notes */
      notes?: string
      /** @description Job units */
      units?: string
      /**
       * Format: int32
       * @description ID of action resource is being applied to (Hot Folders only)
       */
      idref?: number
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description Export JSON report action resource */
    ExportJsonReportResource: {
      /**
       * Format: int32
       * @description ID of action resource is being applied to (Hot Folders only)
       */
      idref?: number
      /** @description Full path to store output file(s).  When not set, the output file(s) will be stored on the server and download link(s) will be provided in the response. */
      path?: string
      /** @description Name of preset to use */
      preset?: string
    }
    /** @description Export XML report action resource */
    ExportXmlReportResource: {
      /**
       * Format: int32
       * @description ID of action resource is being applied to (Hot Folders only)
       */
      idref?: number
      /** @description Full path to store output file(s).  When not set, the output file(s) will be stored on the server and download link(s) will be provided in the response. */
      path?: string
      /** @description Name of preset to use */
      preset?: string
    }
    /** @description Export Cover Sheet action resource */
    ExportCoverSheetResource: {
      /**
       * Format: int32
       * @description ID of action resource is being applied to (Hot Folders only)
       */
      idref?: number
      /** @description Full path to store output file(s).  When not set, the output file(s) will be stored on the server and download link(s) will be provided in the response. */
      path?: string
      /** @description Name of preset to use */
      preset?: string
    }
    /** @description Export CSV report action resource */
    ExportCsvReportResource: {
      /**
       * Format: int32
       * @description ID of action resource is being applied to (Hot Folders only)
       */
      idref?: number
      /** @description Full path to store output file(s).  When not set, the output file(s) will be stored on the server and download link(s) will be provided in the response. */
      path?: string
      /** @description Name of preset to use */
      preset?: string
    }
    /** @description Export CFF2 layout action resource */
    ExportCff2LayoutResource: {
      /**
       * Format: int32
       * @description ID of action resource is being applied to (Hot Folders only)
       */
      idref?: number
      /** @description Full path to store output file(s).  When not set, the output file(s) will be stored on the server and download link(s) will be provided in the response. */
      path?: string
      /** @description Name of preset to use */
      preset?: string
    }
    /** @description Export DXF layout action resource */
    ExportDxfLayoutResource: {
      /**
       * Format: int32
       * @description ID of action resource is being applied to (Hot Folders only)
       */
      idref?: number
      /** @description Full path to store output file(s).  When not set, the output file(s) will be stored on the server and download link(s) will be provided in the response. */
      path?: string
      /** @description Name of preset to use */
      preset?: string
    }
    /** @description Export MFG layout action resource */
    ExportMfgLayoutResource: {
      /**
       * Format: int32
       * @description ID of action resource is being applied to (Hot Folders only)
       */
      idref?: number
      /** @description Full path to store output file(s).  When not set, the output file(s) will be stored on the server and download link(s) will be provided in the response. */
      path?: string
      /** @description Name of preset to use */
      preset?: string
    }
    /** @description Export PDF layout action resource */
    ExportPdfLayoutResource: {
      /**
       * Format: int32
       * @description ID of action resource is being applied to (Hot Folders only)
       */
      idref?: number
      /** @description Full path to store output file(s).  When not set, the output file(s) will be stored on the server and download link(s) will be provided in the response. */
      path?: string
      /** @description Name of preset to use */
      preset?: string
    }
    /** @description Export Zund Cut Center layout action resource */
    ExportZccLayoutResource: {
      /**
       * Format: int32
       * @description ID of action resource is being applied to (Hot Folders only)
       */
      idref?: number
      /** @description Full path to store output file(s).  When not set, the output file(s) will be stored on the server and download link(s) will be provided in the response. */
      path?: string
      /** @description Name of preset to use */
      preset?: string
    }
    /** @description Export JDF HP action resource */
    ExportHpJdfResource: {
      /**
       * Format: int32
       * @description ID of action resource is being applied to (Hot Folders only)
       */
      idref?: number
      /** @description Full path to store output file(s).  When not set, the output file(s) will be stored on the server and download link(s) will be provided in the response. */
      path?: string
      /** @description Name of preset to use */
      preset?: string
    }
    /** @description Export JDF action resource */
    ExportJdfResource: {
      /**
       * Format: int32
       * @description ID of action resource is being applied to (Hot Folders only)
       */
      idref?: number
      /** @description Full path to store output file(s).  When not set, the output file(s) will be stored on the server and download link(s) will be provided in the response. */
      path?: string
      /** @description Name of preset to use */
      preset?: string
    }
    /** @description Export cutting JDF action resource */
    ExportCuttingJdfResource: {
      /**
       * Format: int32
       * @description ID of action resource is being applied to (Hot Folders only)
       */
      idref?: number
      /** @description Full path to store output file(s).  When not set, the output file(s) will be stored on the server and download link(s) will be provided in the response. */
      path?: string
      /** @description Name of preset to use */
      preset?: string
    }
    /** @description Export Kongsberg JDF action resource */
    ExportKongsbergJdfResource: {
      /**
       * Format: int32
       * @description ID of action resource is being applied to (Hot Folders only)
       */
      idref?: number
      /** @description Full path to store output file(s).  When not set, the output file(s) will be stored on the server and download link(s) will be provided in the response. */
      path?: string
      /** @description Name of preset to use */
      preset?: string
    }
    /** @description Export PDF action resource */
    ExportPdfResource: {
      /**
       * Format: int32
       * @description ID of action resource is being applied to (Hot Folders only)
       */
      idref?: number
      /** @description Full path to store output file(s).  When not set, the output file(s) will be stored on the server and download link(s) will be provided in the response. */
      path?: string
      /** @description Name of preset to use */
      preset?: string
    }
    /** @description Export PDF report action resource */
    ExportPdfReportResource: {
      /**
       * Format: int32
       * @description ID of action resource is being applied to (Hot Folders only)
       */
      idref?: number
      /** @description Full path to store output file(s).  When not set, the output file(s) will be stored on the server and download link(s) will be provided in the response. */
      path?: string
      /** @description Name of preset to use */
      preset?: string
    }
    /** @description Export Vector separation action resource */
    ExportVectorSeparationResource: {
      /**
       * Format: int32
       * @description ID of action resource is being applied to (Hot Folders only)
       */
      idref?: number
      /** @description Full path to store output file(s).  When not set, the output file(s) will be stored on the server and download link(s) will be provided in the response. */
      path?: string
      /** @description Name of preset to use */
      preset?: string
    }
    /** @description Export Tiling report action resource */
    ExportTilingReportResource: {
      /**
       * Format: int32
       * @description ID of action resource is being applied to (Hot Folders only)
       */
      idref?: number
      /** @description Full path to store output file(s).  When not set, the output file(s) will be stored on the server and download link(s) will be provided in the response. */
      path?: string
      /** @description Name of preset to use */
      preset?: string
    }
    /** @description Import die template action resource */
    ImportDieTemplateResource: {
      /**
       * Format: int32
       * @description ID of action resource is being applied to (Hot Folders only)
       */
      idref?: number
      /** @description Full path of file name */
      path: string
      /** @description Name of die template preset to use */
      preset?: string
    }
    /** @description Actions to apply after Imposition AI results are applied to the job */
    ApplyingResultsEntity: {
      /** @description Split bleed overlaps on apply */
      'split-overlaps-on-apply'?: boolean
      /** @description Group products on apply */
      'group-products-on-apply'?: boolean
      /** @description Ensure margins placement */
      'ensure-margins-placement'?: boolean
    }
    /** @description Impose action resource */
    ImposeResource: {
      /**
       * Format: int32
       * @description ID of action resource is being applied to (Hot Folders only)
       */
      idref?: number
      /** @description Names of products to include.  When not specified all products in the job are included */
      products?: string[]
      /** @description Optional profiles to use when running Imposition AI.  The default profile is used when this field is not set */
      profiles?: string[]
      /** @description Optional inline fully defined profiles to use when running Imposition AI. */
      'profiles-inline'?: components['schemas']['ImpositionAiProfileEntity'][]
      /**
       * Format: int32
       * @description Number of minutes to allow this action to run before stopping.  Default is 60 minutes when not specified.
       */
      'stop-minutes'?: number
      /** @description Names of templates to use during Impose */
      templates: string[]
    }
    /** @description Imposition AI Profile preset */
    ImpositionAiProfileEntity: {
      /** @description Name of library item */
      name: string
      /** @description Unique ID of this item (auto-generated, read-only) */
      id?: string
      /** @description Optional external ID of media item */
      'external-id'?: string
      /** @description Asset description */
      description?: string
      strategies?: components['schemas']['StrategiesEntity']
      'strip-options'?: components['schemas']['StripOptionsEntity']
      'layout-options'?: components['schemas']['LayoutOptionsEntity']
      'plan-options'?: components['schemas']['PlanOptionsEntity']
      'web-options'?: components['schemas']['WebOptionsEntity']
      'applying-options'?: components['schemas']['ApplyingResultsEntity']
      'plan-rules'?: components['schemas']['RuleGroupEntity']
      /** @description Scripts */
      scripts?: components['schemas']['LibraryItemEntity'][]
    }
    /** @description Settings used for creating each layout */
    LayoutOptionsEntity: {
      /**
       * @description Sheet fill
       * @enum {string}
       */
      'sheet-fill'?: 'Balanced' | 'Min' | 'Max'
      /**
       * Format: int32
       * @description Limit number of unique products per layout
       */
      'limit-unique-products'?: number
      /** @description Allow multiple dies per layout */
      'allow-multiple-dies-per-layout'?: boolean
      /** @description Require product die name to match when populating die templates */
      'die-name-matching'?: boolean
      /** @description Allow bleed in gripper */
      'allow-bleed-in-gripper'?: boolean
      /** @description Allow use of work and turn */
      'allow-work-and-turn'?: boolean
      /** @description Allow use of work and tumble */
      'allow-work-and-tumble'?: boolean
      /** @description Use derived sheets */
      'use-derived-sheets'?: boolean
      'ordered-placement'?: components['schemas']['OrderedPlacementEntity']
    }
    /** @description Settings for ordered placement in each layout */
    OrderedPlacementEntity: {
      /** @description Favor placing products in order in each layout */
      'favor-ordered-placement'?: boolean
      /**
       * @description The starting corner for placement order
       * @enum {string}
       */
      'start-corner'?:
        | 'TopLeft'
        | 'TopCenter'
        | 'TopRight'
        | 'CenterLeft'
        | 'Center'
        | 'CenterRight'
        | 'BottomLeft'
        | 'BottomCenter'
        | 'BottomRight'
      /**
       * @description The order method to use for placement
       * @enum {string}
       */
      'order-method'?:
        | 'VerticalZigzag'
        | 'HorizontalZigzag'
        | 'VerticalSnake'
        | 'HorizontalSnake'
    }
    /** @description Settings used for plans */
    PlanOptionsEntity: {
      /**
       * @description Plan mode
       * @enum {string}
       */
      'plan-mode'?:
        | 'Standard'
        | 'LayoutByLayout'
        | 'Sequential'
        | 'CutAndStack'
        | 'Lanes'
      /**
       * Format: int32
       * @description Stack size
       */
      'stack-size'?: number
      /**
       * @description Finishing
       * @enum {string}
       */
      finishing?: 'Inline' | 'Nearline'
      /**
       * @description Stacking order
       * @enum {string}
       */
      'stacking-order'?: 'Normal' | 'Reverse'
      /** @description Allow product spanning */
      'allow-product-spanning'?: boolean
      /** @description Allow multiple passes through press devices during printing */
      'allow-multiple-press-passes'?: boolean
      /**
       * Format: int32
       * @description Fixed run length
       */
      'fixed-run-length'?: number
    }
    /** @description Rule defining matching criteria for on one or more properties */
    RuleEntity: {
      /**
       * @description Rule type.  'Item' for item rules and 'Group' for group rules
       * @enum {string}
       */
      type: 'Item' | 'Group'
    } & (
      | components['schemas']['RuleItemEntity']
      | components['schemas']['RuleGroupEntity']
    )
    /** @description Group of rules */
    RuleGroupEntity: {
      /**
       * @description Logic operation to apply when evaluating all rules in this group
       * @enum {string}
       */
      logic?: 'And' | 'Or'
      /** @description Rules in this group */
      rules?: components['schemas']['RuleEntity'][]
      /**
       * @description Rule type.  'Item' for item rules and 'Group' for group rules
       * @enum {string}
       */
      type: 'Item' | 'Group'
    }
    /** @description Rule item */
    RuleItemEntity: {
      /** @description Name of item being evaluated */
      name?: string
      /**
       * @description Value type of item being evaluated
       * @enum {string}
       */
      'value-type'?:
        | 'String'
        | 'Integer'
        | 'Double'
        | 'Boolean'
        | 'Scalar'
        | 'Size'
        | 'Date'
        | 'IntegerRange'
        | 'DoubleRange'
        | 'ScalarRange'
        | 'DateRange'
        | 'Margins'
        | 'PlacementRule'
        | 'Enum'
        | 'Matcher'
        | 'TextList'
        | 'List'
        | 'AssetRef'
      /**
       * @description Rule operator
       * @enum {string}
       */
      operator?:
        | 'Equals'
        | 'NotEquals'
        | 'Within'
        | 'NotWithin'
        | 'CommonItems'
        | 'NoCommonItems'
        | 'IsBlank'
        | 'IsTrue'
        | 'IsFalse'
      /**
       * Format: double
       * @description Value number used in comparison operators
       */
      'value-number'?: number
      /** @description Value scalar used in comparison operators */
      'value-scalar'?: string
      /**
       * @description Rule type.  'Item' for item rules and 'Group' for group rules
       * @enum {string}
       */
      type: 'Item' | 'Group'
    }
    /** @description Setting to specify which layout strategies are used */
    StrategiesEntity: {
      /** @description Horizontal cut */
      'horizontal-cut'?: boolean
      /** @description Vertical cut */
      'vertical-cut'?: boolean
      /** @description Nesting strategies */
      nesting?: boolean
      /** @description Free nesting */
      'free-nesting'?: boolean
      /** @description Grid nesting */
      'grid-nesting'?: boolean
      /** @description Strip nesting */
      'strip-nesting'?: boolean
      /** @description Horizontal strip */
      'horizontal-strip'?: boolean
      /** @description Vertical strip */
      'vertical-strip'?: boolean
      /** @description Templates */
      templates?: boolean
    }
    /** @description Settings used for vertical/horizontal/template strategies */
    StripOptionsEntity: {
      /**
       * @description Strip rule
       * @enum {string}
       */
      'strip-rule'?:
        | 'None'
        | 'SameProduct'
        | 'SameDimensions'
        | 'SameWidth'
        | 'SameHeight'
        | 'SameShape'
        | 'SameColors'
        | 'SameVarnish'
        | 'SameFoil'
        | 'HasVarnish'
        | 'HasFoil'
        | 'SameProperty'
      /**
       * @description Template rule
       * @enum {string}
       */
      'template-rule'?: 'None' | 'Vertical' | 'Horizontal'
      /** @description Product property to compare when using the "SameProperty" strip rule */
      property?: string
      /**
       * @description Strip alignment
       * @enum {string}
       */
      alignment?:
        | 'TopLeft'
        | 'TopCenter'
        | 'TopRight'
        | 'CenterLeft'
        | 'Center'
        | 'CenterRight'
        | 'BottomLeft'
        | 'BottomCenter'
        | 'BottomRight'
      /** @description Gutter value */
      gutter?: string
      /**
       * @description Gutter rule
       * @enum {string}
       */
      'gutter-rule'?:
        | 'Always'
        | 'ProductsDiffer'
        | 'DimensionsDiffer'
        | 'PropertiesDiffer'
        | 'WidthsDiffer'
        | 'HeightsDiffer'
        | 'ColorsDiffer'
        | 'VarnishesDiffer'
        | 'FoilsDiffer'
        | 'HasVarnish'
        | 'HasFoil'
      /** @description Product property to compare when using the "PropertiesDiffer" strip gutter rule */
      'gutter-property'?: string
    }
    /** @description Settings used for web-based plans */
    WebOptionsEntity: {
      /**
       * @description Web spanning to allow pages to span frames or items to seamlessly span frames
       * @enum {string}
       */
      'web-spanning'?: 'None' | 'Pages' | 'Items'
      /** @description (Deprecated) Allow signatures to span frames */
      'allow-signature-frame-spanning'?: boolean
      /** @description Allow lanes to transition from one product to another within a frame */
      'allow-transition-frames'?: boolean
      /** @description Allow Product Sequence Changes */
      'allow-product-sequence-changes'?: boolean
    }
    /** @description Imposition AI layout result */
    LayoutResultEntity: {
      /**
       * Format: int32
       * @description ID of result
       */
      id?: number
      /**
       * Format: float
       * @description Time this result was generated as measured in seconds since the start of this run
       */
      timestamp?: number
      /** @description Whether this result has one or more pending estimations that have not been performed and could lead to more accurate cost and time estimates */
      'pending-estimations'?: boolean
      /** @description Type of layout generated */
      'layout-type'?: string
      /** @description Sheet size used in layout result */
      sheet?: string
      /** @description Stock used in layout result */
      stock?: string
      /** @description Grade used in layout result */
      grade?: string
      /** @description Things used to process this layout */
      things?: string[]
      /**
       * Format: int32
       * @description Required run length of layout
       */
      'run-length'?: number
      /**
       * Format: float
       * @description Estimated press time in minutes
       */
      'press-minutes'?: number
      /**
       * Format: float
       * @description Estimated cutting time in seconds
       */
      'cutting-time'?: number
      /**
       * Format: float
       * @description Total estimated cost for the layout including all material and device costs
       */
      'total-cost'?: number
      /**
       * Format: float
       * @description Estimated plate cost
       */
      'plate-cost'?: number
      /**
       * Format: float
       * @description Estimated stock cost
       */
      'stock-cost'?: number
      /**
       * Format: float
       * @description Estimated press run cost
       */
      'press-cost'?: number
      /**
       * Format: float
       * @description Estimated cutting cost
       */
      'cutting-cost'?: number
      /**
       * Format: float
       * @description Total sheet waste percentage
       */
      waste?: number
      /**
       * Format: float
       * @description Sheet usage percentage per sheet
       */
      'sheet-usage'?: number
      /**
       * Format: float
       * @description Maximum overrun percentage across products in the layout
       */
      'max-overrun'?: number
      /**
       * Format: int32
       * @description Total number of overrun items
       */
      'total-overruns'?: number
      /**
       * Format: int32
       * @description (Deprecated, use items.count) Total number of component items placed in layout
       */
      placed?: number
      items?: components['schemas']['ItemStatsEntity']
      /**
       * Format: int32
       * @description Estimated cutting complexity of layout
       */
      'cut-complexity'?: number
      /** @description All templates being used in layout */
      templates?: components['schemas']['PlacedTemplateEntity'][]
      thumbnail?: components['schemas']['ThumbnailEntity']
      /** @description (Deprecated) Press used in layout result */
      press?: string
    }
    /** @description Edit layout surface action resource */
    EditLayoutSurfaceResource: {
      /**
       * Format: int32
       * @description ID of action resource is being applied to (Hot Folders only)
       */
      idref?: number
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description Edit layout action resource */
    EditLayoutResource: {
      /**
       * Format: int32
       * @description ID of action resource is being applied to (Hot Folders only)
       */
      idref?: number
      /** @description Layout name, when specified edits current layout name */
      name?: string
      /**
       * @description Workstyle of layout, when specified changes workstyle
       * @enum {string}
       */
      workstyle?:
        | 'FlatWork'
        | 'Sheetwise'
        | 'Perfecting'
        | 'WorkAndTurn'
        | 'WorkAndTumble'
      /**
       * Format: int32
       * @description Layout run length, when specified overrides current layout run length
       */
      'run-length'?: number
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description Place Component action resource */
    PlaceComponentResource: {
      /**
       * Format: int32
       * @description ID of action resource is being applied to (Hot Folders only)
       */
      idref?: number
      /** @description Name of product to place and repeat */
      'product-name': string
      /**
       * Format: int32
       * @description index of component
       */
      'component-index': number
      /**
       * Format: int32
       * @description index of part
       */
      'part-index': number
      /** @description Optional X position to place component in sheet */
      x: string
      /** @description Optional Y position to place component in sheet. */
      y: string
      /**
       * Format: double
       * @description Rotation to apply to product
       */
      rotation: number
    }
    /** @description Place die template action resource */
    PlaceDieTemplateResource: {
      /**
       * Format: int32
       * @description ID of action resource is being applied to (Hot Folders only)
       */
      idref?: number
      /** @description Name of die template to place in layout */
      name: string
      /** @description Optional X position to place layout in sheet */
      x?: string
      /** @description Optional Y position to place layout in sheet */
      y?: string
    }
    /** @description Plate library item */
    PlateEntity: {
      /** @description Name of library item */
      name: string
      /** @description Unique ID of this item (auto-generated, read-only) */
      id?: string
      /** @description Optional external ID of media item */
      'external-id'?: string
      /** @description Asset description */
      description?: string
      /** @description Plate width */
      width?: string
      /** @description Plate height */
      height?: string
      /** @description Punch height of plate */
      'punch-height'?: string
      /**
       * Format: double
       * @description Horizontal distortion of plate
       */
      'h-distortion'?: number
      /**
       * Format: double
       * @description Vertical distortion of plate
       */
      'v-distortion'?: number
      /**
       * Format: double
       * @description Price of one plate
       */
      price?: number
    }
    /** @description Left, top, right and bottom scalar margins entity */
    MarginsEntity: {
      /**
       * @description Type of margins, inside or outside
       * @enum {string}
       */
      type?: 'Inside' | 'Outside'
      /** @description Left margin */
      left: string
      /** @description Top margin */
      top: string
      /** @description Right margin */
      right: string
      /** @description Bottom margin */
      bottom: string
      /** @description Specify whether all margins are the same */
      linked?: boolean
    }
    /** @description Press library item */
    PressEntity: {
      /** @description Name of library item */
      name: string
      /** @description Unique ID of this item (auto-generated, read-only) */
      id?: string
      /** @description Optional external ID of media item */
      'external-id'?: string
      /** @description Press description */
      description?: string
      /** @description Press manufacturer */
      manufacturer?: string
      /**
       * Format: double
       * @description Speed of press in speed units
       */
      speed?: number
      /**
       * @description Speed units
       * @enum {string}
       */
      'speed-units'?:
        | 'SheetsPerMinute'
        | 'SheetsPerHour'
        | 'FeetPerMinute'
        | 'MetersPerMinute'
        | 'FeetPerHour'
        | 'MetersPerHour'
        | 'SquareFeetPerHour'
        | 'SquareMetersPerHour'
      /**
       * Format: double
       * @description Cost to operate this press per hour
       */
      'cost-per-hour'?: number
      /**
       * Format: double
       * @description Per-color make ready time in minutes
       */
      'make-ready-time'?: number
      /**
       * Format: int32
       * @description Maximum number of colors supported on this press
       */
      'number-of-colors'?: number
      /**
       * Format: int32
       * @description Minimum run length allowed for layouts
       */
      'min-run-length'?: number
      /** @description Whether this press supports single-pass double sided printing */
      'back-single-pass'?: boolean
      /**
       * @description Workstyle of single-pass double sided printing unit
       * @enum {string}
       */
      workstyle?:
        | 'FlatWork'
        | 'Sheetwise'
        | 'Perfecting'
        | 'WorkAndTurn'
        | 'WorkAndTumble'
      /**
       * Format: int32
       * @description Maximum number of colors supported on back side when doing single-pass double sided printing
       */
      'back-number-of-colors'?: number
      /**
       * Format: double
       * @description Percentage of speed reduction when doing single-pass double sided printing
       */
      'back-speed-reduction'?: number
      /** @description Whether to allow multiple passes through this press */
      'multi-pass'?: boolean
      /** @description Minumum sheet width supported by this press */
      'min-sheet-width'?: string
      /** @description Maximum sheet width supported by this press */
      'max-sheet-width'?: string
      /** @description Minumum sheet height supported by this press */
      'min-sheet-height'?: string
      /** @description Minumum sheet width supported by this press */
      'max-sheet-height'?: string
      /** @description Minimum stock thickness supported by this press */
      'min-stock-thickness'?: string
      /** @description Maximum stock thickness supported by this press */
      'max-stock-thickness'?: string
      /**
       * Format: double
       * @description Minimum stock weight supported by this press
       */
      'min-stock-weight'?: number
      /**
       * Format: double
       * @description Maximum stock weight supported by this press
       */
      'max-stock-weight'?: number
      /**
       * @description Units of min/max stock weight defined for this press.  Defaults to GSM when not specified.
       * @enum {string}
       */
      'weight-units'?: 'GSM' | 'Lb'
      /**
       * @description Weight type for American standard stock weight system for min/max stock weight defined for this press.  Defaults to Text when not specified.
       * @enum {string}
       */
      'weight-type'?:
        | 'Text'
        | 'Book'
        | 'Bond'
        | 'Offset'
        | 'Cover'
        | 'Bristol'
        | 'Index'
        | 'Tag'
        | 'Card'
      /**
       * @description Sheet handling option for sheet orientation on this press.  Defaults to None when not specified.
       * @enum {string}
       */
      'sheet-handling'?: 'None' | 'LongEdgeHorizontal' | 'LongEdgeVertical'
      'image-margins'?: components['schemas']['MarginsEntity']
      'content-margins'?: components['schemas']['MarginsEntity']
      /** @description Gripper distance from bottom of sheet */
      gripper?: string
      /** @description Optional default plate to use when applying this press to a layout */
      'default-plate'?: string
    }
    /** @description Resize layout sheet action resource */
    ResizeSheetResource: {
      /**
       * Format: int32
       * @description ID of action resource is being applied to (Hot Folders only)
       */
      idref?: number
      /** @description New width of current layout sheet */
      width?: string
      /** @description New height of current layout sheet */
      height?: string
    }
    /** @description Set plate action resource */
    SetPlateResource: {
      /**
       * Format: int32
       * @description ID of action resource is being applied to (Hot Folders only)
       */
      idref?: number
      /** @description Name of library item to use */
      name?: string
    }
    /** @description Set press action resource */
    SetPressResource: {
      /**
       * Format: int32
       * @description ID of action resource is being applied to (Hot Folders only)
       */
      idref?: number
      /** @description Name of library item to use */
      name?: string
    }
    /** @description Set sheet action resource */
    SetSheetResource: {
      /**
       * Format: int32
       * @description ID of action resource is being applied to (Hot Folders only)
       */
      idref?: number
      /** @description Name of sheet stock */
      stock?: string
      /** @description Name of sheet grade */
      grade?: string
      /** @description Name of sheet within stock to use */
      name?: string
    }
    /** @description Sheet library item */
    SheetEntity: {
      /** @description Name of library item */
      name: string
      /** @description Unique ID of this item (auto-generated, read-only) */
      id?: string
      /** @description Optional external ID of media item */
      'external-id'?: string
      /** @description Asset description */
      description?: string
      /** @description ID of the stock of this sheet */
      'stock-id'?: string
      /** @description ID of the grade of this sheet */
      'grade-id'?: string
      /** @description First dimension of this sheet */
      dimension1: string
      /** @description Second dimension of this sheet */
      dimension2: string
      /**
       * Format: double
       * @description Cost of this sheet when cost not defined from grade
       */
      cost?: number
      /**
       * @description Cost unit type of this sheet when not defined from grade
       * @enum {string}
       */
      'cost-units'?:
        | 'FromGrade'
        | 'PerSheet'
        | 'Per500Sheets'
        | 'Per1000Sheets'
        | 'PerLb'
        | 'Per500Lb'
        | 'Per1000Lb'
        | 'PerKg'
        | 'Per1000Kg'
        | 'PerFt2'
        | 'PerM2'
        | 'PerFt'
        | 'PerM'
        | 'PerMSF'
        | 'PerMSI'
      /**
       * @description The grain of this sheet.  Grain is inferred by dimension2 when not specified.
       * @enum {string}
       */
      grain?: 'Long' | 'Short' | 'None'
    }
    /** @description Step and Repeat parameters */
    StepRepeatEntity: {
      /**
       * Format: int32
       * @description Number of rows in step and repeat grid when vertical-fill is not set or is None
       */
      rows?: number
      /**
       * Format: int32
       * @description Number of columns in step and repeat grid when horizontal-fill is not set or is None
       */
      columns?: number
      /**
       * @description Head turn rotation to apply on every other row and/or column
       * @enum {string}
       */
      'head-turn'?: 'None' | 'Column' | 'Row' | 'ColumnRow'
      /**
       * Format: double
       * @description Initial rotation to apply to product when building step and repeat grid
       */
      'initial-rotation'?: number
      /**
       * @description Horizontal gap type defining how horizontal gap(s) are interpreted.  Default: Edge
       * @enum {string}
       */
      'horizontal-gap-type'?: 'Center' | 'Edge' | 'Smart'
      /**
       * @description Vertical gap type defining how vertical gap(s) are interpreted.  Default: Edge
       * @enum {string}
       */
      'vertical-gap-type'?: 'Center' | 'Edge' | 'Smart'
      /** @description Horizontal gap scalar value */
      'horizontal-gap': string
      /** @description Vertical gap scalar value */
      'vertical-gap': string
      /** @description Optional even horizontal gap scalar value.  When set, horizontal-gap is used for odd horizontal gap spacing while this gap value is used for even rows */
      'even-horizontal-gap'?: string
      /** @description Optional even vertical gap scalar value.  When set, vertical-gap is used for odd vertical gap spacing while this gap value is used for even rows */
      'even-vertical-gap'?: string
      /**
       * @description Type of stagger to apply to rows or columns.  If not specified no stagger is applied.
       * @enum {string}
       */
      stagger?: 'None' | 'Horizontal' | 'Vertical'
      /** @description Stagger amount when stagger is not None */
      'stagger-amount'?: string
      /**
       * Format: int32
       * @description Number of rows or columns before stagger amount is restarted back to 0.  If not defined, stagger value continues to be applied to each subsequent row or column indefinitely.
       */
      'stagger-restart'?: number
      /**
       * @description Whether to automatically fill the sheet as much as possible in the horizontal direction.  By default horizontal-fill is off (None) in which case the columns field needs to be defined.
       * @enum {string}
       */
      'horizontal-fill'?: 'None' | 'Pack' | 'Expand' | 'Wrap'
      /**
       * @description Whether to automatically fill the sheet as much as possible in the vertical direction.  By default horizontal-fill is off (None) in which case the rows field needs to be defined.
       * @enum {string}
       */
      'vertical-fill'?: 'None' | 'Pack' | 'Expand' | 'Wrap'
      'sheet-margins'?: components['schemas']['MarginsEntity']
      /** @description When set, a bleed offset is applied to each product in the step and repeat group and rectangular bleeds are automatically resolved.  If not set, product bleed masks are used. */
      'bleed-offset'?: string
    }
    /** @description Step and Repeat action resource */
    StepRepeatResource: {
      /**
       * Format: int32
       * @description ID of action resource is being applied to (Hot Folders only)
       */
      idref?: number
      /** @description Name of product to step and repeat */
      'product-name': string
      /** @description Optional X position to place repeat group in sheet.  This value is ignored if an auto-fill option is defined in settings in horizontal direction. */
      x?: string
      /** @description Optional Y position to place repeat group in sheet.  This value is ignored if an auto-fill option is defined in settings in vertical direction. */
      y?: string
      settings: components['schemas']['StepRepeatEntity']
    }
    /** @description Optimize tool settings Define the devices, sheets, rolls, templates, and profiles to use during Optimize */
    OptimizeResource: {
      /**
       * Format: int32
       * @description ID of action resource is being applied to (Hot Folders only)
       */
      idref?: number
      /** @description Names of products to include.  When not specified all products in the job are included */
      products?: string[]
      /** @description Optional profiles to use when running Imposition AI.  The default profile is used when this field is not set */
      profiles?: string[]
      /** @description Optional inline fully defined profiles to use when running Imposition AI. */
      'profiles-inline'?: components['schemas']['ImpositionAiProfileEntity'][]
      /**
       * Format: int32
       * @description Number of minutes to allow this action to run before stopping.  Default is 60 minutes when not specified.
       */
      'stop-minutes'?: number
      /** @description Names of things to use during Optimize */
      things?: string[]
      /** @description Sheets to use during Optimize */
      sheets?: components['schemas']['SheetRefEntity'][]
      /** @description Rolls to use during Optimize */
      rolls?: components['schemas']['SheetRefEntity'][]
      /** @description Names of templates to use during Optimize */
      templates?: string[]
      /** @description (Deprecated) Names of presses to use during Optimize */
      presses?: string[]
    }
    /** @description Reference to sheet or roll */
    SheetRefEntity: {
      /** @description Name of sheet stock */
      stock?: string
      /** @description Name of sheet grade */
      grade?: string
      /** @description Name of sheet or roll within stock to use */
      name?: string
    }
    /** @description Grouping of files in a job that were created as a result of a single action */
    JobFilesEntity: {
      /** @description ID of this job files entity */
      id: string
      /** @description Action that was performed to create these file(s) */
      action: string
      /** @description Time file(s) were created */
      time?: string
      /** @description Downloadable URIs of all files in this group */
      files: string[]
    }
    /** @description Plan tool settings including devices, sheets, rolls, and profiles to use during planning */
    PlanResource: {
      /**
       * Format: int32
       * @description ID of action resource is being applied to (Hot Folders only)
       */
      idref?: number
      /** @description Names of products to include.  When not specified all products in the job are included */
      products?: string[]
      /** @description Optional profiles to use when running Imposition AI.  The default profile is used when this field is not set */
      profiles?: string[]
      /** @description Optional inline fully defined profiles to use when running Imposition AI. */
      'profiles-inline'?: components['schemas']['ImpositionAiProfileEntity'][]
      /**
       * Format: int32
       * @description Number of minutes to allow this action to run before stopping.  Default is 60 minutes when not specified.
       */
      'stop-minutes'?: number
      /** @description Names of things to use during Plan */
      things?: string[]
      /** @description Sheets to use during Plan */
      sheets?: components['schemas']['SheetRefEntity'][]
      /** @description Rolls to use during Plan */
      rolls?: components['schemas']['SheetRefEntity'][]
      /** @description Names of templates to use during Plan */
      templates?: string[]
      /** @description Apply lowest cost Plan result automatically.  If not specified, no results are applied. */
      'apply-result'?: boolean
      /** @description (Deprecated) Names of presses to use during Plan */
      presses?: string[]
    }
    /** @description Imposition AI Plan result */
    PlanResultEntity: {
      /**
       * Format: int32
       * @description ID of result
       */
      id?: number
      /**
       * Format: float
       * @description Time this result was generated as measured in seconds since the start of this run
       */
      timestamp?: number
      /** @description Whether this result has one or more pending estimations that have not been performed and could lead to more accurate cost and time estimates */
      'pending-estimations'?: boolean
      /**
       * Format: float
       * @description Total estimated press time in minutes
       */
      'press-minutes'?: number
      /**
       * Format: float
       * @description Estimated total cutting time in seconds
       */
      'cutting-time'?: number
      /**
       * Format: int32
       * @description Total run lengths across all layouts in this plan
       */
      'run-length'?: number
      /** @description Total roll length of all roll-based layouts in this plan */
      'roll-length'?: string
      /**
       * Format: float
       * @description Total estimated cost for the job including all material and device costs
       */
      'total-cost'?: number
      /**
       * Format: float
       * @description Estimated total plate cost
       */
      'plate-cost'?: number
      /**
       * Format: float
       * @description Estimated total stock cost
       */
      'stock-cost'?: number
      /**
       * Format: float
       * @description Estimated total press run cost
       */
      'press-cost'?: number
      /**
       * Format: float
       * @description Estimated total cutting cost
       */
      'cutting-cost'?: number
      /**
       * Format: float
       * @description Total sheet waste percentage
       */
      waste?: number
      /**
       * Format: float
       * @description Sheet usage percentage per sheet
       */
      'sheet-usage'?: number
      /**
       * Format: int32
       * @description Total number of underrun items
       */
      'total-underruns'?: number
      /**
       * Format: int32
       * @description Total number of overrun items
       */
      'total-overruns'?: number
      /**
       * Format: int32
       * @description Number of layouts in this plan result
       */
      'layout-count'?: number
      /** @description Optional results for each layout */
      layouts?: components['schemas']['LayoutResultEntity'][]
      thumbnail?: components['schemas']['ThumbnailEntity']
    }
    /** @description Live stats on current or most recent plan run performed on the current job */
    PlanStatusEntity: {
      /**
       * @description Current state of the given tool in the job
       * @enum {string}
       */
      state?:
        | 'NotStarted'
        | 'Running'
        | 'Stopping'
        | 'Stopped'
        | 'Finished'
        | 'Error'
      /**
       * Format: float
       * @description Number of seconds the given tool has been running or was last run
       */
      'running-time'?: number
      /** @description Any errors that have occurred during the current or last run of the given tool */
      errors?: components['schemas']['MessageEntity'][]
      /** @description Any warnings that have occurred during the current or last run of the given tool */
      warnings?: components['schemas']['MessageEntity'][]
      /**
       * Format: int32
       * @description Number of results generated
       */
      results: number
      /**
       * Format: float
       * @description Lowest total cost across all plan results so far
       */
      'lowest-cost'?: number
      /**
       * Format: float
       * @description Lowest overall waste across all plan results so far
       */
      'lowest-waste'?: number
      /**
       * Format: int32
       * @description Lowest number of layouts across all plan results so far
       */
      'lowest-layouts'?: number
    }
    /** @description Populate action resource */
    PopulateResource: {
      /**
       * Format: int32
       * @description ID of action resource is being applied to (Hot Folders only)
       */
      idref?: number
      /** @description Names of products to include.  When not specified all products in the job are included */
      products?: string[]
      /** @description Optional profiles to use when running Imposition AI.  The default profile is used when this field is not set */
      profiles?: string[]
      /** @description Optional inline fully defined profiles to use when running Imposition AI. */
      'profiles-inline'?: components['schemas']['ImpositionAiProfileEntity'][]
      /**
       * Format: int32
       * @description Number of minutes to allow this action to run before stopping.  Default is 60 minutes when not specified.
       */
      'stop-minutes'?: number
    }
    /** @description Add product parameters */
    AddProductEntity: {
      /** @description Unique name of the product */
      name?: string
      /**
       * @description Optional type of product: flat, tiled, bound, folded
       * @enum {string}
       */
      type?: 'Flat' | 'Tiled' | 'Folded' | 'Bound'
      /** @description Product color specified as RGB or ARGB hex value with optional leading hex ('#') symbol */
      color?: string
      /**
       * Format: int32
       * @description Number of product ordered in the job
       */
      ordered?: number
      /** @description Stock of product */
      stock?: string
      /** @description Grade of product stock */
      grade?: string
      /** @description Page colors for front side of flat products or all pages of bound and folded products */
      colors?: components['schemas']['PageColorEntity'][]
      /** @description Page back colors for back side of flat products */
      'back-colors'?: components['schemas']['PageColorEntity'][]
      /**
       * @description Setting to specify how toset up colors for each page
       * @enum {string}
       */
      'color-source'?: 'Artwork' | 'Specified'
      /**
       * @description Mode to use when analyzing artwork colors when color source is set to Artwork
       * @enum {string}
       */
      'color-analysis'?: 'Fast' | 'Raster'
      /**
       * @description Color detection region to use when determining which colors are present in artwork during raster color analysis
       * @enum {string}
       */
      'color-detection'?: 'Cut' | 'Bleed'
      /**
       * @description Grain direction of product
       * @enum {string}
       */
      grain?: 'Horizontal' | 'Vertical' | 'Consistent' | 'None'
      /** @description Width of product when creating a custom size product or the desired scaled width or scale percentage when creating the product die from a die design or artwork */
      width?: string
      /** @description Height of product when creating a custom size product or the desired scaled height or scale percentage when creating the product die from a die design or artwork */
      height?: string
      /**
       * @description Rotation type to allow in product, defaults to Product settings defaults unless allowed-rotations is defined in which case 'Custom' rotation type is assumed
       * @enum {string}
       */
      rotation?: 'Any' | 'Orthogonal' | 'None' | 'Custom'
      /** @description Allowed rotations of product when rotation type is 'Custom' */
      'allowed-rotations'?: string
      /** @description List of templates this product can be used with */
      templates?: string[]
      /** @description Whether to scale proportionally when either width or height are not specified.  When false, only the dimension that is specified is scaled.  Defaults to false. */
      'scale-proportionally'?: boolean
      /** @description Path to artwork file when creating product from artwork or snapping artwork into die */
      artwork?: string
      /**
       * Format: int32
       * @description Page of artwork to use, defaults to page 1 when not defined
       */
      page?: number
      /** @description Path to artwork file for back side of product when creating product from artwork or snapping artwork into die */
      'back-artwork'?: string
      /**
       * Format: int32
       * @description Page of artwork to use for back side of product
       */
      'back-page'?: number
      /**
       * @description Source type to use when creating dieshape for product.  If not defined, cad-file die takes priority, followed by dieshape library name, then height and width fields, and finally artwork Trimbox or artwork path line mappings depending on whether product settings automatically take dieshape from line mappings
       * @enum {string}
       */
      'dieshape-source'?:
        | 'CAD'
        | 'ArtworkPaths'
        | 'ArtworkTrimbox'
        | 'CustomSize'
        | 'DieDesignLibrary'
        | 'PdfPlus'
      /** @description Path to die in Die Design Library when using library die design for 1-up die of the product */
      'die-design'?: string
      /** @description PDF ink color to use for autosnapping artwork into 1-up die on the front side of the product */
      'autosnap-ink'?: string
      /** @description PDF ink color to use for autosnapping artwork into 1-up die on the back side of the product */
      'back-autosnap-ink'?: string
      /** @description PDF layer to use for autosnapping artwork into 1-up die on the front side of the product */
      'autosnap-layer'?: string
      /** @description PDF layer to use for autosnapping artwork into 1-up die on the back side of the product */
      'back-autosnap-layer'?: string
      /**
       * @description Shape handling mode to use when finding closed path shapes from the dielines in the artwork.  'Multiple' mode will create a new product for each closed path shape detected in the artwork.
       * @enum {string}
       */
      'shape-handling'?: 'Largest' | 'Multiple'
      /**
       * @description Multi-page artwork handling options for flat and tiled products
       * @enum {string}
       */
      'page-handling'?: 'OnePerFile' | 'OnePerPage' | 'OnePerTwoPages'
      /**
       * @description Action to perform to copy or mirror artwork on the front side of the flat product to the back side
       * @enum {string}
       */
      'front-to-back'?: 'None' | 'Copy' | 'Mirror'
      /** @description Path of CAD file to use when defining product based on 1-up design in a CAD file */
      'cad-file'?: string
      /** @description Design name of 1-up CAD design in the CAD file, defaults to first 1-up in the CAD file when not defined */
      'cad-design'?: string
      /** @description Optional product group used in Imposition AI */
      group?: string
      /**
       * Format: int32
       * @description Optional priority of product starting from 1 as highest priority
       */
      priority?: number
      /** @description Product due date */
      'due-date'?: string
      /**
       * @description Product bleed type = [Margins, Contour, Cad, or None]
       * @enum {string}
       */
      'bleed-type'?: 'Margins' | 'Contour' | 'CAD' | 'None'
      /** @description Scalar offset from die design to generate bleed */
      'bleed-margin'?: string
      'bleed-margins'?: components['schemas']['MarginsEntity']
      /** @description Bleed margins of individual pages in bound and folded products */
      'page-bleed'?: string
      /**
       * @description Product spacing type = [Margins, Uniform, or Bleed]
       * @enum {string}
       */
      'spacing-type'?: 'Margins' | 'Uniform' | 'Bleed' | 'Tool'
      /** @description Single scalar spacing offset when spacing type is Uniform */
      'spacing-margin'?: string
      'spacing-margins'?: components['schemas']['MarginsEntity']
      'offcut-margins'?: components['schemas']['MarginsEntity']
      /** @description Minimum overrun percentage allowed for the product */
      'min-overruns'?: string
      /** @description Maximum overrun percentage allowed for the product */
      'max-overruns'?: string
      /** @description Optional product description */
      description?: string
      /** @description Optional notes to associate with product */
      notes?: string
      /** @description List of process settings to use to control process-specific behavior */
      'process-settings'?: components['schemas']['ProcessSettingEntity'][]
      /** @description Optional product marks to apply to the front side of the product */
      marks?: string[]
      /** @description Optional product marks to apply to the back side of the product */
      'back-marks'?: string[]
      /** @description Optional folding bound work */
      'folding-patterns'?: string[]
      /**
       * @description Optional binding method for bound work
       * @enum {string}
       */
      'binding-method'?: 'PerfectBound' | 'SaddleStitch' | 'None'
      /**
       * @description Page binding edge for bound work
       * @enum {string}
       */
      'binding-edge'?: 'Top' | 'Bottom' | 'Right' | 'Left'
      /**
       * @description Jog edge for bound work.  When set, this edge must be perpendicular to the binding edge.  Setting jog to Bottom for left- or right-bound work results in 'Foot to Foot' page orientation.
       * @enum {string}
       */
      'jog-edge'?: 'Top' | 'Bottom' | 'Right' | 'Left'
      /**
       * @description Reading order of pages in bound work
       * @enum {string}
       */
      'reading-order'?: 'Normal' | 'Calendar'
      /**
       * Format: int32
       * @description Total number of pages field for bound and folded work
       */
      pages?: number
      /**
       * Format: int32
       * @description Number of pages per section for multi-section bound work
       */
      'pages-per-section'?: number
      /** @description Whether bound part includes cover or not */
      'self-cover'?: boolean
      trim?: components['schemas']['TrimEntity']
      'n-up'?: components['schemas']['NUpEntity']
      creep?: components['schemas']['CreepEntity']
      /**
       * Format: int32
       * @description Bundle size needed for product.  When set, Imposition AI tools will ensure layouts including this product will have run length multiples of this bundle size
       */
      'bundle-size'?: number
      /**
       * Format: int32
       * @description Max Bundle Splits allowed when bundle size is set.  When set, this property controls whether a given full bundle can to be broken into smaller bundle sizes for optimization reasons with default value of 0 signifying no splitting allowed
       */
      'max-bundle-splits'?: number
      /** @description Optional custom properties to apply to the product */
      properties?: components['schemas']['PropertyEntity'][]
      tiling?: components['schemas']['tiling']
      /** @description (Deprecated) Printing inks on front side of product */
      'front-inks'?: string[]
      /** @description (Deprecated) Printing inks on back side of product */
      'back-inks'?: string[]
      /** @description (Deprecated) Spot ink color used to define cut lines in the artwork */
      'cut-ink'?: string
      /** @description (Deprecated) Spot ink color used to define crease lines in the artwork */
      'crease-ink'?: string
      /** @description (Deprecated) Spot ink color used to define bleed lines in the artwork */
      'bleed-ink'?: string
      /** @description (Deprecated) PDF layer name used to define cut lines in the artwork */
      'cut-layer'?: string
      /** @description (Deprecated) PDF layer name used to define crease lines in the artwork */
      'crease-layer'?: string
      /** @description (Deprecated) PDF layer name used to define bleed lines in the artwork */
      'bleed-layer'?: string
    }
    /** @description Creep settings */
    CreepEntity: {
      /**
       * @description Type of creep to apply to bound signatures
       * @enum {string}
       */
      type?: 'None' | 'Inward' | 'Outward' | 'Both' | 'Custom'
      /** @description Percentage from the inner most signatures towards the spine when to change creep direction from inward to outward when using 'Custom' creep type */
      transition?: string
      /**
       * @description Creep method to use for performing creep on bound signatures
       * @enum {string}
       */
      method?: 'Offset' | 'Scale'
      /**
       * @description Creep calculation mode to use to determine creep amount to apply
       * @enum {string}
       */
      calculation?: 'FromStock' | 'PerPage' | 'Total'
      /** @description Amount of creep to apply which can be total or per-page amount based on the calculation mode */
      amount?: string
    }
    /** @description N-up settings for bound part signatures */
    NUpEntity: {
      /**
       * Format: int32
       * @description Number of N-ups which can be a value of 1, 2, or 3 with 1 signifying normal non N-up repeated signatures
       */
      number: number
      /** @description Gap spacing to apply between N-up repeat pages */
      gap?: string
    }
    /** @description Page color for specifying colors in products */
    PageColorEntity: {
      /** @description Color name */
      name: string
      /**
       * @description Color type
       * @enum {string}
       */
      type?: 'CMYK' | 'Lab' | 'RGB'
      /** @description Color values */
      values?: number[]
      /**
       * Format: double
       * @description Color coverage in the page ranging from 0.0 to 100.0
       */
      coverage?: number
      /** @description Process the color represents. Default is 'Printing'. */
      process?: string
    }
    /** @description Process settings */
    ProcessSettingEntity: {
      /** @description Name of process */
      process: string
      /** @description name of Mode to run the given process at */
      mode?: string
      /**
       * Format: double
       * @description Specific mode value to run the given process at
       */
      'mode-value'?: number
      /** @description List of things this process can use */
      things?: string[]
      /** @description List of process types this product can use */
      'process-types'?: string[]
    }
    /** @description Trim margin settings for bound part signatures */
    TrimEntity: {
      /** @description Spine trim amount in bound signatures */
      'spine-trim'?: string
      /** @description Jog trim amount in bound signatures */
      'jog-trim'?: string
      /** @description Face trim amount in bound signatures */
      'face-trim'?: string
      /** @description Non-jog trim amount in bound signatures */
      'non-jog-trim'?: string
      /**
       * @description Lip type for determining where lip gets added to bound signatures
       * @enum {string}
       */
      'lip-type'?: 'Auto' | 'Front' | 'Back'
      /** @description Lip amount to add to bound signatures */
      lip?: string
    }
    /** @description Import product CSV action resource */
    ImportProductCsvResource: {
      /**
       * Format: int32
       * @description ID of action resource is being applied to (Hot Folders only)
       */
      idref?: number
      /** @description Full path of file name */
      path: string
      /** @description Name of CSV import preset to use */
      preset?: string
      /** @description Optional base folder to use for relative paths */
      'base-folder'?: string
    }
    /** @description Arguments used to control image tracing behavior */
    ImageTracingResource: {
      /** @description Cutting tool type to use for the generated cut tool path */
      'tool-type': string
      /**
       * Format: double
       * @description Quality of the raster image to use for generating the cut tool path.  A value of 100% will rasterize the image at full size up to a limit of 10 megapixels.  Lower values will scale the image down for faster processing and in some case preferred results as less detail is used for tracing.
       */
      quality?: number
      /**
       * Format: double
       * @description Amount of color difference to allow before adjacent colors are considered different.  A value of 0% means no tolerance in color differences is allowed while 100% is the maximum allowed tolerance in color differences.
       */
      tolerance?: number
      /**
       * Format: double
       * @description The amount of blurring to apply to edges that are encountered during edge detection.  A higher blur radius means more blurring is applied during edge detection which can lead to less jagged paths.
       */
      'blur-radius'?: number
      /**
       * Format: double
       * @description The amount of simplification to apply to the generated path.  Simplify works by removing points on the path that are within a certain tolerance.  A value of 0% disables path simplification while a value of 100% will use the highest allowed tolerance when removing points.
       */
      simplify?: number
      /**
       * Format: double
       * @description Smoothing converts individual points on the generated path to Bezier curves to produce smoother paths.  A value of 0% disables path smoothing while a value of 100% will perform the most aggressive path curve smoothing.
       */
      smoothing?: number
      /** @description Additional offset distance to expand the generated path. */
      offset?: string
      /** Format: int32 */
      idref?: number
    }
    /** @description Apply mark action resource */
    ApplyMarkResource: {
      /**
       * Format: int32
       * @description ID of action resource is being applied to (Hot Folders only)
       */
      idref?: number
      /** @description Name of library item to use */
      name?: string
      /**
       * @description Which side to apply to mark to
       * @enum {string}
       */
      side?: 'Front' | 'Back'
    }
    /** @description Information describing artwork being autosnapped */
    AutosnapArtworkEntity: {
      /** @description Local path of artwork file */
      path: string
      /**
       * Format: int32
       * @description Page number of front artwork.  When not specified defaults to page 1 unless back page is defined in which case only back side of die is snapped
       */
      'front-page'?: number
      /**
       * Format: int32
       * @description Page number of back artwork.  Default: none
       */
      'back-page'?: number
      /** @description Name if spot cut line ink.  Ink automatically detected when not specified */
      'cut-ink'?: string
    }
    /** @description Arguments used to control job save behavior */
    SaveJobResource: {
      /**
       * Format: int32
       * @description ID of action resource is being applied to (Hot Folders only)
       */
      idref?: number
      /** @description Full path to store output file(s).  When not set, the output file(s) will be stored on the server and download link(s) will be provided in the response. */
      path?: string
      /** @description Whether or not to embed artwork files in the saved job, defaults to current job preferences */
      'embed-artwork'?: boolean
    }
    /** @description Arguments used to control job template save behavior */
    SaveJobTemplateResource: {
      /**
       * Format: int32
       * @description ID of action resource is being applied to (Hot Folders only)
       */
      idref?: number
      /** @description Full path to store output file(s).  When not set, the output file(s) will be stored on the server and download link(s) will be provided in the response. */
      path?: string
    }
    /** @description Run script action resource (Tech Preview) */
    RunScriptResource: {
      /**
       * Format: int32
       * @description ID of action resource is being applied to (Hot Folders only)
       */
      idref?: number
      /** @description Name of script in Scripts library including folder name(s) */
      name?: string
      inputs?: {
        [key: string]: string
      }
    }
    /** @description Lists of products and/or specific layout dies to snap artwork into */
    AutosnapProductDiesEntity: {
      /** @description Local path of artwork file */
      path: string
      /**
       * Format: int32
       * @description Page number of front artwork.  When not specified defaults to page 1 unless back page is defined in which case only back side of die is snapped
       */
      'front-page'?: number
      /**
       * Format: int32
       * @description Page number of back artwork.  Default: none
       */
      'back-page'?: number
      /** @description Name if spot cut line ink.  Ink automatically detected when not specified */
      'cut-ink'?: string
      /** @description Names of products to snap artwork into */
      products?: string[]
      /** @description Current layout dies to snap artwork into */
      dies?: components['schemas']['DieEntity'][]
    }
    /** @description Autosnap artwork action resource */
    AutosnapResource: {
      /**
       * Format: int32
       * @description ID of action resource is being applied to (Hot Folders only)
       */
      idref?: number
      /** @description List of artworks and autosnap targets */
      artworks?: components['schemas']['AutosnapProductDiesEntity'][]
    }
    /** @description Single die position in a layout */
    DieEntity: {
      /** @description Die number in layout */
      number: string
      /**
       * Format: int32
       * @description Layout number. Default: 1
       */
      layout?: number
    }
    /** @description Library reference */
    'referenceDie-design': {
      /** @description Unique ID of asset */
      id?: string
      /** @description Path to asset */
      path?: string
    }
    /** @description Repeat template settings */
    'repeat-template-settings': {
      /** @description Name of the repeat template */
      name: string
      'die-design'?: components['schemas']['referenceDie-design']
      /** @description Name of the product in project to use for the die design */
      product?: string
      /**
       * Format: int32
       * @description Rows
       */
      rows: number
      /**
       * Format: int32
       * @description Columns
       */
      columns: number
      /** @description Row space */
      'row-space': string
      /** @description Column space */
      'column-space': string
      /**
       * Format: double
       * @description Rotation
       */
      rotation?: number
    }
    /** @description Directly specified asset */
    Asset: {
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name: string
      /**
       * Format: date-time
       * @description Created On
       */
      'created-on'?: string
      /**
       * Format: date-time
       * @description Modified On
       */
      'modified-on'?: string
      /** @description Version */
      version?: string
      /** @description Description */
      description?: string
      /** @description Notes */
      notes?: string
      /** @description Path */
      path?: string
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description Folding patterns to use */
    FoldingPatternRef: {
      /** @description Unique ID of asset */
      id?: string
      /** @description Path to asset */
      path?: string
    }
    /** @description Optional product marks to apply to the back side of the product */
    MarkAssetRef: {
      /** @description Unique ID of asset */
      id?: string
      /** @description Path to asset */
      path?: string
    }
    /** @description Page back colors for back side of flat products */
    PageColorResource: {
      /** @description Color name */
      name?: string
      /** @enum {string} */
      type?: 'CMYK' | 'Lab' | 'RGB'
      /**
       * Format: double
       * @description Color coverage
       */
      coverage?: number
      process?: components['schemas']['process']
      /** @description Color values */
      values?: number[]
    }
    /** @description Process settings */
    ProcessSettingResource: {
      /** @description Process setting types */
      'process-types'?: components['schemas']['referenceProcess-type'][]
      /**
       * Format: double
       * @description Process setting mode value
       */
      'mode-value'?: number
      /** @description Process setting things */
      things?: components['schemas']['referenceThing'][]
      process: components['schemas']['referenceProcess']
      mode?: components['schemas']['referenceMode']
    }
    /** @description Bleed settings */
    bleed: {
      /** @description Single margin setting */
      margin?: string
      margins?: components['schemas']['margins']
      /** @enum {string} */
      type: 'Margins' | 'Contour' | 'CAD' | 'None'
    }
    /** @description Create bound product resource */
    'create-bound-product-resource': {
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
      /** @description Unique name of the product */
      name?: string
      /**
       * Format: int32
       * @description Quantity of this product that needs to be produced
       */
      quantity?: number
      /**
       * Format: date-time
       * @description Product due date
       */
      'due-date'?: string
      /** @description Optional product group used in Imposition AI */
      group?: string
      /**
       * Format: int32
       * @description Optional priority of product starting from 1 as highest priority
       */
      priority?: number
      overruns?: components['schemas']['scalar-range']
      /** @description Product color specified as RGB or ARGB hex value with optional leading hex ('#') symbol */
      color?: string
      /** @description Optional product description */
      description?: string
      /** @description Optional notes to associate with product */
      notes?: string
      stock?: components['schemas']['resource']
      /** @description Part stock grade */
      grade?: string
      /** @description Optional product marks to apply to the front side of the product */
      marks?: components['schemas']['MarkAssetRef'][]
      /** @description Optional product marks to apply to the back side of the product */
      'back-marks'?: components['schemas']['MarkAssetRef'][]
      size?: components['schemas']['size']
      /** @description Path to artwork file when creating product from artwork or snapping artwork into die */
      'artwork-file'?: string
      /**
       * Format: int32
       * @description Page of artwork to use, defaults to page 1 when not defined
       */
      'artwork-page'?: number
      /** @enum {string} */
      grain?: 'Horizontal' | 'Vertical' | 'Consistent' | 'None'
      rotation?: components['schemas']['rotation']
      bleed?: components['schemas']['bleed']
      spacing?: components['schemas']['spacing']
      offcut?: components['schemas']['offcut']
      /** @enum {string} */
      'color-source'?: 'Artwork' | 'Specified'
      /** @enum {string} */
      'color-analysis'?: 'Fast' | 'Raster'
      /** @enum {string} */
      'color-detection'?: 'Cut' | 'Bleed'
      /** @description Page colors for front side of flat products or all pages of bound and folded products */
      colors?: components['schemas']['PageColorResource'][]
      /** @description Process settings */
      'process-settings'?: components['schemas']['ProcessSettingResource'][]
      /** @description Folding patterns to use */
      'folding-patterns'?: components['schemas']['FoldingPatternRef'][]
      /** @enum {string} */
      'binding-method'?: 'PerfectBound' | 'SaddleStitch' | 'None'
      /**
       * Format: int32
       * @description Total number of pages field for bound and folded work
       */
      pages?: number
      /**
       * Format: int32
       * @description Number of pages per section for multi-section bound work
       */
      'pages-per-section'?: number
      /**
       * @description Page binding edge for bound work
       * @enum {string}
       */
      'binding-edge'?: 'Top' | 'Bottom' | 'Right' | 'Left'
      /**
       * @description Jog edge for bound work.  When set, this edge must be perpendicular to the binding edge.  Setting jog to Bottom for left- or right-bound work results in 'Foot to Foot' page orientation.
       * @enum {string}
       */
      'jog-edge'?: 'Top' | 'Bottom' | 'Right' | 'Left'
      /**
       * @description Reading order of pages
       * @enum {string}
       */
      'reading-order'?: 'Normal' | 'Calendar'
      /** @description Whether bound part includes cover or not */
      'self-cover'?: boolean
      trim?: components['schemas']['trim']
      creep?: components['schemas']['creep']
    }
    /** @description Library reference */
    referenceMode: {
      /** @description Unique ID of asset */
      id?: string
      /** @description Path to asset */
      path?: string
    }
    /** @description Library reference */
    referenceProcess: {
      /** @description Unique ID of asset */
      id?: string
      /** @description Path to asset */
      path?: string
    }
    /** @description Library reference */
    'referenceProcess-type': {
      /** @description Unique ID of asset */
      id?: string
      /** @description Path to asset */
      path?: string
    }
    /** @description Library reference */
    referenceThing: {
      /** @description Unique ID of asset */
      id?: string
      /** @description Path to asset */
      path?: string
    }
    /** @description Library resource */
    resource: {
      /** @description Unique ID of asset */
      id?: string
      /** @description Path to asset */
      path?: string
      asset?: components['schemas']['Asset']
    }
    /** @description Create flat product resource */
    'create-flat-product-resource': {
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
      /** @description Unique name of the product */
      name?: string
      /**
       * Format: int32
       * @description Quantity of this product that needs to be produced
       */
      quantity?: number
      /**
       * Format: date-time
       * @description Product due date
       */
      'due-date'?: string
      /** @description Optional product group used in Imposition AI */
      group?: string
      /**
       * Format: int32
       * @description Optional priority of product starting from 1 as highest priority
       */
      priority?: number
      overruns?: components['schemas']['scalar-range']
      /** @description Product color specified as RGB or ARGB hex value with optional leading hex ('#') symbol */
      color?: string
      /** @description Optional product description */
      description?: string
      /** @description Optional notes to associate with product */
      notes?: string
      stock?: components['schemas']['resource']
      /** @description Part stock grade */
      grade?: string
      /** @description Optional product marks to apply to the front side of the product */
      marks?: components['schemas']['MarkAssetRef'][]
      /** @description Optional product marks to apply to the back side of the product */
      'back-marks'?: components['schemas']['MarkAssetRef'][]
      size?: components['schemas']['size']
      /** @description Path to artwork file when creating product from artwork or snapping artwork into die */
      'artwork-file'?: string
      /**
       * Format: int32
       * @description Page of artwork to use, defaults to page 1 when not defined
       */
      'artwork-page'?: number
      /** @enum {string} */
      grain?: 'Horizontal' | 'Vertical' | 'Consistent' | 'None'
      rotation?: components['schemas']['rotation']
      bleed?: components['schemas']['bleed']
      spacing?: components['schemas']['spacing']
      offcut?: components['schemas']['offcut']
      /** @enum {string} */
      'color-source'?: 'Artwork' | 'Specified'
      /** @enum {string} */
      'color-analysis'?: 'Fast' | 'Raster'
      /** @enum {string} */
      'color-detection'?: 'Cut' | 'Bleed'
      /** @description Page colors for front side of flat products or all pages of bound and folded products */
      colors?: components['schemas']['PageColorResource'][]
      /** @description Process settings */
      'process-settings'?: components['schemas']['ProcessSettingResource'][]
      /** @enum {string} */
      'page-handling'?: 'OnePerFile' | 'OnePerPage' | 'OnePerTwoPages'
      /** @enum {string} */
      'front-to-back'?: 'None' | 'Copy' | 'Mirror'
      /** @enum {string} */
      'die-design-source'?:
        | 'CAD'
        | 'ArtworkPaths'
        | 'ArtworkTrimbox'
        | 'CustomSize'
        | 'DieDesignLibrary'
        | 'PdfPlus'
      /** @description Whether to scale proportionally when either width or height are not specified.  When false, only the dimension that is specified is scaled.  Defaults to false. */
      'scale-proportionally'?: boolean
      /** @description Path to artwork file for back side of product when creating product from artwork or snapping artwork into die */
      'back-artwork-file'?: string
      /**
       * Format: int32
       * @description Page of artwork to use for back side of product
       */
      'back-artwork-page'?: number
      'die-design'?: components['schemas']['resource']
      /** @description Path of CAD file to use when defining product based on 1-up design in a CAD file */
      'cad-file'?: string
      /** @description Design name of 1-up CAD design in the CAD file, defaults to first 1-up in the CAD file when not defined */
      'cad-design'?: string
      'die-import-preset'?: components['schemas']['resource']
      /** @description PDF color to use for autosnapping artwork into 1-up die on the front side of the product */
      'autosnap-color'?: string
      /** @description PDF layer to use for autosnapping artwork into 1-up die on the front side of the product */
      'autosnap-layer'?: string
      /** @description PDF color to use for autosnapping artwork into 1-up die on the back side of the product */
      'back-autosnap-color'?: string
      /** @description PDF layer to use for autosnapping artwork into 1-up die on the back side of the product */
      'back-autosnap-layer'?: string
      /** @description Page back colors for back side of flat products */
      'back-colors'?: components['schemas']['PageColorResource'][]
      /** @enum {string} */
      'shape-handling'?: 'Largest' | 'Multiple'
      /**
       * Format: int32
       * @description Bundle size needed for product.  When set, Imposition AI tools will ensure layouts including this product will have run length multiples of this bundle size
       */
      'bundle-size'?: number
      /**
       * Format: int32
       * @description Max Bundle Splits allowed when bundle size is set.  When set, this property controls whether a given full bundle can to be broken into smaller bundle sizes for optimization reasons with default value of 0 signifying no splitting allowed
       */
      'max-bundle-splits'?: number
      templates?: components['schemas']['reference']
    }
    /** @description Create folded product resource */
    'create-folded-product-resource': {
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
      /** @description Unique name of the product */
      name?: string
      /**
       * Format: int32
       * @description Quantity of this product that needs to be produced
       */
      quantity?: number
      /**
       * Format: date-time
       * @description Product due date
       */
      'due-date'?: string
      /** @description Optional product group used in Imposition AI */
      group?: string
      /**
       * Format: int32
       * @description Optional priority of product starting from 1 as highest priority
       */
      priority?: number
      overruns?: components['schemas']['scalar-range']
      /** @description Product color specified as RGB or ARGB hex value with optional leading hex ('#') symbol */
      color?: string
      /** @description Optional product description */
      description?: string
      /** @description Optional notes to associate with product */
      notes?: string
      stock?: components['schemas']['resource']
      /** @description Part stock grade */
      grade?: string
      /** @description Optional product marks to apply to the front side of the product */
      marks?: components['schemas']['MarkAssetRef'][]
      /** @description Optional product marks to apply to the back side of the product */
      'back-marks'?: components['schemas']['MarkAssetRef'][]
      size?: components['schemas']['size']
      /** @description Path to artwork file when creating product from artwork or snapping artwork into die */
      'artwork-file'?: string
      /**
       * Format: int32
       * @description Page of artwork to use, defaults to page 1 when not defined
       */
      'artwork-page'?: number
      /** @enum {string} */
      grain?: 'Horizontal' | 'Vertical' | 'Consistent' | 'None'
      rotation?: components['schemas']['rotation']
      bleed?: components['schemas']['bleed']
      spacing?: components['schemas']['spacing']
      offcut?: components['schemas']['offcut']
      /** @enum {string} */
      'color-source'?: 'Artwork' | 'Specified'
      /** @enum {string} */
      'color-analysis'?: 'Fast' | 'Raster'
      /** @enum {string} */
      'color-detection'?: 'Cut' | 'Bleed'
      /** @description Page colors for front side of flat products or all pages of bound and folded products */
      colors?: components['schemas']['PageColorResource'][]
      /** @description Process settings */
      'process-settings'?: components['schemas']['ProcessSettingResource'][]
      /** @description Folding patterns to use */
      'folding-patterns'?: components['schemas']['FoldingPatternRef'][]
    }
    /** @description Create tiled product resource */
    'create-tiled-product-resource': {
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
      /** @description Unique name of the product */
      name?: string
      /**
       * Format: int32
       * @description Quantity of this product that needs to be produced
       */
      quantity?: number
      /**
       * Format: date-time
       * @description Product due date
       */
      'due-date'?: string
      /** @description Optional product group used in Imposition AI */
      group?: string
      /**
       * Format: int32
       * @description Optional priority of product starting from 1 as highest priority
       */
      priority?: number
      overruns?: components['schemas']['scalar-range']
      /** @description Product color specified as RGB or ARGB hex value with optional leading hex ('#') symbol */
      color?: string
      /** @description Optional product description */
      description?: string
      /** @description Optional notes to associate with product */
      notes?: string
      stock?: components['schemas']['resource']
      /** @description Part stock grade */
      grade?: string
      /** @description Optional product marks to apply to the front side of the product */
      marks?: components['schemas']['MarkAssetRef'][]
      /** @description Optional product marks to apply to the back side of the product */
      'back-marks'?: components['schemas']['MarkAssetRef'][]
      size?: components['schemas']['size']
      /** @description Path to artwork file when creating product from artwork or snapping artwork into die */
      'artwork-file'?: string
      /**
       * Format: int32
       * @description Page of artwork to use, defaults to page 1 when not defined
       */
      'artwork-page'?: number
      /** @enum {string} */
      grain?: 'Horizontal' | 'Vertical' | 'Consistent' | 'None'
      rotation?: components['schemas']['rotation']
      bleed?: components['schemas']['bleed']
      spacing?: components['schemas']['spacing']
      offcut?: components['schemas']['offcut']
      /** @enum {string} */
      'color-source'?: 'Artwork' | 'Specified'
      /** @enum {string} */
      'color-analysis'?: 'Fast' | 'Raster'
      /** @enum {string} */
      'color-detection'?: 'Cut' | 'Bleed'
      /** @description Page colors for front side of flat products or all pages of bound and folded products */
      colors?: components['schemas']['PageColorResource'][]
      /** @description Process settings */
      'process-settings'?: components['schemas']['ProcessSettingResource'][]
      /** @enum {string} */
      'page-handling'?: 'OnePerFile' | 'OnePerPage' | 'OnePerTwoPages'
      /** @enum {string} */
      'front-to-back'?: 'None' | 'Copy' | 'Mirror'
      /** @enum {string} */
      'die-design-source'?:
        | 'CAD'
        | 'ArtworkPaths'
        | 'ArtworkTrimbox'
        | 'CustomSize'
        | 'DieDesignLibrary'
        | 'PdfPlus'
      /** @description Whether to scale proportionally when either width or height are not specified.  When false, only the dimension that is specified is scaled.  Defaults to false. */
      'scale-proportionally'?: boolean
      /** @description Path to artwork file for back side of product when creating product from artwork or snapping artwork into die */
      'back-artwork-file'?: string
      /**
       * Format: int32
       * @description Page of artwork to use for back side of product
       */
      'back-artwork-page'?: number
      'die-design'?: components['schemas']['resource']
      /** @description Path of CAD file to use when defining product based on 1-up design in a CAD file */
      'cad-file'?: string
      /** @description Design name of 1-up CAD design in the CAD file, defaults to first 1-up in the CAD file when not defined */
      'cad-design'?: string
      'die-import-preset'?: components['schemas']['resource']
      /** @description PDF color to use for autosnapping artwork into 1-up die on the front side of the product */
      'autosnap-color'?: string
      /** @description PDF layer to use for autosnapping artwork into 1-up die on the front side of the product */
      'autosnap-layer'?: string
      /** @description PDF color to use for autosnapping artwork into 1-up die on the back side of the product */
      'back-autosnap-color'?: string
      /** @description PDF layer to use for autosnapping artwork into 1-up die on the back side of the product */
      'back-autosnap-layer'?: string
      /** @description Page back colors for back side of flat products */
      'back-colors'?: components['schemas']['PageColorResource'][]
      tiling?: components['schemas']['resource']
    }
    /** @description Edit bound part resource */
    'edit-bound-part-resource': {
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
      stock?: components['schemas']['resource']
      /** @description Part stock grade */
      grade?: string
      /** @enum {string} */
      grain?: 'Horizontal' | 'Vertical' | 'Consistent' | 'None'
      rotation?: components['schemas']['rotation']
      bleed?: components['schemas']['bleed']
      spacing?: components['schemas']['spacing']
      offcut?: components['schemas']['offcut']
      'page-size'?: components['schemas']['resource']
      /** @enum {string} */
      'binding-method'?: 'PerfectBound' | 'SaddleStitch' | 'None'
      /**
       * @description Binding edge of this part
       * @enum {string}
       */
      'binding-edge'?: 'Top' | 'Bottom' | 'Right' | 'Left'
      /**
       * @description Jog edge of this part
       * @enum {string}
       */
      'jog-edge'?: 'Top' | 'Bottom' | 'Right' | 'Left'
      /**
       * @description Reading order of this part
       * @enum {string}
       */
      'reading-order'?: 'Normal' | 'Calendar'
      /** @description Whether this part has a self cover or not */
      'self-cover'?: boolean
      trim?: components['schemas']['trim']
      'n-up'?: components['schemas']['n-up']
      creep?: components['schemas']['creep']
    }
    /** @description N-up settings */
    'n-up': {
      /**
       * Format: int32
       * @description N-up number
       */
      number: number
      gap: components['schemas']['ScalarValue']
    }
    /** @description Edit section resource */
    'edit-section-resource': Record<string, never>
    AddSignaturesResource: {
      /**
       * Format: int32
       * @description Index to insert new signatures at. Indexes start from 1. If this is null or out of range, signatures will be added to the end
       */
      index?: number
      pattern: components['schemas']['reference']
      /**
       * Format: int32
       * @description Number of signatures to add
       */
      count?: number
    }
    /** @description Edit product resource */
    'edit-product-resource': {
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
      /** @description Unique name of the product */
      name?: string
      /**
       * Format: int32
       * @description Quantity of this product that needs to be produced
       */
      quantity?: number
      /**
       * Format: date-time
       * @description Product due date
       */
      'due-date'?: string
      /** @description Optional product group used in Imposition AI */
      group?: string
      /**
       * Format: int32
       * @description Optional priority of product starting from 1 as highest priority
       */
      priority?: number
      overruns?: components['schemas']['scalar-range']
      /** @description Product color specified as RGB or ARGB hex value with optional leading hex ('#') symbol */
      color?: string
      /** @description Optional product description */
      description?: string
      /** @description Optional notes to associate with product */
      notes?: string
    }
    /** @description Edit flat resource */
    'edit-flat-resource': {
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
      bleed?: components['schemas']['bleed']
      spacing: components['schemas']['spacing']
      offcut?: components['schemas']['offcut']
      /**
       * Format: double
       * @description Component x-scale
       */
      'x-scale'?: number
      /**
       * Format: double
       * @description Component y-scale
       */
      'y-scale'?: number
      'die-design'?: components['schemas']['resource']
      /**
       * Format: int32
       * @description Bundle size
       */
      'bundle-size'?: number
      /**
       * Format: int32
       * @description Max Bundle Splits
       */
      'max-bundle-splits'?: number
    }
    /** @description Edit flat part resource */
    'edit-flat-part-resource': {
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
      stock?: components['schemas']['resource']
      /** @description Part stock grade */
      grade?: string
      /** @enum {string} */
      grain?: 'Horizontal' | 'Vertical' | 'Consistent' | 'None'
      rotation?: components['schemas']['rotation']
      bleed?: components['schemas']['bleed']
      spacing?: components['schemas']['spacing']
      offcut?: components['schemas']['offcut']
      templates?: components['schemas']['reference']
    }
    /** @description Edit folded part resource */
    'edit-folded-part-resource': {
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
      stock?: components['schemas']['resource']
      /** @description Part stock grade */
      grade?: string
      /** @enum {string} */
      grain?: 'Horizontal' | 'Vertical' | 'Consistent' | 'None'
      rotation?: components['schemas']['rotation']
      bleed?: components['schemas']['bleed']
      spacing?: components['schemas']['spacing']
      offcut?: components['schemas']['offcut']
      'page-size'?: components['schemas']['resource']
    }
    /** @description Component - base object for product 2.0 component model */
    componentObjectObjectObject: {
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name: string
      'die-design': components['schemas']['die-design']
      spacing: components['schemas']['spacing']
      offcut?: components['schemas']['offcut']
      /** @enum {string} */
      type: 'Flat' | 'Bound' | 'Folded' | 'Tiled'
      layouts?: components['schemas']['layouts']
      /**
       * Format: int32
       * @description Total placed count of this component across all layouts in the project
       */
      placed?: number
      /**
       * Format: int32
       * @description Total number of overruns above ordered quantity
       */
      overrun?: number
      /** @description Whether order quantity of this component has been fulfilled */
      fulfilled?: boolean
      /**
       * Format: int32
       * @description Total number of copies of this component being produced in the project
       */
      total?: number
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    } & (
      | components['schemas']['flat']
      | components['schemas']['bound-signature']
      | components['schemas']['folded-signature']
      | components['schemas']['tile-flat']
    )
    /** @description Component - base object for product 2.0 component model */
    component: {
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name: string
      'die-design': components['schemas']['die-design']
      spacing: components['schemas']['spacing']
      offcut?: components['schemas']['offcut']
      /** @enum {string} */
      type: 'Flat' | 'Bound' | 'Folded' | 'Tiled'
      layouts?: components['schemas']['layouts']
      /**
       * Format: int32
       * @description Total placed count of this component across all layouts in the project
       */
      placed?: number
      /**
       * Format: int32
       * @description Total number of overruns above ordered quantity
       */
      overrun?: number
      /** @description Whether order quantity of this component has been fulfilled */
      fulfilled?: boolean
      /**
       * Format: int32
       * @description Total number of copies of this component being produced in the project
       */
      total?: number
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    } & (
      | components['schemas']['flat']
      | components['schemas']['bound-signature']
      | components['schemas']['folded-signature']
      | components['schemas']['tile-flat']
    )
    /** @description Edit component resource */
    'edit-component-resource': {
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
      bleed?: components['schemas']['bleed']
      spacing: components['schemas']['spacing']
      offcut?: components['schemas']['offcut']
      /**
       * Format: double
       * @description Component x-scale
       */
      'x-scale'?: number
      /**
       * Format: double
       * @description Component y-scale
       */
      'y-scale'?: number
    }
    /** @description Props resource */
    'props-resource': {
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description Part - base object for product 2.0 part model */
    part: {
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name: string
      /** @enum {string} */
      grain: 'Horizontal' | 'Vertical' | 'Consistent' | 'None'
      /** @description Part pages */
      pages: components['schemas']['page'][]
      /** @description Part process settings */
      'process-settings': components['schemas']['process-setting'][]
      rotation: components['schemas']['rotation']
      /** @enum {string} */
      type: 'Flat' | 'Bound' | 'Folded' | 'Tiled'
      material?: components['schemas']['material']
      /** @description Part processes */
      processes?: components['schemas']['process'][]
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    } & (
      | components['schemas']['flat-part']
      | components['schemas']['bound-part']
      | components['schemas']['folded-part']
      | components['schemas']['tiled-part']
    )
    CreatePagesResource: {
      size?: components['schemas']['resource']
      bleed?: components['schemas']['margins']
      /**
       * Format: int32
       * @description Number of pages to add
       */
      count?: number
    }
    /** @description Path resource */
    'path-resource': {
      /** @description Path to file */
      path?: string
    }
    /** @description Page color object */
    'page-color': {
      /** @description Color (spot) name */
      name: string
      /** @enum {string} */
      type?: 'CMYK' | 'Lab' | 'RGB'
      /** @description Color values */
      values?: number[]
      /**
       * Format: double
       * @description Color coverage
       */
      coverage?: number
      process: components['schemas']['process']
    }
    /** @description Edit page resource */
    'edit-page-resource': {
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
      /** @enum {string} */
      'color-analysis'?: 'Fast' | 'Raster'
      /** @enum {string} */
      'color-detection'?: 'Cut' | 'Bleed'
      /** @enum {string} */
      'color-source'?: 'Artwork' | 'Specified'
      /** @enum {string} */
      'mark-color-source'?: 'PageColors' | 'ArtworkColors'
      /** @description Autosnap */
      autosnap?: boolean
      /** @description Autosnap Color */
      'autosnap-color'?: string
      /** @description Autosnap Layer */
      'autosnap-layer'?: string
      size?: components['schemas']['resource']
      position?: components['schemas']['point']
      /**
       * Format: double
       * @description Rotation
       */
      rotation?: number
      /**
       * Format: double
       * @description X-Scale
       */
      'x-scale'?: number
      /**
       * Format: double
       * @description Y-Scale
       */
      'y-scale'?: number
      /** @description Visible */
      visible?: boolean
      /** @description Locked */
      locked?: boolean
      bleed?: components['schemas']['margins']
      creep?: components['schemas']['ScalarValue']
    }
    /** @description Point (x,y coordinates) */
    point: {
      /**
       * Format: double
       * @description X coordinate
       */
      x: number
      /**
       * Format: double
       * @description Y coordinate
       */
      y: number
    }
    /** @description Edit page file */
    'edit-page-file': {
      /** @description File path */
      path?: string
      /**
       * Format: int32
       * @description File page number
       */
      number?: number
    }
    /** @description Page Layer */
    'page-layer': {
      /** @description Visible */
      visible?: boolean
      /** @description Layer name */
      name?: string
      /** @description Language of layer */
      language?: string
      /** @description Locked state of layer */
      locked?: boolean
    }
    /** @description Edit page layer */
    'edit-page-layer': {
      /** @description Layer visibility */
      visible?: boolean
    }
    /** @description Edit tiled part resource */
    'edit-tiled-part-resource': {
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
      stock?: components['schemas']['resource']
      /** @description Part stock grade */
      grade?: string
      /** @enum {string} */
      grain?: 'Horizontal' | 'Vertical' | 'Consistent' | 'None'
      rotation?: components['schemas']['rotation']
      bleed?: components['schemas']['bleed']
      spacing?: components['schemas']['spacing']
      offcut?: components['schemas']['offcut']
      'die-design'?: components['schemas']['resource']
      /**
       * Format: double
       * @description X-scale of this tiled part
       */
      'x-scale'?: number
      /**
       * Format: double
       * @description Y-scale of this tiled part
       */
      'y-scale'?: number
      'tiling-preset'?: components['schemas']['resource']
    }
    /** @description Edit tile resource */
    'edit-tile-resource': {
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
      bleed?: components['schemas']['bleed']
      spacing: components['schemas']['spacing']
      offcut?: components['schemas']['offcut']
      /**
       * Format: double
       * @description Component x-scale
       */
      'x-scale'?: number
      /**
       * Format: double
       * @description Component y-scale
       */
      'y-scale'?: number
      'die-design'?: components['schemas']['resource']
      tile?: components['schemas']['tile']
    }
    /** @description Repeat Template */
    'repeat-template': {
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name: string
      /**
       * Format: date-time
       * @description Created On
       */
      'created-on'?: string
      /**
       * Format: date-time
       * @description Modified On
       */
      'modified-on'?: string
      /** @description Version */
      version?: string
      /** @description Description */
      description?: string
      /** @description Notes */
      notes?: string
      /**
       * Format: int32
       * @description Rows
       */
      rows: number
      /**
       * Format: int32
       * @description Columns
       */
      columns: number
      /** @description Row space */
      'row-space': string
      /** @description Column space */
      'column-space': string
      /**
       * Format: double
       * @description Rotation
       */
      rotation?: number
      /** @description Path */
      path?: string
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description REST Script Context */
    RestScriptContext: {
      script?: components['schemas']['resourceScriptAsset']
      /** @description Optional data to pass into the script (for example a json blob) */
      data?: string
    }
    ScriptAsset: {
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name: string
      /**
       * Format: date-time
       * @description Created On
       */
      'created-on'?: string
      /**
       * Format: date-time
       * @description Modified On
       */
      'modified-on'?: string
      /** @description Version */
      version?: string
      /** @description Description */
      description?: string
      /** @description Notes */
      notes?: string
      /** @description The script code */
      code?: string
      /** @description The file the script came from (if any) */
      'script-file'?: string
      /** @description Path */
      path?: string
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description Library resource */
    resourceScriptAsset: {
      /** @description Unique ID of asset */
      id?: string
      /** @description Path to asset */
      path?: string
      asset?: components['schemas']['ScriptAsset']
    }
    /** @description Die Design entity */
    DieDesignEntity: {
      /** @description Name of library item */
      name: string
      /** @description Unique ID of this item (auto-generated, read-only) */
      id?: string
      /** @description Optional external ID of media item */
      'external-id'?: string
      /** @description Asset description */
      description?: string
      /** @description Full path of CAD file used during import */
      path?: string
      /** @description Width of die design cut lines in default units */
      width: string
      /** @description Height of die design cut lines in default units */
      height: string
      thumbnail?: components['schemas']['ThumbnailEntity']
    }
    /** @description Import die design from a CAD file into Die Design Library */
    ImportDieDesignEntity: {
      /** @description Name of template asset to create including folders if desired.  If name is not specified, file name minus extension will be used as the name. */
      name?: string
      /** @description ID of asset to use.  If not specified a unique ID will be generated. */
      id?: string
      /** @description Boolean controlling whether to create a folder when folder or parent folder(s) does not exist.  By default non-existent folders are not created automatically. */
      'create-folder'?: boolean
      /** @description Full path of template file to import */
      path: string
      /** @description Name of preset to use during import */
      preset?: string
      /** @description Name of die in CAD file to import.  By default if die name is not specified and the CAD file contains multiple dies, the first die listed in the CAD data is used. */
      'die-name'?: string
    }
    /** @description Mode */
    mode: {
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name: string
      /**
       * Format: date-time
       * @description Created On
       */
      'created-on'?: string
      /**
       * Format: date-time
       * @description Modified On
       */
      'modified-on'?: string
      /** @description Version */
      version?: string
      /** @description Description */
      description?: string
      /** @description Notes */
      notes?: string
      /** @description External ID */
      'external-id'?: string
      /** @description Path */
      path?: string
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description Stock Type */
    'stock-type': {
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name: string
      /**
       * Format: date-time
       * @description Created On
       */
      'created-on'?: string
      /**
       * Format: date-time
       * @description Modified On
       */
      'modified-on'?: string
      /** @description Version */
      version?: string
      /** @description Description */
      description?: string
      /** @description Notes */
      notes?: string
      /** @description External ID */
      'external-id'?: string
      /** @description Path */
      path?: string
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description List of rolls specified for this grade */
    Roll: {
      /** @description Unique ID */
      id?: string
      /** @description Read-only roll name derived from the width of the roll */
      name?: string
      /**
       * Format: date-time
       * @description Created On
       */
      'created-on'?: string
      /**
       * Format: date-time
       * @description Modified On
       */
      'modified-on'?: string
      /** @description Version */
      version?: string
      /** @description Description */
      description?: string
      /** @description Notes */
      notes?: string
      /** @description External ID */
      'external-id'?: string
      /**
       * Format: double
       * @description Cost of this sheet when cost not defined from grade
       */
      cost?: number
      /** @enum {string} */
      'cost-units'?:
        | 'FromGrade'
        | 'PerSheet'
        | 'Per500Sheets'
        | 'Per1000Sheets'
        | 'PerLb'
        | 'Per500Lb'
        | 'Per1000Lb'
        | 'PerKg'
        | 'Per1000Kg'
        | 'PerFt2'
        | 'PerM2'
        | 'PerFt'
        | 'PerM'
        | 'PerMSF'
        | 'PerMSI'
      /** @enum {string} */
      type: 'Sheet' | 'Roll'
      /** @description Path */
      path?: string
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description Grade library item */
    grade: {
      /** @description Unique ID */
      id?: string
      /** @description Read-only grade name derived from weight and/or caliper of the grade depending on grade display */
      name?: string
      /**
       * Format: date-time
       * @description Created On
       */
      'created-on'?: string
      /**
       * Format: date-time
       * @description Modified On
       */
      'modified-on'?: string
      /** @description Version */
      version?: string
      /** @description Description */
      description?: string
      /** @description Notes */
      notes?: string
      /** @description External ID */
      'external-id'?: string
      /** @enum {string} */
      'grade-display'?: 'Weight' | 'Caliper' | 'Both'
      /**
       * Format: double
       * @description Grade weight value
       */
      weight: number
      /** @enum {string} */
      'weight-units'?: 'GSM' | 'Lb'
      /** @enum {string} */
      'weight-type'?:
        | 'Text'
        | 'Book'
        | 'Bond'
        | 'Offset'
        | 'Cover'
        | 'Bristol'
        | 'Index'
        | 'Tag'
        | 'Card'
      /** @description Caliper value */
      caliper: string
      /**
       * Format: double
       * @description Cost of grade
       */
      cost?: number
      /** @enum {string} */
      'cost-units'?:
        | 'FromGrade'
        | 'PerSheet'
        | 'Per500Sheets'
        | 'Per1000Sheets'
        | 'PerLb'
        | 'Per500Lb'
        | 'Per1000Lb'
        | 'PerKg'
        | 'Per1000Kg'
        | 'PerFt2'
        | 'PerM2'
        | 'PerFt'
        | 'PerM'
        | 'PerMSF'
        | 'PerMSI'
      /** @description When true, any sheet size that can fit on a given press is assumed available via a sheet converter, custom order, etc. */
      'any-sheet-size'?: boolean
      /** @description List of sheets specified for this grade */
      sheets?: components['schemas']['sheet'][]
      /** @description List of rolls specified for this grade */
      rolls?: components['schemas']['Roll'][]
      /** @description Path */
      path?: string
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description Sheet library item */
    sheet: {
      /** @description Unique ID */
      id?: string
      /** @description Read-only sheet name derived from the sheet dimensions */
      name?: string
      /**
       * Format: date-time
       * @description Created On
       */
      'created-on'?: string
      /**
       * Format: date-time
       * @description Modified On
       */
      'modified-on'?: string
      /** @description Version */
      version?: string
      /** @description Description */
      description?: string
      /** @description Notes */
      notes?: string
      /** @description External ID */
      'external-id'?: string
      /** @description First dimension of this sheet */
      dimension1: string
      /**
       * Format: double
       * @description Cost of this sheet when cost not defined from grade
       */
      cost?: number
      /** @enum {string} */
      'cost-units'?:
        | 'FromGrade'
        | 'PerSheet'
        | 'Per500Sheets'
        | 'Per1000Sheets'
        | 'PerLb'
        | 'Per500Lb'
        | 'Per1000Lb'
        | 'PerKg'
        | 'Per1000Kg'
        | 'PerFt2'
        | 'PerM2'
        | 'PerFt'
        | 'PerM'
        | 'PerMSF'
        | 'PerMSI'
      /** @description Second dimension of this sheet */
      dimension2: string
      /** @enum {string} */
      grain?: 'Long' | 'Short' | 'None'
      /** @enum {string} */
      type: 'Sheet' | 'Roll'
      /** @description Path */
      path?: string
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description Stock library item */
    stock: {
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name: string
      /**
       * Format: date-time
       * @description Created On
       */
      'created-on'?: string
      /**
       * Format: date-time
       * @description Modified On
       */
      'modified-on'?: string
      /** @description Version */
      version?: string
      /** @description Description */
      description?: string
      /** @description Notes */
      notes?: string
      /** @description External ID */
      'external-id'?: string
      'stock-type'?: components['schemas']['reference']
      /** @description Stock vendor name */
      vendor?: string
      /** @description List of grades specified for this stock */
      grades?: components['schemas']['grade'][]
      /** @description Path */
      path?: string
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description Template entity */
    TemplateEntity: {
      /** @description Name of library item */
      name: string
      /** @description Unique ID of this item (auto-generated, read-only) */
      id?: string
      /** @description Optional external ID of media item */
      'external-id'?: string
      /** @description Asset description */
      description?: string
      /** @description Full path of template file used during import */
      path?: string
      /** @description Width of template in default units */
      width: string
      /** @description Height of template in default units */
      height: string
      thumbnail?: components['schemas']['ThumbnailEntity']
    }
    /** @description Import template into Template Library */
    ImportTemplateEntity: {
      /** @description Name of template asset to create including folders if desired.  If name is not specified, file name minus extension will be used as the name. */
      name?: string
      /** @description ID of asset to use.  If not specified a unique ID will be generated. */
      id?: string
      /** @description Boolean controlling whether to create a folder when folder or parent folder(s) does not exist.  By default non-existent folders are not created automatically. */
      'create-folder'?: boolean
      /** @description Full path of template file to import */
      path: string
      /** @description Name of preset to use during import */
      preset?: string
      /** @description Whether or not to import individual die designs from this template into the Die Designs library */
      'import-die-designs'?: boolean
      /** @description Optional folder in Die Designs library to import die designs from this template into.  Ignored if import die designs is disabled and defaults to root folder if not set. */
      'die-designs-folder'?: string
    }
    /** @description Folding pattern library item */
    FoldingPatternEntity: {
      /** @description Name of library item */
      name: string
      /** @description Unique ID of this item (auto-generated, read-only) */
      id?: string
      /** @description Optional external ID of media item */
      'external-id'?: string
      /** @description Asset description */
      description?: string
    }
    /** @description Mark set library item */
    MarkSetEntity: {
      /** @description Name of library item */
      name: string
      /** @description Unique ID of this item (auto-generated, read-only) */
      id?: string
      /** @description Optional external ID of media item */
      'external-id'?: string
      /** @description Asset description */
      description?: string
    }
    /** @description Mark library item */
    MarkEntity: {
      /** @description Name of library item */
      name: string
      /** @description Unique ID of this item (auto-generated, read-only) */
      id?: string
      /** @description Optional external ID of media item */
      'external-id'?: string
      /** @description Asset description */
      description?: string
      /** @description Whether mark is smart or manual */
      smart?: boolean
      /**
       * @description Smart mark anchor
       * @enum {string}
       */
      anchor?: 'Plate' | 'Sheet' | 'Group' | 'Product'
    }
    MarkAsset: {
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name: string
      /**
       * Format: date-time
       * @description Created On
       */
      'created-on'?: string
      /**
       * Format: date-time
       * @description Modified On
       */
      'modified-on'?: string
      /** @description Version */
      version?: string
      /** @description Description */
      description?: string
      /** @description Notes */
      notes?: string
      /** @description Path */
      path?: string
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description Mark conditional rules */
    PropertyRuleGroup: {
      /** @enum {string} */
      logic?: 'And' | 'Or'
      empty?: boolean
    }
    /** @description Advanced placement settings */
    'advanced-placement': {
      /**
       * Format: double
       * @description Mark rotation
       */
      rotation?: number
      /** @description Mark mirroring */
      mirror?: boolean
      margins?: components['schemas']['margins']
      'horizontal-placement'?: components['schemas']['horizontal-placement']
      'vertical-placement'?: components['schemas']['vertical-placement']
    }
    /** @description Barcode Mark */
    'barcode-mark': {
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name: string
      /**
       * Format: date-time
       * @description Created On
       */
      'created-on'?: string
      /**
       * Format: date-time
       * @description Modified On
       */
      'modified-on'?: string
      /** @description Version */
      version?: string
      /** @description Description */
      description?: string
      /** @description Notes */
      notes?: string
      placement: components['schemas']['mark-placement']
      conditions: components['schemas']['PropertyRuleGroup']
      'mark-appearance': components['schemas']['barcode-mark-props']
      /** @enum {string} */
      type: 'Shape' | 'Barcode' | 'Collation' | 'Custom'
      /** @description Path */
      path?: string
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description Barcode mark props */
    'barcode-mark-props': {
      general?: components['schemas']['general-props']
      size?: components['schemas']['barcode-size-props']
    }
    /** @description Barcode size props */
    'barcode-size-props': {
      width?: components['schemas']['length']
      height?: components['schemas']['length']
    }
    /** @description Basic placement settings */
    'basic-placement': {
      /** @description Mark placement rules */
      rules?: components['schemas']['mark-rule'][]
      /** @description Specify whether mark rules apply to the anchor global rect or local orientation */
      'rules-are-global'?: boolean
    }
    /** @description Bleed rule */
    'bleed-rule': {
      /** @enum {string} */
      mark?: 'Right' | 'Left' | 'Center' | 'Bottom' | 'Top'
      offset?: components['schemas']['ScalarValue']
    }
    /** @description Collation mark props */
    'collation-mark-props': {
      general?: components['schemas']['general-props']
      size?: components['schemas']['collation-size-props']
    }
    /** @description Collation size props */
    'collation-size-props': {
      width?: components['schemas']['length']
      height?: components['schemas']['length']
    }
    /** @description Custom mark props */
    'custom-mark-props': {
      general?: components['schemas']['general-props']
      size?: components['schemas']['custom-size-props']
    }
    /** @description Custom size props */
    'custom-size-props': {
      width?: components['schemas']['length']
      height?: components['schemas']['length']
      /**
       * @description PDF Box type
       * @enum {string}
       */
      'pdf-box-type': 'MediaBox' | 'BleedBox' | 'CropBox' | 'TrimBox' | 'ArtBox'
    }
    /** @description Dielines rule */
    'dielines-rule': {
      /** @enum {string} */
      mark?: 'Right' | 'Left' | 'Center' | 'Bottom' | 'Top'
      offset?: components['schemas']['ScalarValue']
      'tool-type'?: components['schemas']['tool-type']
    }
    /** @description Dynamic length */
    'dynamic-length': {
      value?: components['schemas']['ScalarValue']
      /** @enum {string} */
      operand?:
        | 'Plate'
        | 'PlatePunch'
        | 'Sheet'
        | 'ContentMargins'
        | 'ImageMargins'
        | 'Gripper'
        | 'Group'
        | 'DieTemplate'
        | 'StepAndRepeat'
        | 'Component'
        | 'Flat'
        | 'Signature'
        | 'BoundSignature'
        | 'FoldedSignature'
        | 'Tile'
        | 'Page'
      /** @enum {string} */
      mode?: 'Percent' | 'Adjustment'
    }
    /** @description Fill */
    fill: {
      color: components['schemas']['mark-color']
    }
    /** @description Fixed length */
    'fixed-length': {
      value?: components['schemas']['ScalarValue']
    }
    /** @description Folds rule */
    'folds-rule': {
      /** @enum {string} */
      mark?: 'Right' | 'Left' | 'Center' | 'Bottom' | 'Top'
      offset?: components['schemas']['ScalarValue']
    }
    /** @description General props */
    'general-props': {
      /** @description Layer */
      layer?: string
      stroke?: components['schemas']['stroke']
      fill?: components['schemas']['fill']
      underprint: components['schemas']['underprint']
      clipping: components['schemas']['underprint']
      /** @enum {string} */
      'overprint-mode': 'None' | 'Standard' | 'Illustrator'
    }
    /** @description Gutters rule */
    'gutters-rule': {
      /** @enum {string} */
      mark?: 'Right' | 'Left' | 'Center' | 'Bottom' | 'Top'
      offset?: components['schemas']['ScalarValue']
    }
    /** @description Horizontal placement */
    'horizontal-placement': {
      /** @enum {string} */
      'anchor-option'?:
        | 'Rules'
        | 'MaxSpacing'
        | 'Quantity'
        | 'Gutters'
        | 'Folds'
        | 'Bleed'
        | 'Dielines'
      'repeat-settings': components['schemas']['repeat-settings']
      /** @description rules */
      rules?: components['schemas']['x-rule'][]
      'max-spacing'?: components['schemas']['max-spacing-rule']
      quantity?: components['schemas']['quantity-rule']
      gutters?: components['schemas']['gutters-rule']
      folds?: components['schemas']['folds-rule']
      bleed?: components['schemas']['bleed-rule']
      dielines?: components['schemas']['dielines-rule']
    }
    /** @description Length */
    length: {
      value?: components['schemas']['ScalarValue']
    } & components['schemas']['shape-mark']
    /** @description Mapping */
    mapping: {
      /** @enum {string} */
      source: 'Spot' | 'Layer'
      /** @enum {string} */
      'paint-type'?:
        | 'Filled'
        | 'Stroked'
        | 'FilledOrStroked'
        | 'FilledAndStroked'
      /** @enum {string} */
      'text-match': 'Equals' | 'StartsWith' | 'Contains'
      /** @description Mapping text */
      text: string
      offset?: components['schemas']['ScalarValue']
      /** @enum {string} */
      'join-style'?: 'None' | 'Miter' | 'Bevel' | 'Round'
      'miter-limit'?: components['schemas']['ScalarValue']
    }
    /** @description Mark - base object marks */
    mark: {
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name: string
      /**
       * Format: date-time
       * @description Created On
       */
      'created-on'?: string
      /**
       * Format: date-time
       * @description Modified On
       */
      'modified-on'?: string
      /** @description Version */
      version?: string
      /** @description Description */
      description?: string
      /** @description Notes */
      notes?: string
      placement: components['schemas']['mark-placement']
      conditions: components['schemas']['PropertyRuleGroup']
      'mark-appearance': components['schemas']['mark-appearance']
      /** @enum {string} */
      type: 'Shape' | 'Barcode' | 'Collation' | 'Custom'
      /** @description Path */
      path?: string
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    } & (
      | components['schemas']['shape-mark']
      | components['schemas']['barcode-mark']
    )
    /** @description Mark appearance */
    'mark-appearance': {
      general?: components['schemas']['general-props']
      size?: components['schemas']['size-props']
    } & components['schemas']['shape-mark']
    /** @description Mark color */
    'mark-color': components['schemas']['shape-mark']
    /** @description Mark placement settings */
    'mark-placement': {
      /** @enum {string} */
      type: 'Smart' | 'Manual'
      /** @enum {string} */
      anchor:
        | 'Plate'
        | 'PlatePunch'
        | 'Sheet'
        | 'ContentMargins'
        | 'ImageMargins'
        | 'Gripper'
        | 'Group'
        | 'DieTemplate'
        | 'StepAndRepeat'
        | 'Component'
        | 'Flat'
        | 'Signature'
        | 'BoundSignature'
        | 'FoldedSignature'
        | 'Tile'
        | 'Page'
      /** @enum {string} */
      mode: 'Basic' | 'Advanced'
      'basic-placement': components['schemas']['basic-placement']
      'advanced-placement': components['schemas']['advanced-placement']
      /** @description Place mark instances on bothsides */
      'both-sides'?: boolean
    }
    /** @description Mark rule */
    'mark-rule': {
      /**
       * Format: double
       * @description Mark rotation
       */
      rotation?: number
    }
    /** @description Max spacing rule */
    'max-spacing-rule': {
      /** @enum {string} */
      mark?: 'Right' | 'Left' | 'Center' | 'Bottom' | 'Top'
      offset?: components['schemas']['ScalarValue']
      'max-spacing'?: components['schemas']['ScalarValue']
    }
    /** @description Quantity rule */
    'quantity-rule': {
      /** @enum {string} */
      mark?: 'Right' | 'Left' | 'Center' | 'Bottom' | 'Top'
      offset?: components['schemas']['ScalarValue']
      /**
       * Format: int32
       * @description Quantity of marks to place
       */
      quantity?: number
    }
    /** @description Repeat settings */
    'repeat-settings': {
      /** @enum {string} */
      type:
        | 'All'
        | 'Range'
        | 'Outer'
        | 'Inner'
        | 'First'
        | 'Last'
        | 'Odd'
        | 'Even'
      /** @description Repeat settings range */
      range?: number[]
    }
    /** @description Shape Mark */
    'shape-mark': {
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name: string
      /**
       * Format: date-time
       * @description Created On
       */
      'created-on'?: string
      /**
       * Format: date-time
       * @description Modified On
       */
      'modified-on'?: string
      /** @description Version */
      version?: string
      /** @description Description */
      description?: string
      /** @description Notes */
      notes?: string
      placement: components['schemas']['mark-placement']
      conditions: components['schemas']['PropertyRuleGroup']
      'mark-appearance': components['schemas']['shape-mark-props']
      /** @enum {string} */
      'shape-type':
        | 'Line'
        | 'Rectangle'
        | 'Ellipse'
        | 'Cross'
        | 'CrossHair'
        | 'SquareCross'
        | 'CmykCross'
        | 'SquareCrossFilled'
        | 'Target'
        | 'TargetCmyk'
        | 'HalfTarget'
        | 'Corner1'
        | 'SGArrowLeft'
        | 'SGArrowRight'
        | 'SGParallelGuideLeft'
        | 'SGParallelGuideRight'
      /** @enum {string} */
      type: 'Shape' | 'Barcode' | 'Collation' | 'Custom'
      /** @description Path */
      path?: string
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description Shape mark props */
    'shape-mark-props': {
      general?: components['schemas']['general-props']
      size?: components['schemas']['shape-size-props']
    }
    /** @description Shape size props */
    'shape-size-props': {
      width?: components['schemas']['length']
      height?: components['schemas']['length']
      diameter?: components['schemas']['length']
      'gap-length'?: components['schemas']['length']
      bleed?: components['schemas']['length']
    }
    /** @description Simple mark props */
    'simple-mark-props': {
      general?: components['schemas']['general-props']
      size?: components['schemas']['size-props']
    }
    /** @description Size props */
    'size-props': {
      width?: components['schemas']['length']
      height?: components['schemas']['length']
    } & components['schemas']['shape-mark']
    /** @description Stroke */
    stroke: {
      color: components['schemas']['mark-color']
      width?: components['schemas']['ScalarValue']
      /**
       * @description Cap-style
       * @enum {string}
       */
      'cap-style'?: 'Butt' | 'Round' | 'None' | 'Square'
      /**
       * @description Join-style
       * @enum {string}
       */
      'join-style'?: 'Miter' | 'Round' | 'Bevel'
      /**
       * Format: double
       * @description Miter-limit
       */
      'miter-limit'?: number
      /** @description Dash pattern */
      'dash-pattern'?: components['schemas']['ScalarValue'][]
    }
    /** @description Tool type */
    'tool-type': {
      /** @description Unique ID */
      id?: string
      /** @description Name */
      name: string
      /**
       * Format: date-time
       * @description Created On
       */
      'created-on'?: string
      /**
       * Format: date-time
       * @description Modified On
       */
      'modified-on'?: string
      /** @description Version */
      version?: string
      /** @description Description */
      description?: string
      /** @description Notes */
      notes?: string
      /** @description External ID */
      'external-id'?: string
      process: components['schemas']['reference']
      width: components['schemas']['ScalarValue']
      /** @description Tool type mappings */
      mappings: components['schemas']['mapping'][]
      /** @description Path */
      path?: string
      /** @description Custom properties */
      properties?: components['schemas']['propertyObject'][]
    }
    /** @description Underprint */
    underprint: {
      /** @enum {string} */
      type: 'None' | 'Anchor' | 'AnchorShape' | 'AnchorBleed' | 'MarkBounds'
      margins?: components['schemas']['margins']
    }
    /** @description Vertical placement */
    'vertical-placement': {
      /** @enum {string} */
      'anchor-option'?:
        | 'Rules'
        | 'MaxSpacing'
        | 'Quantity'
        | 'Gutters'
        | 'Folds'
        | 'Bleed'
        | 'Dielines'
      'repeat-settings': components['schemas']['repeat-settings']
      /** @description rules */
      rules?: components['schemas']['y-rule'][]
      'max-spacing'?: components['schemas']['max-spacing-rule']
      quantity?: components['schemas']['quantity-rule']
      gutters?: components['schemas']['gutters-rule']
      folds?: components['schemas']['folds-rule']
      bleed?: components['schemas']['bleed-rule']
      dielines?: components['schemas']['dielines-rule']
    }
    /** @description X-rule */
    'x-rule': {
      /** @enum {string} */
      mark?: 'Right' | 'Left' | 'Center' | 'Bottom' | 'Top'
      offset?: components['schemas']['ScalarValue']
      /** @enum {string} */
      anchor?: 'Right' | 'Left' | 'Center' | 'Bottom' | 'Top'
      /**
       * Format: double
       * @description Scale
       */
      scale?: number
    }
    /** @description Y-rule */
    'y-rule': {
      /** @enum {string} */
      mark?: 'Right' | 'Left' | 'Center' | 'Bottom' | 'Top'
      offset?: components['schemas']['ScalarValue']
      /** @enum {string} */
      anchor?: 'Right' | 'Left' | 'Center' | 'Bottom' | 'Top'
      /**
       * Format: double
       * @description Scale
       */
      scale?: number
    }
    /** @description Grade library item */
    GradeEntity: {
      /** @description Name of library item */
      name: string
      /** @description Unique ID of this item (auto-generated, read-only) */
      id?: string
      /** @description Optional external ID of media item */
      'external-id'?: string
      /** @description Asset description */
      description?: string
      /**
       * @description Grade display
       * @enum {string}
       */
      'grade-display'?: 'Weight' | 'Caliper' | 'Both'
      /**
       * Format: double
       * @description Grade weight value
       */
      weight: number
      /**
       * @description Grade weight units
       * @enum {string}
       */
      'weight-units'?: 'GSM' | 'Lb'
      /**
       * @description Grade weight type for pound (Lb) standard weights
       * @enum {string}
       */
      'weight-type'?:
        | 'Text'
        | 'Book'
        | 'Bond'
        | 'Offset'
        | 'Cover'
        | 'Bristol'
        | 'Index'
        | 'Tag'
        | 'Card'
      /** @description Caliper value */
      caliper: string
      /**
       * Format: double
       * @description Cost of grade
       */
      cost?: number
      /**
       * @description Cost unit type of grade
       * @enum {string}
       */
      'cost-units'?:
        | 'FromGrade'
        | 'PerSheet'
        | 'Per500Sheets'
        | 'Per1000Sheets'
        | 'PerLb'
        | 'Per500Lb'
        | 'Per1000Lb'
        | 'PerKg'
        | 'Per1000Kg'
        | 'PerFt2'
        | 'PerM2'
        | 'PerFt'
        | 'PerM'
        | 'PerMSF'
        | 'PerMSI'
      /** @description When true, any sheet size that can fit on a given press is assumed available via a sheet converter, custom order, etc. */
      'any-sheet-size'?: boolean
      /** @description List of sheets specified for this grade */
      sheets?: components['schemas']['SheetEntity'][]
      /** @description List of rolls specified for this grade */
      rolls?: components['schemas']['RollEntity'][]
    }
    /** @description Roll library item */
    RollEntity: {
      /** @description Name of library item */
      name: string
      /** @description Unique ID of this item (auto-generated, read-only) */
      id?: string
      /** @description Optional external ID of media item */
      'external-id'?: string
      /** @description Asset description */
      description?: string
      /** @description ID of the stock of this roll */
      'stock-id'?: string
      /** @description ID of the grade of this roll */
      'grade-id'?: string
      /** @description Roll width */
      width: string
      /**
       * Format: double
       * @description Cost of this roll when cost not defined from grade
       */
      cost?: number
      /**
       * @description Cost unit type of this roll when not defined from grade
       * @enum {string}
       */
      'cost-units'?:
        | 'FromGrade'
        | 'PerSheet'
        | 'Per500Sheets'
        | 'Per1000Sheets'
        | 'PerLb'
        | 'Per500Lb'
        | 'Per1000Lb'
        | 'PerKg'
        | 'Per1000Kg'
        | 'PerFt2'
        | 'PerM2'
        | 'PerFt'
        | 'PerM'
        | 'PerMSF'
        | 'PerMSI'
      /**
       * @description The grain of this roll.  Grain defaults to AlongRoll when not specified.
       * @enum {string}
       */
      grain?: 'AlongRoll' | 'AcrossRoll' | 'None'
    }
    /** @description Stock library item */
    StockEntity: {
      /** @description Name of library item */
      name: string
      /** @description Unique ID of this item (auto-generated, read-only) */
      id?: string
      /** @description Optional external ID of media item */
      'external-id'?: string
      /** @description Asset description */
      description?: string
      'stock-type'?: components['schemas']['LibraryItemEntity']
      /** @description Stock vendor name */
      vendor?: string
      /** @description List of grades specified for this stock */
      grades?: components['schemas']['GradeEntity'][]
    }
    /** @description Information about a single preset */
    PresetEntity: {
      /** @description Name of library item */
      name: string
      /** @description Unique ID of this item (auto-generated, read-only) */
      id?: string
      /** @description Optional external ID of media item */
      'external-id'?: string
      /** @description Asset description */
      description?: string
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export interface operations {
  /** Get a list of all projects */
  getJobs: {
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['PhoenixProject'][]
          'application/xml': components['schemas']['PhoenixProject'][]
        }
      }
    }
  }
  /** Create a new project */
  createJob: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['CreateJobResource']
        'application/xml': components['schemas']['CreateJobResource']
      }
    }
    responses: {
      /** @description New project */
      201: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /**
   * Open existing project file
   * @description The file needs to be updated via form data.  The filename content disposition header excluding filename extension is used to define the project ID if present, otherwise the existing project ID in the project is used.
   */
  openJob: {
    requestBody?: {
      content: {
        'multipart/form-data': {
          file?: components['schemas']['FormDataContentDisposition']
        }
      }
    }
    responses: {
      /** @description Open project succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get project at current {projectid} */
  getJob: {
    parameters: {
      query?: {
        /** @description Product model version */
        'product-version'?: 'V1' | 'V2'
      }
      path: {
        /** @description ID of the project */
        jobid: string
      }
    }
    responses: {
      /** @description Get project succeeded */
      200: {
        content: {
          'application/json': components['schemas']['PhoenixProject']
          'application/xml': components['schemas']['PhoenixProject']
        }
      }
      /** @description Project not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Close the project with ID of {projectid} */
  deleteJob: {
    parameters: {
      path: {
        /** @description ID of the project */
        jobid: string
      }
    }
    responses: {
      /** @description Close project succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Project not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Edit project */
  editProject: {
    parameters: {
      path: {
        /** @description ID of the project */
        jobid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['EditProjectResource']
        'application/xml': components['schemas']['EditProjectResource']
      }
    }
    responses: {
      /** @description Action performed successfully */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Item not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Export JSON Project Report of the given project */
  exportJsonReport_1: {
    parameters: {
      path: {
        /** @description ID of the project */
        jobid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ExportJsonReportResource']
        'application/xml': components['schemas']['ExportJsonReportResource']
      }
    }
    responses: {
      /** @description Action performed successfully */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Export XML Project Report of the given project */
  exportXmlReport_1: {
    parameters: {
      path: {
        /** @description ID of the project */
        jobid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ExportXmlReportResource']
        'application/xml': components['schemas']['ExportXmlReportResource']
      }
    }
    responses: {
      /** @description Action performed successfully */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Export layout cover sheet(s) of the given project */
  exportCoverSheet: {
    parameters: {
      path: {
        /** @description ID of the project */
        jobid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ExportCoverSheetResource']
        'application/xml': components['schemas']['ExportCoverSheetResource']
      }
    }
    responses: {
      /** @description Action performed successfully */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Export CSV Report of the given project */
  exportCsvReport: {
    parameters: {
      path: {
        /** @description ID of the project */
        jobid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ExportCsvReportResource']
        'application/xml': components['schemas']['ExportCsvReportResource']
      }
    }
    responses: {
      /** @description Action performed successfully */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Export CFF2 Die Layout of current project */
  exportCff2DieLayout: {
    parameters: {
      path: {
        /** @description ID of the project */
        jobid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ExportCff2LayoutResource']
        'application/xml': components['schemas']['ExportCff2LayoutResource']
      }
    }
    responses: {
      /** @description Export CFF2 die layout succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Export DXF Die Layout of current project */
  exportDxfDieLayout: {
    parameters: {
      path: {
        /** @description ID of the project */
        jobid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ExportDxfLayoutResource']
        'application/xml': components['schemas']['ExportDxfLayoutResource']
      }
    }
    responses: {
      /** @description Export DXF die layout succeeded */
      200: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** (Beta) Export MFG Die Layout of current project */
  exportMfgDieLayout: {
    parameters: {
      path: {
        /** @description ID of the project */
        jobid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ExportMfgLayoutResource']
        'application/xml': components['schemas']['ExportMfgLayoutResource']
      }
    }
    responses: {
      /** @description Export MFG die layout succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Export PDF Die Layout of current project */
  exportPdfDieLayout: {
    parameters: {
      path: {
        /** @description ID of the project */
        jobid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ExportPdfLayoutResource']
        'application/xml': components['schemas']['ExportPdfLayoutResource']
      }
    }
    responses: {
      /** @description Export PDF die layout succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Export Zund Cut Center Layout of current project */
  exportZcc: {
    parameters: {
      path: {
        /** @description ID of the project */
        jobid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ExportZccLayoutResource']
        'application/xml': components['schemas']['ExportZccLayoutResource']
      }
    }
    responses: {
      /** @description Export ZCC layout succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Export HP JDF of the given project */
  exportHpJdf: {
    parameters: {
      path: {
        /** @description ID of the project */
        jobid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ExportHpJdfResource']
        'application/xml': components['schemas']['ExportHpJdfResource']
      }
    }
    responses: {
      /** @description Action performed successfully */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Export Layout JDF of the given project */
  exportImposedJdf: {
    parameters: {
      path: {
        /** @description ID of the project */
        jobid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ExportJdfResource']
        'application/xml': components['schemas']['ExportJdfResource']
      }
    }
    responses: {
      /** @description Action performed successfully */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Export JDF Cutting Data of the given project */
  exportCuttingJdf: {
    parameters: {
      path: {
        /** @description ID of the project */
        jobid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ExportCuttingJdfResource']
        'application/xml': components['schemas']['ExportCuttingJdfResource']
      }
    }
    responses: {
      /** @description Action performed successfully */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Export Kongsberg JDF of the given project */
  exportKongsbergJdf: {
    parameters: {
      path: {
        /** @description ID of the project */
        jobid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ExportKongsbergJdfResource']
        'application/xml': components['schemas']['ExportKongsbergJdfResource']
      }
    }
    responses: {
      /** @description Action performed successfully */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Export Layout PDF of current project */
  exportImposedPdf: {
    parameters: {
      path: {
        /** @description ID of the project */
        jobid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ExportPdfResource']
        'application/xml': components['schemas']['ExportPdfResource']
      }
    }
    responses: {
      /** @description Action performed successfully */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Export PDF Project Report of the given project */
  exportPdfReport: {
    parameters: {
      path: {
        /** @description ID of the project */
        jobid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ExportPdfReportResource']
        'application/xml': components['schemas']['ExportPdfReportResource']
      }
    }
    responses: {
      /** @description Action performed successfully */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Export Vector Separation of the given project */
  exportVectorPdf: {
    parameters: {
      path: {
        /** @description ID of the project */
        jobid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ExportVectorSeparationResource']
        'application/xml': components['schemas']['ExportVectorSeparationResource']
      }
    }
    responses: {
      /** @description Action performed successfully */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Export Tiling report of the given project */
  exportTilingReport: {
    parameters: {
      path: {
        /** @description ID of the project */
        jobid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ExportTilingReportResource']
        'application/xml': components['schemas']['ExportTilingReportResource']
      }
    }
    responses: {
      /** @description Action performed successfully */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Import die template */
  importDieTemplate: {
    parameters: {
      path: {
        /** @description ID of the project */
        jobid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ImportDieTemplateResource']
        'application/xml': components['schemas']['ImportDieTemplateResource']
      }
    }
    responses: {
      /** @description Import die template succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Apply result from most recent Impose run */
  applyImposeResult: {
    parameters: {
      path: {
        /** @description Index of layout */
        layoutindex: number
        /** @description Id of result to apply */
        resultid: number
        /** @description ID of the project */
        jobid: string
      }
    }
    responses: {
      /** @description Apply impose result succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Run Impose tool to generate layouts */
  impose: {
    parameters: {
      path: {
        /** @description Index of layout */
        layoutindex: number
        /** @description ID of the project */
        jobid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ImposeResource']
        'application/xml': components['schemas']['ImposeResource']
      }
    }
    responses: {
      /** @description Run impose succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** A single Impose result by ID */
  getImposeResult: {
    parameters: {
      query?: {
        /** @description Include thumbnail image or not */
        thumb?: boolean
        /** @description Thumbnail width in pixels */
        'thumb-width'?: number
        /** @description Thumbnail height in pixels */
        'thumb-height'?: number
        /** @description Render mode to use in thumbnail image */
        'render-mode'?: 'Artwork' | 'Colors' | 'Dielines'
      }
      path: {
        /** @description Index of layout */
        layoutindex: number
        /** @description ID of result to retrieve */
        resultid: number
        /** @description ID of the project */
        jobid: string
      }
    }
    responses: {
      /** @description Get impose result succeeded */
      200: {
        content: {
          'application/json': components['schemas']['LayoutResultEntity']
          'application/xml': components['schemas']['LayoutResultEntity']
        }
      }
      /** @description Result not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** A list of most recent Impose results */
  getImposeResults: {
    parameters: {
      query?: {
        /** @description Include thumbnail images or not */
        thumb?: boolean
        /** @description Thumbnail width in pixels */
        'thumb-width'?: number
        /** @description Thumbnail height in pixels */
        'thumb-height'?: number
        /** @description Render mode to use in thumbnail image */
        'render-mode'?: 'Artwork' | 'Colors' | 'Dielines'
      }
      path: {
        /** @description Index of layout */
        layoutindex: number
        /** @description ID of the project */
        jobid: string
      }
    }
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['LayoutResultEntity'][]
          'application/xml': components['schemas']['LayoutResultEntity'][]
        }
      }
    }
  }
  /** Get list of all layouts in the project */
  getLayouts_1: {
    parameters: {
      query?: {
        /** @description Whether to include thumbnail images of the front surfaces of the layouts */
        'front-thumb'?: boolean
        /** @description Whether to include thumbnail images of the back surfaces of the layouts */
        'back-thumb'?: boolean
        /** @description Thumbnail width in pixels */
        'thumb-width'?: number
        /** @description Thumbnail height in pixels */
        'thumb-height'?: number
        /** @description Render mode to use in thumbnail images */
        'render-mode'?: 'Artwork' | 'Colors' | 'Dielines'
      }
      path: {
        /** @description ID of the project */
        jobid: string
      }
    }
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['PhoenixLayoutEntity'][]
          'application/xml': components['schemas']['PhoenixLayoutEntity'][]
        }
      }
    }
  }
  /** Create a new layout */
  createLayout_1: {
    parameters: {
      path: {
        /** @description ID of the project */
        jobid: string
      }
    }
    responses: {
      /** @description Create layout succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get back layout surface */
  getLayoutBack: {
    parameters: {
      query?: {
        /** @description Whether to include thumbnail image of surface */
        thumb?: boolean
        /** @description Thumbnail width in pixels */
        'thumb-width'?: number
        /** @description Thumbnail height in pixels */
        'thumb-height'?: number
        /** @description Render mode to use in thumbnail image */
        'render-mode'?: 'Artwork' | 'Colors' | 'Dielines'
      }
      path: {
        /** @description Index of layout */
        layoutindex: number
        /** @description ID of the project */
        jobid: string
      }
    }
    responses: {
      /** @description Get back surface succeeded */
      200: {
        content: {
          'application/json': components['schemas']['SurfaceEntity']
          'application/xml': components['schemas']['SurfaceEntity']
        }
      }
      /** @description Layout not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Edit surface */
  editSurface: {
    parameters: {
      path: {
        /** @description Index of layout */
        layoutindex: number
        /** @description ID of the project */
        jobid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['EditLayoutSurfaceResource']
        'application/xml': components['schemas']['EditLayoutSurfaceResource']
      }
    }
    responses: {
      /** @description Action performed successfully */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Item not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get project layout by index */
  getLayout: {
    parameters: {
      query?: {
        /** @description Whether to include thumbnail image of the front surface of this layout */
        'front-thumb'?: boolean
        /** @description Whether to include thumbnail image of the back surface of this layout */
        'back-thumb'?: boolean
        /** @description Thumbnail width in pixels */
        'thumb-width'?: number
        /** @description Thumbnail height in pixels */
        'thumb-height'?: number
        /** @description Render mode to use in thumbnail image(s) */
        'render-mode'?: 'Artwork' | 'Colors' | 'Dielines'
      }
      path: {
        /** @description Index of layout */
        layoutindex: number
        /** @description ID of the project */
        jobid: string
      }
    }
    responses: {
      /** @description Get layout succeeded */
      200: {
        content: {
          'application/json': components['schemas']['PhoenixLayoutEntity']
          'application/xml': components['schemas']['PhoenixLayoutEntity']
        }
      }
      /** @description Layout not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Edit layout properties */
  editLayout: {
    parameters: {
      path: {
        /** @description Index of layout */
        layoutindex: number
        /** @description ID of the project */
        jobid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['EditLayoutResource']
        'application/xml': components['schemas']['EditLayoutResource']
      }
    }
    responses: {
      /** @description Action performed successfully */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Item not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Delete layout from the project by index */
  deleteLayout: {
    parameters: {
      path: {
        /** @description Index of layout */
        layoutindex: number
        /** @description ID of the project */
        jobid: string
      }
    }
    responses: {
      /** @description Delete succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Item not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get front layout surface */
  getLayoutFront: {
    parameters: {
      query?: {
        /** @description Whether to include thumbnail image of surface */
        thumb?: boolean
        /** @description Thumbnail width in pixels */
        'thumb-width'?: number
        /** @description Thumbnail height in pixels */
        'thumb-height'?: number
        /** @description Render mode to use in thumbnail image */
        'render-mode'?: 'Artwork' | 'Colors' | 'Dielines'
      }
      path: {
        /** @description Index of layout */
        layoutindex: number
        /** @description ID of the project */
        jobid: string
      }
    }
    responses: {
      /** @description Get front surface succeeded */
      200: {
        content: {
          'application/json': components['schemas']['SurfaceEntity']
          'application/xml': components['schemas']['SurfaceEntity']
        }
      }
      /** @description Layout not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Edit surface */
  editSurface_1: {
    parameters: {
      path: {
        /** @description Index of layout */
        layoutindex: number
        /** @description ID of the project */
        jobid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['EditLayoutSurfaceResource']
        'application/xml': components['schemas']['EditLayoutSurfaceResource']
      }
    }
    responses: {
      /** @description Action performed successfully */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Item not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Place component of product */
  placeComponent: {
    parameters: {
      path: {
        /** @description Index of layout */
        layoutindex: number
        /** @description ID of the project */
        jobid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['PlaceComponentResource']
        'application/xml': components['schemas']['PlaceComponentResource']
      }
    }
    responses: {
      /** @description Action performed successfully */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Place die template */
  placeDieTemplate: {
    parameters: {
      path: {
        /** @description Index of layout */
        layoutindex: number
        /** @description ID of the project */
        jobid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['PlaceDieTemplateResource']
        'application/xml': components['schemas']['PlaceDieTemplateResource']
      }
    }
    responses: {
      /** @description Action performed successfully */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get layout plate */
  getLayoutPlate: {
    parameters: {
      path: {
        /** @description Index of layout */
        layoutindex: number
        /** @description ID of the project */
        jobid: string
      }
    }
    responses: {
      /** @description Get layout plate succeeded */
      200: {
        content: {
          'application/json': components['schemas']['PlateEntity']
          'application/xml': components['schemas']['PlateEntity']
        }
      }
      /** @description Plate not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Set layout plate */
  setLayoutPlate: {
    parameters: {
      path: {
        /** @description Index of layout */
        layoutindex: number
        /** @description ID of the project */
        jobid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['SetPlateResource']
        'application/xml': components['schemas']['SetPlateResource']
      }
    }
    responses: {
      /** @description Action performed successfully */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /**
   * Get layout press
   * @deprecated
   */
  getLayoutPress: {
    parameters: {
      path: {
        /** @description Index of layout */
        layoutindex: number
        /** @description ID of the project */
        jobid: string
      }
    }
    responses: {
      /** @description Get layout press succeeded */
      200: {
        content: {
          'application/json': components['schemas']['PressEntity']
          'application/xml': components['schemas']['PressEntity']
        }
      }
      /** @description Press not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /**
   * Set layout press
   * @deprecated
   */
  setLayoutPress: {
    parameters: {
      path: {
        /** @description Index of layout */
        layoutindex: number
        /** @description ID of the project */
        jobid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['SetPressResource']
        'application/xml': components['schemas']['SetPressResource']
      }
    }
    responses: {
      /** @description Action performed successfully */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get layout sheet */
  getLayoutSheet: {
    parameters: {
      path: {
        /** @description Index of layout */
        layoutindex: number
        /** @description ID of the project */
        jobid: string
      }
    }
    responses: {
      /** @description Get layout sheet succeeded */
      200: {
        content: {
          'application/json': components['schemas']['SheetEntity']
          'application/xml': components['schemas']['SheetEntity']
        }
      }
      /** @description Sheet not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Resize layout sheet */
  resizeLayoutSheet: {
    parameters: {
      path: {
        /** @description Index of layout */
        layoutindex: number
        /** @description ID of the project */
        jobid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ResizeSheetResource']
        'application/xml': components['schemas']['ResizeSheetResource']
      }
    }
    responses: {
      /** @description Action performed successfully */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Item not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Set layout sheet */
  setLayoutSheet: {
    parameters: {
      path: {
        /** @description Index of layout */
        layoutindex: number
        /** @description ID of the project */
        jobid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['SetSheetResource']
        'application/xml': components['schemas']['SetSheetResource']
      }
    }
    responses: {
      /** @description Action performed successfully */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Generate step and repeat group */
  stepRepeat: {
    parameters: {
      path: {
        /** @description Index of layout */
        layoutindex: number
        /** @description ID of the project */
        jobid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['StepRepeatResource']
        'application/xml': components['schemas']['StepRepeatResource']
      }
    }
    responses: {
      /** @description Action performed successfully */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Apply result from most recent Optimize run */
  applyOptimizeResult: {
    parameters: {
      path: {
        /** @description Index of layout */
        layoutindex: number
        /** @description Id of result to apply */
        resultid: number
        /** @description ID of the project */
        jobid: string
      }
    }
    responses: {
      /** @description Apply optimize result succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Run Optimize tool to generate layouts */
  optimize: {
    parameters: {
      path: {
        /** @description Index of layout */
        layoutindex: number
        /** @description ID of the project */
        jobid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['OptimizeResource']
        'application/xml': components['schemas']['OptimizeResource']
      }
    }
    responses: {
      /** @description Run optimize succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** A single Optimize result by ID */
  getOptimizeResult: {
    parameters: {
      query?: {
        /** @description Include thumbnail image or not */
        thumb?: boolean
        /** @description Thumbnail width in pixels */
        'thumb-width'?: number
        /** @description Thumbnail height in pixels */
        'thumb-height'?: number
        /** @description Render mode to use in thumbnail image */
        'render-mode'?: 'Artwork' | 'Colors' | 'Dielines'
      }
      path: {
        /** @description Index of layout */
        layoutindex: number
        /** @description ID of result to retrieve */
        resultid: number
        /** @description ID of the project */
        jobid: string
      }
    }
    responses: {
      /** @description Get optimize result succeeded */
      200: {
        content: {
          'application/json': components['schemas']['LayoutResultEntity']
          'application/xml': components['schemas']['LayoutResultEntity']
        }
      }
      /** @description Result not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** A list of most recent Optimize results */
  getOptimizeResults: {
    parameters: {
      query?: {
        /** @description Include thumbnail images or not */
        thumb?: boolean
        /** @description Thumbnail width in pixels */
        'thumb-width'?: number
        /** @description Thumbnail height in pixels */
        'thumb-height'?: number
        /** @description Render mode to use in thumbnail image */
        'render-mode'?: 'Artwork' | 'Colors' | 'Dielines'
      }
      path: {
        /** @description Index of layout */
        layoutindex: number
        /** @description ID of the project */
        jobid: string
      }
    }
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['LayoutResultEntity'][]
          'application/xml': components['schemas']['LayoutResultEntity'][]
        }
      }
    }
  }
  /** Get output project file by ID */
  getOutputFile: {
    parameters: {
      path: {
        /** @description ID of output project file to get */
        fileid: string
        /** @description ID of the project */
        jobid: string
      }
    }
    responses: {
      /** @description Get project file succeeded */
      200: {
        content: {
          'application/json': components['schemas']['JobFilesEntity']
          'application/xml': components['schemas']['JobFilesEntity']
        }
      }
      /** @description File not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Delete output project files from this project with specific file ID */
  deleteOutputFile: {
    parameters: {
      path: {
        /** @description ID of uploaded project file to get */
        fileid: string
        /** @description ID of the project */
        jobid: string
      }
    }
    responses: {
      /** @description Delete project files succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description File not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Download specific output file content */
  downloadOutputFile: {
    parameters: {
      path: {
        /** @description ID of output project file to get */
        fileid: string
        /** @description Relative path of specific file contents to download */
        filepath: string
        /** @description ID of the project */
        jobid: string
      }
    }
    responses: {
      /** @description Download succeeded */
      200: {
        content: {
          'application/octet-stream': string[]
        }
      }
      /** @description File not found */
      404: {
        content: {
          'application/octet-stream': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get all output files currently saved to this project */
  getOutputFiles: {
    parameters: {
      path: {
        /** @description ID of the project */
        jobid: string
      }
    }
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['JobFilesEntity'][]
          'application/xml': components['schemas']['JobFilesEntity'][]
        }
      }
    }
  }
  /** Apply result from most recent plan run */
  applyPartialPlan: {
    parameters: {
      path: {
        /** @description Id of result to apply */
        resultid: number
        /** @description First layout to apply from plan starting from 1 */
        start: number
        /** @description Last layout to apply from plan */
        end: number
        /** @description ID of the project */
        jobid: string
      }
    }
    responses: {
      /** @description Apply plan result succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Apply result from most recent plan run */
  applyPlanResult: {
    parameters: {
      path: {
        /** @description Id of result to apply */
        resultid: number
        /** @description ID of the project */
        jobid: string
      }
    }
    responses: {
      /** @description Apply plan result succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Run Plan tool to generate project plans */
  plan: {
    parameters: {
      path: {
        /** @description ID of the project */
        jobid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['PlanResource']
        'application/xml': components['schemas']['PlanResource']
      }
    }
    responses: {
      /** @description Run plan succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** A single plan result by ID */
  getPlanResult: {
    parameters: {
      query?: {
        /** @description Include individual layout results */
        layouts?: boolean
        /** @description Include thumbnail images in layout results or not */
        thumb?: boolean
        /** @description Include composite thumbnail image of layouts in plan result or not */
        'plan-thumb'?: boolean
        /** @description Thumbnail width in pixels */
        'thumb-width'?: number
        /** @description Thumbnail height in pixels */
        'thumb-height'?: number
        /** @description Render mode to use in layout result thumbnail images */
        'render-mode'?: 'Artwork' | 'Colors' | 'Dielines'
      }
      path: {
        /** @description ID of result to retrieve */
        resultid: number
        /** @description ID of the project */
        jobid: string
      }
    }
    responses: {
      /** @description Get plan result succeeded */
      200: {
        content: {
          'application/json': components['schemas']['PlanResultEntity']
          'application/xml': components['schemas']['PlanResultEntity']
        }
      }
      /** @description Plan result not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** A list of most recent Plan results */
  getPlanResults: {
    parameters: {
      query?: {
        /** @description Optional limit to number of results returned.  0 or not-specified signifies return all results. */
        limit?: number
        /** @description Optional 1-based start index of results after sorting */
        start?: number
        /** @description Optional sorting to control order of results.  By default results are sorted by lowest cost first. */
        sorting?: 'Cost' | 'Waste' | 'Time' | 'Layouts'
        /** @description Include individual layout results */
        layouts?: boolean
        /** @description Include individual thumbnail images in layout results or not */
        thumb?: boolean
        /** @description Include composite thumbnail image of layouts in plan result or not */
        'plan-thumb'?: boolean
        /** @description Thumbnail width in pixels */
        'thumb-width'?: number
        /** @description Thumbnail height in pixels */
        'thumb-height'?: number
        /** @description Render mode to use in layout result thumbnail images.  Note: Artwork rendering can be compute intensive and result in slow response times, especially when there are many results being returned. */
        'render-mode'?: 'Artwork' | 'Colors' | 'Dielines'
      }
      path: {
        /** @description ID of the project */
        jobid: string
      }
    }
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['PlanResultEntity'][]
          'application/xml': components['schemas']['PlanResultEntity'][]
        }
      }
    }
  }
  /** Start running Plan tool asynchronously to generate project plans */
  planStart: {
    parameters: {
      path: {
        /** @description ID of the project */
        jobid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['PlanResource']
        'application/xml': components['schemas']['PlanResource']
      }
    }
    responses: {
      /** @description Plan tool started */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get current plan tool running status */
  planStatus: {
    parameters: {
      path: {
        /** @description ID of the project */
        jobid: string
      }
    }
    responses: {
      /** @description Get plan status succeeded */
      200: {
        content: {
          'application/json': components['schemas']['PlanStatusEntity']
          'application/xml': components['schemas']['PlanStatusEntity']
        }
      }
    }
  }
  /** Stop plan tool if it is currently running */
  planStop: {
    parameters: {
      path: {
        /** @description ID of the project */
        jobid: string
      }
    }
    responses: {
      /** @description Plan tool stopped */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Apply result from most recent Populate run */
  applyPopulateResult: {
    parameters: {
      path: {
        /** @description Index of layout */
        layoutindex: number
        /** @description Id of result to apply */
        resultid: number
        /** @description ID of the project */
        jobid: string
      }
    }
    responses: {
      /** @description Apply populate result succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Run Populate tool to generate layouts */
  populate: {
    parameters: {
      path: {
        /** @description Index of layout */
        layoutindex: number
        /** @description ID of the project */
        jobid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['PopulateResource']
        'application/xml': components['schemas']['PopulateResource']
      }
    }
    responses: {
      /** @description Run populate succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** A single Populate result by ID */
  getPopulateResult: {
    parameters: {
      query?: {
        /** @description Include thumbnail image or not */
        thumb?: boolean
        /** @description Thumbnail width in pixels */
        'thumb-width'?: number
        /** @description Thumbnail height in pixels */
        'thumb-height'?: number
        /** @description Render mode to use in thumbnail image */
        'render-mode'?: 'Artwork' | 'Colors' | 'Dielines'
      }
      path: {
        /** @description Index of layout */
        layoutindex: number
        /** @description ID of result to retrieve */
        resultid: number
        /** @description ID of the project */
        jobid: string
      }
    }
    responses: {
      /** @description Get populate result succeeded */
      200: {
        content: {
          'application/json': components['schemas']['LayoutResultEntity']
          'application/xml': components['schemas']['LayoutResultEntity']
        }
      }
      /** @description Result not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** A list of most recent Populate results */
  getPopulateResults: {
    parameters: {
      query?: {
        /** @description Include thumbnail images or not */
        thumb?: boolean
        /** @description Thumbnail width in pixels */
        'thumb-width'?: number
        /** @description Thumbnail height in pixels */
        'thumb-height'?: number
        /** @description Render mode to use in thumbnail image */
        'render-mode'?: 'Artwork' | 'Colors' | 'Dielines'
      }
      path: {
        /** @description Index of layout */
        layoutindex: number
        /** @description ID of the project */
        jobid: string
      }
    }
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['LayoutResultEntity'][]
          'application/xml': components['schemas']['LayoutResultEntity'][]
        }
      }
    }
  }
  /** Get all products of the current project */
  getProducts_1: {
    parameters: {
      query?: {
        /** @description Whether to include thumbnail image of products */
        thumb?: boolean
        /** @description Thumbnail width in pixels */
        'thumb-width'?: number
        /** @description Thumbnail height in pixels */
        'thumb-height'?: number
        /** @description Render mode to use in thumbnail images */
        'render-mode'?: 'Artwork' | 'Colors' | 'Dielines'
      }
      path: {
        /** @description ID of the project */
        jobid: string
      }
    }
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['PhoenixProductEntity'][]
          'application/xml': components['schemas']['PhoenixProductEntity'][]
        }
      }
    }
  }
  /** Create new product */
  createProduct_1: {
    parameters: {
      path: {
        /** @description ID of the project */
        jobid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['AddProductEntity']
        'application/xml': components['schemas']['AddProductEntity']
      }
    }
    responses: {
      /** @description Create product succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Import products from CSV file */
  importProductCsv: {
    parameters: {
      path: {
        /** @description ID of the project */
        jobid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ImportProductCsvResource']
        'application/xml': components['schemas']['ImportProductCsvResource']
      }
    }
    responses: {
      /** @description Import Product from CSV succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Apply image tracing to the product */
  imageTracing: {
    parameters: {
      path: {
        productname: string
        /** @description ID of the project */
        jobid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ImageTracingResource']
        'application/xml': components['schemas']['ImageTracingResource']
      }
    }
    responses: {
      /** @description Image Tracing Succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Apply a smart product mark to this product */
  applyProductMark: {
    parameters: {
      path: {
        productname: string
        /** @description ID of the project */
        jobid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ApplyMarkResource']
        'application/xml': components['schemas']['ApplyMarkResource']
      }
    }
    responses: {
      /** @description Apply smart product mark succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get product with name of {productname} */
  getProduct: {
    parameters: {
      query?: {
        /** @description Whether to include thumbnail image of product */
        thumb?: boolean
        /** @description Thumbnail width in pixels */
        'thumb-width'?: number
        /** @description Thumbnail height in pixels */
        'thumb-height'?: number
        /** @description Render mode to use in thumbnail image */
        'render-mode'?: 'Artwork' | 'Colors' | 'Dielines'
      }
      path: {
        productname: string
        /** @description ID of the project */
        jobid: string
      }
    }
    responses: {
      /** @description Get product succeeded */
      200: {
        content: {
          'application/json': components['schemas']['PhoenixProductEntity']
          'application/xml': components['schemas']['PhoenixProductEntity']
        }
      }
      /** @description Product not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Delete product with name {productname} from the project */
  deleteProduct: {
    parameters: {
      path: {
        productname: string
        /** @description ID of the project */
        jobid: string
      }
    }
    responses: {
      /** @description Delete product succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Product not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Snap artwork to a given side of the product */
  snapProduct: {
    parameters: {
      path: {
        productname: string
        /** @description ID of the project */
        jobid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['AutosnapArtworkEntity']
        'application/xml': components['schemas']['AutosnapArtworkEntity']
      }
    }
    responses: {
      /** @description Snap artwork succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Export Tiling report of the given product */
  exportProductTilingReport: {
    parameters: {
      path: {
        productname: string
        /** @description ID of the project */
        jobid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ExportTilingReportResource']
        'application/xml': components['schemas']['ExportTilingReportResource']
      }
    }
    responses: {
      /** @description Export tiling report succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Save project */
  saveJob: {
    parameters: {
      path: {
        /** @description ID of the project */
        jobid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['SaveJobResource']
        'application/xml': components['schemas']['SaveJobResource']
      }
    }
    responses: {
      /** @description Save project succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Save project template */
  saveJobTemplate: {
    parameters: {
      path: {
        /** @description ID of the project */
        jobid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['SaveJobTemplateResource']
        'application/xml': components['schemas']['SaveJobTemplateResource']
      }
    }
    responses: {
      /** @description Save project template succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /**
   * Run a script on the current project
   * @deprecated
   */
  run: {
    parameters: {
      path: {
        /** @description ID of the project */
        jobid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['RunScriptResource']
        'application/xml': components['schemas']['RunScriptResource']
      }
    }
    responses: {
      /** @description Run script succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Snap artwork to products or die numbers in project */
  snap: {
    parameters: {
      path: {
        /** @description ID of the project */
        jobid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['AutosnapResource']
        'application/xml': components['schemas']['AutosnapResource']
      }
    }
    responses: {
      /** @description Snap artwork succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get uploaded project file by ID */
  getUploadedFile: {
    parameters: {
      path: {
        /** @description ID of uploaded project file to get */
        fileid: string
        /** @description ID of the project */
        jobid: string
      }
    }
    responses: {
      /** @description Get project file succeeded */
      200: {
        content: {
          'application/json': components['schemas']['JobFilesEntity']
          'application/xml': components['schemas']['JobFilesEntity']
        }
      }
      /** @description File not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Delete uploaded project file from this project */
  deleteUploadedFile: {
    parameters: {
      path: {
        /** @description ID of uploaded project file to get */
        fileid: string
        /** @description ID of the project */
        jobid: string
      }
    }
    responses: {
      /** @description Delete succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description File not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Download specific uploaded file content */
  downloadUploadedFile: {
    parameters: {
      path: {
        /** @description ID of uploaded project file to get */
        fileid: string
        /** @description Relative path of specific file contents to download */
        filepath: string
        /** @description ID of the project */
        jobid: string
      }
    }
    responses: {
      /** @description Download succeeded */
      200: {
        content: {
          'application/octet-stream': string[]
        }
      }
      /** @description File not found */
      404: {
        content: {
          'application/octet-stream': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get all files currently uploaded to this project */
  getUploadedFiles: {
    parameters: {
      path: {
        /** @description ID of the project */
        jobid: string
      }
    }
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['JobFilesEntity'][]
          'application/xml': components['schemas']['JobFilesEntity'][]
        }
      }
    }
  }
  /**
   * Upload new file to project
   * @description The URI returned in the response entity can be used to download the file content directly or referred to when adding products.
   */
  uploadFile: {
    parameters: {
      path: {
        /** @description ID of the project */
        jobid: string
      }
    }
    requestBody?: {
      content: {
        'multipart/form-data': {
          file?: components['schemas']['FormDataContentDisposition']
        }
      }
    }
    responses: {
      /** @description upload file to project */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get a list of all projects */
  getJobs_1: {
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['PhoenixProject'][]
          'application/xml': components['schemas']['PhoenixProject'][]
        }
      }
    }
  }
  /** Create a new project */
  createJob_1: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['CreateJobResource']
        'application/xml': components['schemas']['CreateJobResource']
      }
    }
    responses: {
      /** @description New project */
      201: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /**
   * Open existing project file
   * @description The file needs to be updated via form data.  The filename content disposition header excluding filename extension is used to define the project ID if present, otherwise the existing project ID in the project is used.
   */
  openJob_1: {
    requestBody?: {
      content: {
        'multipart/form-data': {
          file?: components['schemas']['FormDataContentDisposition']
        }
      }
    }
    responses: {
      /** @description Open project succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** List repeat templates in the project */
  repeatTemplates: {
    parameters: {
      path: {
        /** @description ID of the project */
        projectid: string
      }
    }
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['repeat-template'][]
          'application/xml': components['schemas']['repeat-template'][]
        }
      }
    }
  }
  /** Add a repeat template to the project */
  addRepeatTemplate: {
    parameters: {
      path: {
        /** @description ID of the project */
        projectid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['repeat-template-settings']
        'application/xml': components['schemas']['repeat-template-settings']
      }
    }
    responses: {
      /** @description Action performed successfully */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Create new bound product */
  createBoundProduct: {
    parameters: {
      path: {
        /** @description ID of the project */
        projectid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['create-bound-product-resource']
        'application/xml': components['schemas']['create-bound-product-resource']
      }
    }
    responses: {
      /** @description Action performed successfully */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Create new flat product */
  createFlatProduct: {
    parameters: {
      path: {
        /** @description ID of the project */
        projectid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['create-flat-product-resource']
        'application/xml': components['schemas']['create-flat-product-resource']
      }
    }
    responses: {
      /** @description Action performed successfully */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Create new folded product */
  createFoldedProduct: {
    parameters: {
      path: {
        /** @description ID of the project */
        projectid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['create-folded-product-resource']
        'application/xml': components['schemas']['create-folded-product-resource']
      }
    }
    responses: {
      /** @description Action performed successfully */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Create new tiled product */
  createTiledProduct: {
    parameters: {
      path: {
        /** @description ID of the project */
        projectid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['create-tiled-product-resource']
        'application/xml': components['schemas']['create-tiled-product-resource']
      }
    }
    responses: {
      /** @description Action performed successfully */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get list of products */
  getProductsV2: {
    parameters: {
      path: {
        /** @description ID of the project */
        projectid: string
      }
    }
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['product'][]
          'application/xml': components['schemas']['product'][]
        }
      }
    }
  }
  /** Get list of bound parts */
  getBoundParts: {
    parameters: {
      path: {
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['bound-part'][]
          'application/xml': components['schemas']['bound-part'][]
        }
      }
    }
  }
  /** Get bound part */
  getBoundPart_1: {
    parameters: {
      path: {
        /** @description Index of part */
        partindex: number
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    responses: {
      /** @description Get bound part succeeded */
      200: {
        content: {
          'application/json': components['schemas']['bound-part']
          'application/xml': components['schemas']['bound-part']
        }
      }
      /** @description Bound part not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Edit bound part */
  editBoundPart: {
    parameters: {
      path: {
        /** @description Index of part */
        partindex: number
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['edit-bound-part-resource']
        'application/xml': components['schemas']['edit-bound-part-resource']
      }
    }
    responses: {
      /** @description Action performed successfully */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Item not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get list of sections. Only applicable to bound parts */
  getSections: {
    parameters: {
      path: {
        /** @description Index of part */
        partindex: number
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['bound-section'][]
          'application/xml': components['schemas']['bound-section'][]
        }
      }
    }
  }
  /** Create new section */
  createSection: {
    parameters: {
      path: {
        /** @description Index of part */
        partindex: number
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['edit-section-resource']
        'application/xml': components['schemas']['edit-section-resource']
      }
    }
    responses: {
      /** @description Create section succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get section */
  getSection: {
    parameters: {
      path: {
        /** @description Index of section */
        sectionindex: number
        /** @description Index of part */
        partindex: number
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['bound-section']
          'application/xml': components['schemas']['bound-section']
        }
      }
    }
  }
  /** Delete section */
  deleteSection: {
    parameters: {
      path: {
        /** @description Index of section */
        sectionindex: number
        /** @description Index of part */
        partindex: number
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    responses: {
      /** @description Delete component succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Section not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Edit section */
  editSection: {
    parameters: {
      path: {
        /** @description Index of section */
        sectionindex: number
        /** @description Index of part */
        partindex: number
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['edit-section-resource']
        'application/xml': components['schemas']['edit-section-resource']
      }
    }
    responses: {
      /** @description Action performed successfully */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Item not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get list of signatures */
  getSignatures: {
    parameters: {
      path: {
        /** @description Index of section */
        sectionindex: number
        /** @description Index of part */
        partindex: number
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['bound-signature'][]
          'application/xml': components['schemas']['bound-signature'][]
        }
      }
    }
  }
  /** Create new signature */
  createSignature: {
    parameters: {
      path: {
        /** @description Index of section */
        sectionindex: number
        /** @description Index of part */
        partindex: number
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['AddSignaturesResource']
        'application/xml': components['schemas']['AddSignaturesResource']
      }
    }
    responses: {
      /** @description Create signature succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get bound signature */
  getBoundSignature_1: {
    parameters: {
      path: {
        /** @description Index of signature */
        signatureindex: number
        /** @description Index of section */
        sectionindex: number
        /** @description Index of part */
        partindex: number
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    responses: {
      /** @description Get signature succeeded */
      200: {
        content: {
          'application/json': components['schemas']['bound-signature']
          'application/xml': components['schemas']['bound-signature']
        }
      }
      /** @description Signature not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Delete signature */
  deleteSignature: {
    parameters: {
      path: {
        /** @description Index of signature */
        signatureindex: number
        /** @description Index of section */
        sectionindex: number
        /** @description Index of part */
        partindex: number
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    responses: {
      /** @description Delete component succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Signature not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get product with name of {productname} */
  getProductV2: {
    parameters: {
      path: {
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    responses: {
      /** @description Get product succeeded */
      200: {
        content: {
          'application/json': components['schemas']['PhoenixProductEntity']
          'application/xml': components['schemas']['PhoenixProductEntity']
        }
      }
      /** @description Product not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Delete product */
  deleteProductV2: {
    parameters: {
      path: {
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    responses: {
      /** @description Delete succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Item not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Edit product */
  editProduct: {
    parameters: {
      path: {
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['edit-product-resource']
        'application/xml': components['schemas']['edit-product-resource']
      }
    }
    responses: {
      /** @description Action performed successfully */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Item not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get list of flat parts */
  getFlatParts: {
    parameters: {
      path: {
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['flat-part'][]
          'application/xml': components['schemas']['flat-part'][]
        }
      }
    }
  }
  /** Get list of flats */
  getFlats: {
    parameters: {
      path: {
        /** @description Index of part */
        partindex: number
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['flat'][]
          'application/xml': components['schemas']['flat'][]
        }
      }
    }
  }
  /** Get flat */
  getFlat_1: {
    parameters: {
      path: {
        /** @description Index of flat */
        flatindex: number
        /** @description Index of part */
        partindex: number
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    responses: {
      /** @description Get flat succeeded */
      200: {
        content: {
          'application/json': components['schemas']['flat']
          'application/xml': components['schemas']['flat']
        }
      }
      /** @description Flat not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Edit flat */
  editFlat: {
    parameters: {
      path: {
        /** @description Index of flat */
        flatindex: number
        /** @description Index of part */
        partindex: number
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['edit-flat-resource']
        'application/xml': components['schemas']['edit-flat-resource']
      }
    }
    responses: {
      /** @description Action performed successfully */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Item not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get flat part */
  getFlatPart_1: {
    parameters: {
      path: {
        /** @description Index of part */
        partindex: number
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    responses: {
      /** @description Get flat part succeeded */
      200: {
        content: {
          'application/json': components['schemas']['flat-part']
          'application/xml': components['schemas']['flat-part']
        }
      }
      /** @description Flat part not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Edit flat part */
  editFlatPart: {
    parameters: {
      path: {
        /** @description Index of part */
        partindex: number
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['edit-flat-part-resource']
        'application/xml': components['schemas']['edit-flat-part-resource']
      }
    }
    responses: {
      /** @description Action performed successfully */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Item not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get list of folded parts */
  getFoldedParts: {
    parameters: {
      path: {
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['folded-part'][]
          'application/xml': components['schemas']['folded-part'][]
        }
      }
    }
  }
  /** Get folded part */
  getFoldedPart_1: {
    parameters: {
      path: {
        /** @description Index of part */
        partindex: number
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    responses: {
      /** @description Get folded part succeeded */
      200: {
        content: {
          'application/json': components['schemas']['folded-part']
          'application/xml': components['schemas']['folded-part']
        }
      }
      /** @description Folded part not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Edit folded part */
  editFoldedPart: {
    parameters: {
      path: {
        /** @description Index of part */
        partindex: number
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['edit-folded-part-resource']
        'application/xml': components['schemas']['edit-folded-part-resource']
      }
    }
    responses: {
      /** @description Action performed successfully */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Item not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get list of signatures */
  getFoldedSignatures: {
    parameters: {
      path: {
        /** @description Index of part */
        partindex: number
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['folded-signature'][]
          'application/xml': components['schemas']['folded-signature'][]
        }
      }
    }
  }
  /** Get folded signature */
  getFoldedSignature_1: {
    parameters: {
      path: {
        /** @description Index of signature */
        signatureindex: number
        /** @description Index of part */
        partindex: number
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    responses: {
      /** @description Get folded succeeded */
      200: {
        content: {
          'application/json': components['schemas']['folded-signature']
          'application/xml': components['schemas']['folded-signature']
        }
      }
      /** @description Signature not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get list of parts */
  getParts: {
    parameters: {
      path: {
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['partObject'][]
          'application/xml': components['schemas']['partObject'][]
        }
      }
    }
  }
  /** Get list of components */
  getComponents: {
    parameters: {
      path: {
        /** @description Index of part */
        partindex: number
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['componentObjectObjectObject'][]
          'application/xml': components['schemas']['componentObjectObjectObject'][]
        }
      }
    }
  }
  /** Get component */
  getComponent: {
    parameters: {
      path: {
        /** @description Index of component */
        componentindex: number
        /** @description Index of part */
        partindex: number
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    responses: {
      /** @description Get component succeeded */
      200: {
        content: {
          'application/json': components['schemas']['component']
          'application/xml': components['schemas']['component']
        }
      }
      /** @description Component not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Edit component */
  editComponent: {
    parameters: {
      path: {
        /** @description Index of component */
        componentindex: number
        /** @description Index of part */
        partindex: number
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['edit-component-resource']
        'application/xml': components['schemas']['edit-component-resource']
      }
    }
    responses: {
      /** @description Action performed successfully */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Item not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get part */
  getPart: {
    parameters: {
      path: {
        /** @description Index of part */
        partindex: number
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['part']
          'application/xml': components['schemas']['part']
        }
      }
    }
  }
  /** Edit part */
  editPart: {
    parameters: {
      path: {
        /** @description Index of part */
        partindex: number
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['props-resource']
        'application/xml': components['schemas']['props-resource']
      }
    }
    responses: {
      /** @description Action performed successfully */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Item not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get list of pages */
  getPages: {
    parameters: {
      path: {
        /** @description Index of part */
        partindex: number
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['page'][]
          'application/xml': components['schemas']['page'][]
        }
      }
    }
  }
  /** Create new pages */
  createPages: {
    parameters: {
      path: {
        /** @description Index of part */
        partindex: number
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['CreatePagesResource']
        'application/xml': components['schemas']['CreatePagesResource']
      }
    }
    responses: {
      /** @description Action performed successfully */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Assign artwork to pages */
  assignArtwork: {
    parameters: {
      path: {
        /** @description Index of part */
        partindex: number
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['path-resource']
        'application/xml': components['schemas']['path-resource']
      }
    }
    responses: {
      /** @description Action performed successfully */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get page color by index */
  getPageColor: {
    parameters: {
      path: {
        /** @description Index of color */
        colorindex: number
        /** @description Index of page */
        pageindex: number
        /** @description Index of part */
        partindex: number
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    responses: {
      /** @description Get page color succeeded */
      200: {
        content: {
          'application/json': components['schemas']['page-color']
          'application/xml': components['schemas']['page-color']
        }
      }
      /** @description Page color not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Edit page color */
  editPageColor: {
    parameters: {
      path: {
        /** @description Index of color */
        colorindex: number
        /** @description Index of page */
        pageindex: number
        /** @description Index of part */
        partindex: number
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['page-color']
        'application/xml': components['schemas']['page-color']
      }
    }
    responses: {
      /** @description Action performed successfully */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Item not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get list of colors in the page */
  getPageColors: {
    parameters: {
      path: {
        /** @description Index of page */
        pageindex: number
        /** @description Index of part */
        partindex: number
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['page-color'][]
          'application/xml': components['schemas']['page-color'][]
        }
      }
    }
  }
  /** Get page */
  getPage: {
    parameters: {
      path: {
        /** @description Index of page */
        pageindex: number
        /** @description Index of part */
        partindex: number
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    responses: {
      /** @description Page layers not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Delete page */
  deletePage: {
    parameters: {
      path: {
        /** @description Index of page */
        pageindex: number
        /** @description Index of part */
        partindex: number
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    responses: {
      /** @description Delete succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Item not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Edit page */
  editPage: {
    parameters: {
      path: {
        /** @description Index of page */
        pageindex: number
        /** @description Index of part */
        partindex: number
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['edit-page-resource']
        'application/xml': components['schemas']['edit-page-resource']
      }
    }
    responses: {
      /** @description Action performed successfully */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Item not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Delete page file */
  deletePageFile: {
    parameters: {
      path: {
        /** @description Index of page */
        pageindex: number
        /** @description Index of part */
        partindex: number
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    responses: {
      /** @description Delete succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Item not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Edit page file */
  editPageFile: {
    parameters: {
      path: {
        /** @description Index of page */
        pageindex: number
        /** @description Index of part */
        partindex: number
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['edit-page-file']
        'application/xml': components['schemas']['edit-page-file']
      }
    }
    responses: {
      /** @description Action performed successfully */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Item not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get list of layers in the page */
  getPageLayers: {
    parameters: {
      path: {
        /** @description Index of page */
        pageindex: number
        /** @description Index of part */
        partindex: number
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['page-layer'][]
          'application/xml': components['schemas']['page-layer'][]
        }
      }
    }
  }
  /** Get page layer by index */
  getPageLayer: {
    parameters: {
      path: {
        /** @description Index of layer */
        layerindex: number
        /** @description Index of page */
        pageindex: number
        /** @description Index of part */
        partindex: number
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    responses: {
      /** @description Get page layer succeeded */
      200: {
        content: {
          'application/json': components['schemas']['page-layer']
          'application/xml': components['schemas']['page-layer']
        }
      }
      /** @description Page layer not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Edit page layer */
  editPageLayer: {
    parameters: {
      path: {
        /** @description Index of layer */
        layerindex: number
        /** @description Index of page */
        pageindex: number
        /** @description Index of part */
        partindex: number
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['edit-page-layer']
        'application/xml': components['schemas']['edit-page-layer']
      }
    }
    responses: {
      /** @description Action performed successfully */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Item not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get list of tiled parts */
  getTiledParts: {
    parameters: {
      path: {
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['tiled-part'][]
          'application/xml': components['schemas']['tiled-part'][]
        }
      }
    }
  }
  /** Get tiled part */
  getTiledPart_1: {
    parameters: {
      path: {
        /** @description Index of part */
        partindex: number
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    responses: {
      /** @description Get flat part succeeded */
      200: {
        content: {
          'application/json': components['schemas']['tiled-part']
          'application/xml': components['schemas']['tiled-part']
        }
      }
      /** @description Tiled part not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Edit tiled part */
  editTiledPart: {
    parameters: {
      path: {
        /** @description Index of part */
        partindex: number
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['edit-tiled-part-resource']
        'application/xml': components['schemas']['edit-tiled-part-resource']
      }
    }
    responses: {
      /** @description Action performed successfully */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Item not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get list of tiles */
  getTiles: {
    parameters: {
      path: {
        /** @description Index of part */
        partindex: number
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['tile-flat'][]
          'application/xml': components['schemas']['tile-flat'][]
        }
      }
    }
  }
  /** Get tile */
  getTile_1: {
    parameters: {
      path: {
        /** @description Index of tile */
        tileindex: number
        /** @description Index of part */
        partindex: number
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    responses: {
      /** @description Get tile succeeded */
      200: {
        content: {
          'application/json': components['schemas']['tile-flat']
          'application/xml': components['schemas']['tile-flat']
        }
      }
      /** @description Tile not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Edit tile */
  editTile: {
    parameters: {
      path: {
        /** @description Index of tile */
        tileindex: number
        /** @description Index of part */
        partindex: number
        /** @description Product name */
        productname: string
        /** @description ID of the project */
        projectid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['edit-tile-resource']
        'application/xml': components['schemas']['edit-tile-resource']
      }
    }
    responses: {
      /** @description Action performed successfully */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Item not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Update repeat template in the project with the nameprovided */
  updateRepeatTemplate: {
    parameters: {
      path: {
        /** @description Repeat template name */
        name: string
        /** @description ID of the project */
        projectid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['repeat-template-settings']
        'application/xml': components['schemas']['repeat-template-settings']
      }
    }
    responses: {
      /** @description Action performed successfully */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Item not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Remove repeat template in the project with the nameprovided */
  removeRepeatTemplate: {
    parameters: {
      path: {
        /** @description Repeat template name */
        name: string
        /** @description ID of the project */
        projectid: string
      }
    }
    responses: {
      /** @description Delete succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Item not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Run a script on the current project */
  run_1: {
    parameters: {
      path: {
        /** @description ID of the project */
        projectid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['RestScriptContext']
        'application/xml': components['schemas']['RestScriptContext']
      }
    }
    responses: {
      /** @description Run script succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Run a script */
  run_2: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['RestScriptContext']
        'application/xml': components['schemas']['RestScriptContext']
      }
    }
    responses: {
      /** @description Run script succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get die design by ID */
  getDieDesign_1: {
    parameters: {
      query?: {
        /** @description Include thumbnail image or not */
        thumb?: boolean
        /** @description Thumbnail width in pixels */
        'thumb-width'?: number
        /** @description Thumbnail height in pixels */
        'thumb-height'?: number
      }
      path: {
        /** @description ID of die design to get */
        diedesignid: string
      }
    }
    responses: {
      /** @description Get die design succeeded */
      200: {
        content: {
          'application/json': components['schemas']['DieDesignEntity']
          'application/xml': components['schemas']['DieDesignEntity']
        }
      }
      /** @description Die design not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Delete die design */
  deleteDieDesign_1: {
    parameters: {
      path: {
        /** @description ID of die design to delete */
        diedesignid: string
      }
    }
    responses: {
      /** @description Delete die design succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Die design not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get list of all die designs */
  getDieDesigns_1: {
    parameters: {
      query?: {
        /** @description Include thumbnail image or not */
        thumb?: boolean
        /** @description Thumbnail width in pixels */
        'thumb-width'?: number
        /** @description Thumbnail height in pixels */
        'thumb-height'?: number
      }
    }
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['DieDesignEntity'][]
          'application/xml': components['schemas']['DieDesignEntity'][]
        }
      }
    }
  }
  /** Import new die design */
  importDieDesign_1: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['ImportDieDesignEntity']
        'application/xml': components['schemas']['ImportDieDesignEntity']
      }
    }
    responses: {
      /** @description Import die design succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get mode by ID */
  getMode_1: {
    parameters: {
      path: {
        /** @description ID of mode to get */
        modeid: string
      }
    }
    responses: {
      /** @description Get mode succeeded */
      200: {
        content: {
          'application/json': components['schemas']['mode']
          'application/xml': components['schemas']['mode']
        }
      }
      /** @description Mode not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Edit mode */
  editMode_1: {
    parameters: {
      path: {
        /** @description ID of mode to edit */
        modeid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['mode']
        'application/xml': components['schemas']['mode']
      }
    }
    responses: {
      /** @description Edit mode succeeded */
      200: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Mode not found */
      404: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Delete mode */
  deleteMode_1: {
    parameters: {
      path: {
        /** @description ID of mode to delete */
        modeid: string
      }
    }
    responses: {
      /** @description Delete mode succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Mode not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get list of all modes */
  getModes_1: {
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['mode'][]
          'application/xml': components['schemas']['mode'][]
        }
      }
    }
  }
  /** Add new mode */
  addMode_1: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['mode']
        'application/xml': components['schemas']['mode']
      }
    }
    responses: {
      /** @description Add mode succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get plate by ID */
  getPlate_1: {
    parameters: {
      path: {
        /** @description ID of plate to get */
        plateid: string
      }
    }
    responses: {
      /** @description Get plate succeeded */
      200: {
        content: {
          'application/json': components['schemas']['PlateEntity']
          'application/xml': components['schemas']['PlateEntity']
        }
      }
      /** @description Plate not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Edit plate */
  editPlate_1: {
    parameters: {
      path: {
        /** @description ID of plate to edit */
        plateid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['PlateEntity']
        'application/xml': components['schemas']['PlateEntity']
      }
    }
    responses: {
      /** @description Edit plate succeeded */
      200: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Plate not found */
      404: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Delete plate */
  deletePlate_1: {
    parameters: {
      path: {
        /** @description ID of plate to delete */
        plateid: string
      }
    }
    responses: {
      /** @description Delete plate succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Plate not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get list of all plates */
  getPlates_1: {
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['PlateEntity'][]
          'application/xml': components['schemas']['PlateEntity'][]
        }
      }
    }
  }
  /** Add new plate */
  addPlate_1: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['PlateEntity']
        'application/xml': components['schemas']['PlateEntity']
      }
    }
    responses: {
      /** @description Add plate succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get press by ID */
  getPress_1: {
    parameters: {
      path: {
        /** @description ID of press to get */
        pressid: string
      }
    }
    responses: {
      /** @description Get press succeeded */
      200: {
        content: {
          'application/json': components['schemas']['PressEntity']
          'application/xml': components['schemas']['PressEntity']
        }
      }
      /** @description Press not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Edit press */
  editPress_1: {
    parameters: {
      path: {
        /** @description ID of press to edit */
        pressid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['PressEntity']
        'application/xml': components['schemas']['PressEntity']
      }
    }
    responses: {
      /** @description Edit press succeeded */
      200: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Press not found */
      404: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Delete press */
  deletePress_1: {
    parameters: {
      path: {
        /** @description ID of press to delete */
        pressid: string
      }
    }
    responses: {
      /** @description Delete press succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Press not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get list of all presses */
  getPresses_1: {
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['PressEntity'][]
          'application/xml': components['schemas']['PressEntity'][]
        }
      }
    }
  }
  /** Add new press */
  addPress_1: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['PressEntity']
        'application/xml': components['schemas']['PressEntity']
      }
    }
    responses: {
      /** @description Add press succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get process type by ID */
  getProcessType_1: {
    parameters: {
      path: {
        /** @description ID of process type to get */
        processtypeid: string
      }
    }
    responses: {
      /** @description Get process type succeeded */
      200: {
        content: {
          'application/json': components['schemas']['process-type']
          'application/xml': components['schemas']['process-type']
        }
      }
      /** @description Process type not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Edit process type */
  editProcessType_1: {
    parameters: {
      path: {
        /** @description ID of process type to edit */
        processtypeid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['process-type']
        'application/xml': components['schemas']['process-type']
      }
    }
    responses: {
      /** @description Edit process succeeded */
      200: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Process type not found */
      404: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Delete process type */
  deleteProcessType_1: {
    parameters: {
      path: {
        /** @description ID of process type to delete */
        processtypeid: string
      }
    }
    responses: {
      /** @description Delete process succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Process type not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get list of all process types */
  getProcessTypes_1: {
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['process-type'][]
          'application/xml': components['schemas']['process-type'][]
        }
      }
    }
  }
  /** Add new process type */
  addProcessType_1: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['process-type']
        'application/xml': components['schemas']['process-type']
      }
    }
    responses: {
      /** @description Add process succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get process by ID */
  getProcess_1: {
    parameters: {
      path: {
        /** @description ID of process to get */
        processid: string
      }
    }
    responses: {
      /** @description Get process succeeded */
      200: {
        content: {
          'application/json': components['schemas']['process']
          'application/xml': components['schemas']['process']
        }
      }
      /** @description Process not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Edit process */
  editProcess_1: {
    parameters: {
      path: {
        /** @description ID of process to edit */
        processid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['process']
        'application/xml': components['schemas']['process']
      }
    }
    responses: {
      /** @description Edit process succeeded */
      200: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Process not found */
      404: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Delete process */
  deleteProcess_1: {
    parameters: {
      path: {
        /** @description ID of process to delete */
        processid: string
      }
    }
    responses: {
      /** @description Delete process succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Process not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get list of all processes */
  getProcesses_1: {
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['process'][]
          'application/xml': components['schemas']['process'][]
        }
      }
    }
  }
  /** Add new process */
  addProcess_1: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['process']
        'application/xml': components['schemas']['process']
      }
    }
    responses: {
      /** @description Add process succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get stock type by ID */
  getStockType_1: {
    parameters: {
      path: {
        /** @description ID of stock type to get */
        stocktypeid: string
      }
    }
    responses: {
      /** @description Get stock type succeeded */
      200: {
        content: {
          'application/json': components['schemas']['stock-type']
          'application/xml': components['schemas']['stock-type']
        }
      }
      /** @description Stock type not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Edit stock type */
  editStockType_1: {
    parameters: {
      path: {
        /** @description ID of stock type to edit */
        stocktypeid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['stock-type']
        'application/xml': components['schemas']['stock-type']
      }
    }
    responses: {
      /** @description Edit stock type succeeded */
      200: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Stock type not found */
      404: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Delete stock type */
  deleteStockType_1: {
    parameters: {
      path: {
        /** @description ID of stock type to delete */
        stocktypeid: string
      }
    }
    responses: {
      /** @description Delete stock type succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Stock type not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get list of all stock types */
  getStockTypes_1: {
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['stock-type'][]
          'application/xml': components['schemas']['stock-type'][]
        }
      }
    }
  }
  /** Add new stock type */
  addStockType_1: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['stock-type']
        'application/xml': components['schemas']['stock-type']
      }
    }
    responses: {
      /** @description add stock type succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get stock by ID */
  getStock_1: {
    parameters: {
      path: {
        /** @description ID of stock to get */
        stockid: string
      }
    }
    responses: {
      /** @description Get stock succeeded */
      200: {
        content: {
          'application/json': components['schemas']['stock']
          'application/xml': components['schemas']['stock']
        }
      }
      /** @description Stock not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Edit stock */
  editStock_2: {
    parameters: {
      path: {
        /** @description ID of stock to edit */
        stockid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['stock']
        'application/xml': components['schemas']['stock']
      }
    }
    responses: {
      /** @description Edit stock succeeded */
      200: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Stock not found */
      404: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Delete stock */
  deleteStock_2: {
    parameters: {
      path: {
        /** @description ID of stock to delete */
        stockid: string
      }
    }
    responses: {
      /** @description Delete stock succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Stock not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get list of all stocks */
  getStocks_2: {
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['stock'][]
          'application/xml': components['schemas']['stock'][]
        }
      }
    }
  }
  /** Add new stock */
  addStock_2: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['stock']
        'application/xml': components['schemas']['stock']
      }
    }
    responses: {
      /** @description Add stock succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get template by ID */
  getTemplate_1: {
    parameters: {
      query?: {
        /** @description Include thumbnail image or not */
        thumb?: boolean
        /** @description Thumbnail width in pixels */
        'thumb-width'?: number
        /** @description Thumbnail height in pixels */
        'thumb-height'?: number
      }
      path: {
        /** @description ID of template to get */
        templateid: string
      }
    }
    responses: {
      /** @description Get template succeeded */
      200: {
        content: {
          'application/json': components['schemas']['TemplateEntity']
          'application/xml': components['schemas']['TemplateEntity']
        }
      }
      /** @description Template not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Delete template */
  deleteTemplate_1: {
    parameters: {
      path: {
        /** @description ID of template to delete */
        templateid: string
      }
    }
    responses: {
      /** @description Delete template succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Template not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get list of all templates */
  getTemplates_1: {
    parameters: {
      query?: {
        /** @description Include thumbnail image or not */
        thumb?: boolean
        /** @description Thumbnail width in pixels */
        'thumb-width'?: number
        /** @description Thumbnail height in pixels */
        'thumb-height'?: number
      }
    }
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['TemplateEntity'][]
          'application/xml': components['schemas']['TemplateEntity'][]
        }
      }
    }
  }
  /** Import new template */
  importTemplate_1: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['ImportTemplateEntity']
        'application/xml': components['schemas']['ImportTemplateEntity']
      }
    }
    responses: {
      /** @description Import template succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get thing by ID */
  getThing_1: {
    parameters: {
      path: {
        /** @description ID of thing to get */
        thingid: string
      }
    }
    responses: {
      /** @description Get thing succeeded */
      200: {
        content: {
          'application/json': components['schemas']['thing']
          'application/xml': components['schemas']['thing']
        }
      }
      /** @description Thing not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Edit thing */
  editThing_1: {
    parameters: {
      path: {
        /** @description ID of thing to edit */
        thingid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['thing']
        'application/xml': components['schemas']['thing']
      }
    }
    responses: {
      /** @description Edit thing succeeded */
      200: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Thing not found */
      404: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Delete thing */
  deleteThing_1: {
    parameters: {
      path: {
        /** @description ID of thing to delete */
        thingid: string
      }
    }
    responses: {
      /** @description Delete thing succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Thing not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get list of all things */
  getThings_1: {
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['thing'][]
          'application/xml': components['schemas']['thing'][]
        }
      }
    }
  }
  /** Add new thing */
  addThing_1: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['thing']
        'application/xml': components['schemas']['thing']
      }
    }
    responses: {
      /** @description Add thing succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /**
   * Get list of all folding patterns
   * @deprecated
   */
  getFoldingPatterns: {
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['FoldingPatternEntity'][]
          'application/xml': components['schemas']['FoldingPatternEntity'][]
        }
      }
    }
  }
  /** Get folding pattern by ID */
  getFoldingPattern_1: {
    parameters: {
      path: {
        /** @description ID of folding pattern to get */
        foldingpatternid: string
      }
    }
    responses: {
      /** @description Get folding pattern succeeded */
      200: {
        content: {
          'application/json': components['schemas']['folding-pattern']
          'application/xml': components['schemas']['folding-pattern']
        }
      }
      /** @description Folding pattern not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Edit folding pattern */
  editFoldingPattern: {
    parameters: {
      path: {
        /** @description ID of folding pattern to edit */
        foldingpatternid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['folding-pattern']
        'application/xml': components['schemas']['folding-pattern']
      }
    }
    responses: {
      /** @description Edit folding pattern succeeded */
      200: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Folding pattern not found */
      404: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Delete folding pattern */
  deleteFoldingPattern: {
    parameters: {
      path: {
        /** @description ID of folding pattern to delete */
        foldingpatternid: string
      }
    }
    responses: {
      /** @description Delete folding pattern succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Folding pattern not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get list of all folding patterns */
  getFoldingPatterns_1: {
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['folding-pattern'][]
          'application/xml': components['schemas']['folding-pattern'][]
        }
      }
    }
  }
  /** Add new folding pattern */
  addFoldingPattern: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['folding-pattern']
        'application/xml': components['schemas']['folding-pattern']
      }
    }
    responses: {
      /** @description Add folding pattern succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get list of all mark sets */
  getMarkSets: {
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['MarkSetEntity'][]
          'application/xml': components['schemas']['MarkSetEntity'][]
        }
      }
    }
  }
  /** Get list of all marks */
  getMarks: {
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['MarkEntity'][]
          'application/xml': components['schemas']['MarkEntity'][]
        }
      }
    }
  }
  /** Get mark by ID */
  getMark_1: {
    parameters: {
      path: {
        /** @description ID of mark to get */
        markid: string
      }
    }
    responses: {
      /** @description Get mark succeeded */
      200: {
        content: {
          'application/json': components['schemas']['MarkAsset']
          'application/xml': components['schemas']['MarkAsset']
        }
      }
      /** @description Mark not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Edit mark */
  editMark: {
    parameters: {
      path: {
        /** @description ID of mark to edit */
        markid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['mark']
        'application/xml': components['schemas']['mark']
      }
    }
    responses: {
      /** @description Edit mark succeeded */
      200: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Mark not found */
      404: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Delete mark */
  deleteMark: {
    parameters: {
      path: {
        /** @description ID of mark to delete */
        markid: string
      }
    }
    responses: {
      /** @description Delete mark succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Mark not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get list of all marks */
  getMarks_1: {
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['mark'][]
          'application/xml': components['schemas']['mark'][]
        }
      }
    }
  }
  /** Add new mark */
  addMark: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['mark']
        'application/xml': components['schemas']['mark']
      }
    }
    responses: {
      /** @description Add mark succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get script by ID */
  getScript_1: {
    parameters: {
      path: {
        /** @description ID of script to get */
        scriptid: string
      }
    }
    responses: {
      /** @description Get script succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ScriptAsset']
          'application/xml': components['schemas']['ScriptAsset']
        }
      }
      /** @description Script not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Edit script */
  editScript: {
    parameters: {
      path: {
        /** @description ID of script to edit */
        scriptid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ScriptAsset']
        'application/xml': components['schemas']['ScriptAsset']
      }
    }
    responses: {
      /** @description Edit script succeeded */
      200: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Script not found */
      404: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Delete script */
  deleteScript: {
    parameters: {
      path: {
        /** @description ID of script to delete */
        scriptid: string
      }
    }
    responses: {
      /** @description Delete script succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Script not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get list of all scripts */
  getScripts: {
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['ScriptAsset'][]
          'application/xml': components['schemas']['ScriptAsset'][]
        }
      }
    }
  }
  /** Add new script */
  addScript: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['ScriptAsset']
        'application/xml': components['schemas']['ScriptAsset']
      }
    }
    responses: {
      /** @description Add script succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /**
   * Get stock by ID
   * @deprecated
   */
  getStock_2: {
    parameters: {
      path: {
        /** @description ID of stock to get */
        stockid: string
      }
    }
    responses: {
      /** @description Get stock succeeded */
      200: {
        content: {
          'application/json': components['schemas']['StockEntity']
          'application/xml': components['schemas']['StockEntity']
        }
      }
      /** @description Stock not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /**
   * Edit stock
   * @deprecated
   */
  editStock_1: {
    parameters: {
      path: {
        /** @description ID of stock to edit */
        stockid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['StockEntity']
        'application/xml': components['schemas']['StockEntity']
      }
    }
    responses: {
      /** @description Edit stock succeeded */
      200: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Stock not found */
      404: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /**
   * Delete stock
   * @deprecated
   */
  deleteStock_1: {
    parameters: {
      path: {
        /** @description ID of stock to delete */
        stockid: string
      }
    }
    responses: {
      /** @description Delete stock succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Stock not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /**
   * Get list of all stocks
   * @deprecated
   */
  getStocks_1: {
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['StockEntity'][]
          'application/xml': components['schemas']['StockEntity'][]
        }
      }
    }
  }
  /**
   * Add new stock
   * @deprecated
   */
  addStock_1: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['StockEntity']
        'application/xml': components['schemas']['StockEntity']
      }
    }
    responses: {
      /** @description Add stock succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /**
   * Get grade by ID
   * @deprecated
   */
  getGrade: {
    parameters: {
      path: {
        /** @description ID of grade to get */
        gradeid: string
        /** @description ID of stock */
        stockid: string
      }
    }
    responses: {
      /** @description Get grade succeeded */
      200: {
        content: {
          'application/json': components['schemas']['GradeEntity']
          'application/xml': components['schemas']['GradeEntity']
        }
      }
      /** @description Grade not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /**
   * Edit grade
   * @deprecated
   */
  editGrade: {
    parameters: {
      path: {
        /** @description ID of grade to edit */
        gradeid: string
        /** @description ID of stock */
        stockid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['GradeEntity']
        'application/xml': components['schemas']['GradeEntity']
      }
    }
    responses: {
      /** @description Edit grade succeeded */
      200: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Grade not found */
      404: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /**
   * Delete grade in stock
   * @deprecated
   */
  deleteGrade: {
    parameters: {
      path: {
        /** @description ID of grade to delete */
        gradeid: string
        /** @description ID of stock */
        stockid: string
      }
    }
    responses: {
      /** @description Delete grade succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Grade not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /**
   * Get list of all grades in the stock
   * @deprecated
   */
  getGrades: {
    parameters: {
      path: {
        /** @description ID of stock */
        stockid: string
      }
    }
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['GradeEntity'][]
          'application/xml': components['schemas']['GradeEntity'][]
        }
      }
    }
  }
  /**
   * Add new grade to stock
   * @deprecated
   */
  addGrade: {
    parameters: {
      path: {
        /** @description ID of stock */
        stockid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['GradeEntity']
        'application/xml': components['schemas']['GradeEntity']
      }
    }
    responses: {
      /** @description Add grade succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /**
   * Get roll by ID
   * @deprecated
   */
  getRoll: {
    parameters: {
      path: {
        /** @description ID of roll to get */
        rollid: string
        /** @description ID of grade */
        gradeid: string
        /** @description ID of stock */
        stockid: string
      }
    }
    responses: {
      /** @description Get roll succeeded */
      200: {
        content: {
          'application/json': components['schemas']['RollEntity']
          'application/xml': components['schemas']['RollEntity']
        }
      }
      /** @description Roll not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /**
   * Edit roll
   * @deprecated
   */
  editRoll: {
    parameters: {
      path: {
        /** @description ID of roll to edit */
        rollid: string
        /** @description ID of grade */
        gradeid: string
        /** @description ID of stock */
        stockid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['RollEntity']
        'application/xml': components['schemas']['RollEntity']
      }
    }
    responses: {
      /** @description Edit roll succeeded */
      200: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Roll not found */
      404: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /**
   * Delete roll in grade
   * @deprecated
   */
  deleteRoll: {
    parameters: {
      path: {
        /** @description ID of roll to delete */
        rollid: string
        /** @description ID of grade */
        gradeid: string
        /** @description ID of stock */
        stockid: string
      }
    }
    responses: {
      /** @description Delete roll succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Roll not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /**
   * Get list of all rolls in the grade
   * @deprecated
   */
  getRolls: {
    parameters: {
      path: {
        /** @description ID of grade */
        gradeid: string
        /** @description ID of stock */
        stockid: string
      }
    }
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['RollEntity'][]
          'application/xml': components['schemas']['RollEntity'][]
        }
      }
    }
  }
  /**
   * Add new roll to grade
   * @deprecated
   */
  addRoll: {
    parameters: {
      path: {
        /** @description ID of grade */
        gradeid: string
        /** @description ID of stock */
        stockid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['RollEntity']
        'application/xml': components['schemas']['RollEntity']
      }
    }
    responses: {
      /** @description Add roll succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /**
   * Get sheet by ID
   * @deprecated
   */
  getSheet: {
    parameters: {
      path: {
        /** @description ID of sheet to get */
        sheetid: string
        /** @description ID of grade */
        gradeid: string
        /** @description ID of stock */
        stockid: string
      }
    }
    responses: {
      /** @description Get sheet succeeded */
      200: {
        content: {
          'application/json': components['schemas']['SheetEntity']
          'application/xml': components['schemas']['SheetEntity']
        }
      }
      /** @description Sheet not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /**
   * Edit sheet
   * @deprecated
   */
  editSheet: {
    parameters: {
      path: {
        /** @description ID of sheet to edit */
        sheetid: string
        /** @description ID of grade */
        gradeid: string
        /** @description ID of stock */
        stockid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['SheetEntity']
        'application/xml': components['schemas']['SheetEntity']
      }
    }
    responses: {
      /** @description Edit sheet succeeded */
      200: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Sheet not found */
      404: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /**
   * Delete sheet in grade
   * @deprecated
   */
  deleteSheet: {
    parameters: {
      path: {
        /** @description ID of sheet to delete */
        sheetid: string
        /** @description ID of grade */
        gradeid: string
        /** @description ID of stock */
        stockid: string
      }
    }
    responses: {
      /** @description Delete sheet succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Sheet not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /**
   * Get list of all sheets in the grade
   * @deprecated
   */
  getSheets: {
    parameters: {
      path: {
        /** @description ID of grade */
        gradeid: string
        /** @description ID of stock */
        stockid: string
      }
    }
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['SheetEntity'][]
          'application/xml': components['schemas']['SheetEntity'][]
        }
      }
    }
  }
  /**
   * Add new sheet to grade
   * @deprecated
   */
  addSheet: {
    parameters: {
      path: {
        /** @description ID of grade */
        gradeid: string
        /** @description ID of stock */
        stockid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['SheetEntity']
        'application/xml': components['schemas']['SheetEntity']
      }
    }
    responses: {
      /** @description add sheet succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get tiling by ID */
  getTiling_1: {
    parameters: {
      path: {
        /** @description ID of tiling to get */
        tilingid: string
      }
    }
    responses: {
      /** @description Get tiling succeeded */
      200: {
        content: {
          'application/json': components['schemas']['tiling']
          'application/xml': components['schemas']['tiling']
        }
      }
      /** @description Tiling not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Edit tiling */
  editTiling: {
    parameters: {
      path: {
        /** @description ID of tiling to edit */
        tilingid: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['tiling']
        'application/xml': components['schemas']['tiling']
      }
    }
    responses: {
      /** @description Edit tiling succeeded */
      200: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Tiling not found */
      404: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Delete tiling */
  deleteTiling: {
    parameters: {
      path: {
        /** @description ID of tiling to delete */
        tilingid: string
      }
    }
    responses: {
      /** @description Delete tiling succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Tiling not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get list of all tilings */
  getTilings: {
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['tiling'][]
          'application/xml': components['schemas']['tiling'][]
        }
      }
    }
  }
  /** Add new tiling */
  addTiling: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['tiling']
        'application/xml': components['schemas']['tiling']
      }
    }
    responses: {
      /** @description Add tiling succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** List all ARD Die Import Presets */
  getArdDieLayoutImportPresets_1: {
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['PresetEntity'][]
          'application/xml': components['schemas']['PresetEntity'][]
        }
      }
    }
  }
  /** List all CFF2 Die Layout Import Presets */
  getCff2DieLayoutImportPresets_1: {
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['PresetEntity'][]
          'application/xml': components['schemas']['PresetEntity'][]
        }
      }
    }
  }
  /** List all DDES2 Die Layout Import Presets */
  getDdes2DieLayoutImportPresets_1: {
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['PresetEntity'][]
          'application/xml': components['schemas']['PresetEntity'][]
        }
      }
    }
  }
  /** List all DDES3 Die Layout Import Presets */
  getDdes3DieLayoutImportPresets_1: {
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['PresetEntity'][]
          'application/xml': components['schemas']['PresetEntity'][]
        }
      }
    }
  }
  /** List all DXF Die Layout Import Presets */
  getDxfDieLayoutImportPresets_1: {
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['PresetEntity'][]
          'application/xml': components['schemas']['PresetEntity'][]
        }
      }
    }
  }
  /** List all MFG Die Import Presets */
  getMfgDieImportPresets_1: {
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['PresetEntity'][]
          'application/xml': components['schemas']['PresetEntity'][]
        }
      }
    }
  }
  /** List all PDF Die Layout Import Presets */
  getPdfDieLayoutImportPresets_1: {
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['PresetEntity'][]
          'application/xml': components['schemas']['PresetEntity'][]
        }
      }
    }
  }
  /** Get Imposition AI profile by ID */
  getImpositionAiProfiles_1: {
    parameters: {
      path: {
        /** @description ID of Imposition AI profile to get */
        'profile-id': string
      }
    }
    responses: {
      /** @description Get imposition AI profile succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ImpositionAiProfileEntity']
          'application/xml': components['schemas']['ImpositionAiProfileEntity']
        }
      }
      /** @description Profile not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Edit Imposition AI profile */
  editImpositionAiProfiles_1: {
    parameters: {
      path: {
        /** @description ID of Imposition AI profile to edit */
        'profile-id': string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ImpositionAiProfileEntity']
        'application/xml': components['schemas']['ImpositionAiProfileEntity']
      }
    }
    responses: {
      /** @description Edit imposition AI profile succeeded */
      200: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Profile not found */
      404: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          '*/*': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Delete Imposition AI profile */
  deleteImpositionAiProfiles_1: {
    parameters: {
      path: {
        /** @description ID of Imposition AI profile to delete */
        'profile-id': string
      }
    }
    responses: {
      /** @description Delete imposition AI profile succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Profile not found */
      404: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /** Get list of all Imposition AI profile */
  getImpositionAiProfiles_3: {
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['ImpositionAiProfileEntity'][]
          'application/xml': components['schemas']['ImpositionAiProfileEntity'][]
        }
      }
    }
  }
  /** Add new Imposition AI profile */
  addImpositionAiProfiles_1: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['ImpositionAiProfileEntity']
        'application/xml': components['schemas']['ImpositionAiProfileEntity']
      }
    }
    responses: {
      /** @description Add imposition AI profile succeeded */
      200: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Request is invalid */
      400: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
      /** @description Service is at maximum concurrency */
      503: {
        content: {
          'application/json': components['schemas']['ResponseEntity']
          'application/xml': components['schemas']['ResponseEntity']
        }
      }
    }
  }
  /**
   * List all Imposition AI Profiles (Deprecated)
   * @deprecated
   */
  getImpositionAiProfiles: {
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['PresetEntity'][]
          'application/xml': components['schemas']['PresetEntity'][]
        }
      }
    }
  }
  /** List all dynamic ink mapping presets */
  getDynamicInkMappings: {
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['PresetEntity'][]
          'application/xml': components['schemas']['PresetEntity'][]
        }
      }
    }
  }
  /** List all dynamic keyword mapping presets */
  getDynamicKeywordMapping: {
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['PresetEntity'][]
          'application/xml': components['schemas']['PresetEntity'][]
        }
      }
    }
  }
  /** List all Cover Sheet export presets */
  getCoverSheetExportPresets: {
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['PresetEntity'][]
          'application/xml': components['schemas']['PresetEntity'][]
        }
      }
    }
  }
  /** List all CSV Report Presets */
  getCsvReportPresets: {
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['PresetEntity'][]
          'application/xml': components['schemas']['PresetEntity'][]
        }
      }
    }
  }
  /** List all cutting CFF2 export presets */
  getCff2DieExportPresets: {
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['PresetEntity'][]
          'application/xml': components['schemas']['PresetEntity'][]
        }
      }
    }
  }
  /** List all cutting DXF export presets */
  getExportDieDxfPresets: {
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['PresetEntity'][]
          'application/xml': components['schemas']['PresetEntity'][]
        }
      }
    }
  }
  /** List all cutting PDF export presets */
  getPdfDieExportPresets: {
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['PresetEntity'][]
          'application/xml': components['schemas']['PresetEntity'][]
        }
      }
    }
  }
  /** List all cutting ZCC export presets */
  getExportDieZccPresets: {
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['PresetEntity'][]
          'application/xml': components['schemas']['PresetEntity'][]
        }
      }
    }
  }
  /** List all HP JDF export presets */
  getHpJdfExportPresets: {
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['PresetEntity'][]
          'application/xml': components['schemas']['PresetEntity'][]
        }
      }
    }
  }
  /** List all JDF export presets */
  getImposedJdfExportPresets: {
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['PresetEntity'][]
          'application/xml': components['schemas']['PresetEntity'][]
        }
      }
    }
  }
  /** List all JDF export presets */
  getCuttingJdfExportPresets: {
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['PresetEntity'][]
          'application/xml': components['schemas']['PresetEntity'][]
        }
      }
    }
  }
  /** List all JSON Project Report Presets */
  getJsonReportPresets: {
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['PresetEntity'][]
          'application/xml': components['schemas']['PresetEntity'][]
        }
      }
    }
  }
  /** List all Kongsberg JDF export presets */
  getKongsbergJdfExportPresets: {
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['PresetEntity'][]
          'application/xml': components['schemas']['PresetEntity'][]
        }
      }
    }
  }
  /** List all PDF export presets */
  getImposedPdfExportPresets: {
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['PresetEntity'][]
          'application/xml': components['schemas']['PresetEntity'][]
        }
      }
    }
  }
  /** List all PDF Project Report Presets */
  getPdfReportPresets: {
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['PresetEntity'][]
          'application/xml': components['schemas']['PresetEntity'][]
        }
      }
    }
  }
  /** List all PDF Vector export presets */
  getPdfVectorExportPresets: {
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['PresetEntity'][]
          'application/xml': components['schemas']['PresetEntity'][]
        }
      }
    }
  }
  /** List all tiling report export presets */
  getExportTilingReportPresets: {
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['PresetEntity'][]
          'application/xml': components['schemas']['PresetEntity'][]
        }
      }
    }
  }
  /** List all XML Project Report Presets */
  getXmlReportPresets: {
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['PresetEntity'][]
          'application/xml': components['schemas']['PresetEntity'][]
        }
      }
    }
  }
  /**
   * List all Ganging Profiles (Deprecated)
   * @deprecated
   */
  getGangingProfiles: {
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['PresetEntity'][]
          'application/xml': components['schemas']['PresetEntity'][]
        }
      }
    }
  }
  /** List all Product CSV import presets */
  getProductCsvImportPresets: {
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['PresetEntity'][]
          'application/xml': components['schemas']['PresetEntity'][]
        }
      }
    }
  }
  /** List all step-and-repeat presets */
  getStepAndRepeatPresets: {
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['PresetEntity'][]
          'application/xml': components['schemas']['PresetEntity'][]
        }
      }
    }
  }
  /** List all stock CSV presets */
  getStockCsv: {
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['PresetEntity'][]
          'application/xml': components['schemas']['PresetEntity'][]
        }
      }
    }
  }
  /** List all tiling presets */
  getTilings_1: {
    responses: {
      /** @description default response */
      default: {
        content: {
          'application/json': components['schemas']['PresetEntity'][]
          'application/xml': components['schemas']['PresetEntity'][]
        }
      }
    }
  }
}
